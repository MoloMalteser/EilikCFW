# this is the update.bin file from /ressources/EL decompiled with binary ninja

int32_t __convention("regparm") sub_0(void* arg1, int32_t, char arg3, void* arg4 @ ebp, int32_t arg5 @ edi)
{
    int32_t var_4 = 0x892180a9;
    *(arg1 - 0x7f153af7) = ROLD(*(arg1 - 0x7f153af7), arg3);
    *(arg4 - 0x3ef67f16) |= arg5;
    /* undefined */
}

int32_t sub_15a()
{
    /* undefined */
}

int32_t __convention("regparm") sub_15b(char* arg1, int32_t arg2, char* arg3, int32_t* arg4 @ esi)
{
    __int1();
    *arg3 = *arg3;
    *arg1 -= 0x80;
    *(arg4 - 0x7f967fb7) = &arg1[*(arg4 - 0x7f967fb7)];
    *arg4;
    __int1();
    *arg1 = *arg1;
    int32_t ebx;
    *ebx[1] = 0xe1;
    *ebx[1] = 0x3f;
    /* undefined */
}

int32_t __convention("regparm") sub_19d(int32_t arg1, int32_t arg2, void* arg3, int32_t arg4 @ esi, int32_t arg5, void* arg6, int32_t arg7, int16_t arg8, int32_t arg9, int32_t arg10)
{
    *(arg4 - 0x1e7f13f7);
    *(arg3 - 0x71100dc1) = arg1;
    0x90f1a01e();
    *(arg6 + 0x1d0f1cf) = arg5;
    int16_t edx_1;
    edx_1 = arg8 + *arg8[1];
    *__return_addr = __return_addr;
    /* undefined */
}

int32_t __convention("regparm") sub_1fb(int32_t arg1, uint16_t arg2, char* arg3, void* arg4 @ esi, char* arg5 @ edi)
{
    int32_t* esi = arg4 + 1;
    label_1fc:
    *arg5 -= arg1;
    label_1fe:
    *arg3 &= 0x6f;
    label_201:
    *(arg3 + 0x18046f0);
    int32_t eflags;
    
    while (true)
    {
        char temp0_1 = *arg3;
        *arg3 = arg3;
        arg3 = temp0_1;
        void* esi_1 = esi + 1;
        char temp0_2 = arg3[0xffffff80];
        arg3[0xffffff80] = arg3;
        arg3 = temp0_2;
        esi = esi_1 + 1;
        bool cond:0_1 = esi_1 <= 0xffffffff;
        bool cond:1_1 = esi_1 <= 0xffffffff;
        bool cond:2_1 = esi_1 <= 0xffffffff;
        bool cond:3_1 = esi_1 <= 0xffffffff;
        bool cond:4_1 = esi_1 <= 0xffffffff;
        bool cond:5_1 = esi_1 <= 0xffffffff;
        bool cond:6_1 = esi_1 <= 0xffffffff;
        bool cond:7_1 = esi_1 <= 0xffffffff;
        bool cond:8_1 = esi_1 <= 0xffffffff;
        
        if (esi_1 <= 0xffffffff)
            break;
        
        while (true)
        {
            if (cond:0_1)
                /* undefined */
            
            if (cond:1_1)
                goto label_1fc;
            
            if (cond:2_1)
                goto label_1fe;
            
            if (cond:3_1)
            {
                esi = __outsd(arg2, *esi, esi, eflags);
                goto label_201;
            }
            
            if (cond:4_1)
            {
                *(arg3 + 0x18046f0);
                break;
            }
            
            if (cond:5_1)
                /* undefined */
            
            if (cond:6_1)
            {
                *arg3 -= 0x7a;
                arg3 -= 1;
            }
            else
            {
                if (cond:7_1)
                    break;
                
                if (!cond:8_1)
                {
                    *esi;
                    trap(0xd);
                }
            }
            
            *(esi - 0x7a) += arg1;
            arg3 -= 1;
            char temp2_1 = *(esi + 0x7e);
            *(esi + 0x7e) -= 0x1a;
            cond:0_1 = temp2_1 <= 0x1a;
            cond:1_1 = temp2_1 <= 0x1a;
            cond:2_1 = temp2_1 <= 0x1a;
            cond:3_1 = temp2_1 <= 0x1a;
            cond:4_1 = temp2_1 <= 0x1a;
            cond:5_1 = temp2_1 <= 0x1a;
            cond:6_1 = temp2_1 <= 0x1a;
            cond:7_1 = temp2_1 <= 0x1a;
            cond:8_1 = temp2_1 <= 0x1a;
        }
    }
    
    __out_dx_oeax(arg2, arg1, eflags);
    /* undefined */
}

int32_t __convention("regparm") sub_324(int32_t* arg1, char* arg2, void* arg3)
{
    char temp3 = *arg2;
    *arg2 += arg1;
    *(arg3 - 0x4f5fb8ee) = *(arg3 - 0x4f5fb8ee) + 0x80;
    arg2 &= arg2[0xffffffea];
    *arg1 |= 0xffffffe3;
    /* undefined */
}

int32_t sub_359()
{
    /* undefined */
}

int32_t sub_35e()
{
    *0x5391eb07 &= 4;
    int32_t edx;
    *edx[1] = 7;
    /* undefined */
}

int32_t __convention("regparm") sub_363(char arg1, char* arg2, int32_t arg3, void* arg4 @ edi)
{
    void* ebx;
    void* var_4 = ebx;
    bool c = arg1 >= 0x15;
    
    if (!c)
    {
        arg3 = RLCB(arg3, 0x80, c);
        bool c_1 = /* bool c_1 = unimplemented  {rcl cl, 0x80} */;
        
        if (arg3 == 1)
        {
            *(ebx - 0x1430d47f) = *(ebx - 0x1430d47f) + 0x226aac79;
            bool c_2 = /* bool c_2 = unimplemented  {sbb dword [ebx-0x1430d47f], 0xdd955387} */;
            arg2[1] = arg2[1] + 0x1f;
            /* undefined */
        }
        
        arg4 += 1;
        *(arg4 - 0x64) = *(arg4 - 0x64) + arg1 - 0x15;
    }
    
    *0x904180f1 = *(arg4 - 0x7d);
    /* undefined */
}

int32_t sub_385()
{
    /* undefined */
}

int32_t sub_3bd()
{
    /* undefined */
}

int32_t __convention("regparm") sub_3c4(int32_t arg1, int16_t arg2, int16_t arg3, char* arg4 @ esi, int32_t arg5 @ edi)
{
    bool c;
    *arg3[1] = *arg3[1] - *arg3[1];
    
    if (arg1 != 0xffffffff && !arg1)
        /* tailcall */
        return sub_385();
    
    *arg2[1] &= *arg3[1];
    *arg4 = *arg4 - 0x39;
    /* tailcall */
    return sub_3bd();
}

int32_t __convention("regparm") j_sub_413(char arg1, void* arg2 @ ebp, void* arg3 @ edi)
{
    /* tailcall */
    return sub_413(arg1, arg2, arg3);
}

int32_t j_sub_35e()
{
    /* tailcall */
    return sub_35e();
}

int32_t __convention("regparm") sub_3d7(int32_t, char* arg2)
{
    bool c;
    *arg2 = *arg2 + 0x1f;
    /* undefined */
}

int32_t __convention("regparm") sub_3e2(char* arg1, char arg2, void* arg3, int32_t* arg4 @ ebp, int32_t arg5 @ edi)
{
    *arg1 += arg2;
    *arg4;
    int32_t eflags;
    __sti(eflags);
    *(arg3 - 0x718f16c3);
    *(arg3 - 0x718f16c3) ^= 0xffffffc0;
    int16_t eax;
    *eax[1] = *(*0x80e67947)[1] - arg3;
    /* undefined */
}

int32_t __convention("regparm") sub_3e9(void* arg1, char arg2, char* arg3, void* arg4 @ edi)
{
    *(arg1 - 0x4dbf2ee8) += arg1;
    *(arg4 + 1) = arg1;
    *(arg3 + 0x4e70e93d) ^= 0xffffff80;
    __int1();
    char* ebx;
    *(ebx + 0x23819980);
    *arg3 = ROLB(*arg3, 0x80);
    *(arg1 - 0x16);
    *ebx -= 0x1d;
    /* undefined */
}

int32_t sub_410()
{
    /* undefined */
}

int32_t __convention("regparm") sub_413(char arg1, void* arg2 @ ebp, void* arg3 @ edi)
{
    bool z;
    
    if (z)
        /* undefined */
    
    char* edx;
    edx = *(arg2 + 0x41);
    void arg_45;
    edx = *(&arg_45 + (arg2 << 2));
    int32_t esi;
    /* tailcall */
    return sub_4aa((arg1 - 0x25) & 0xf3, arg2, esi);
}

int32_t __convention("regparm") sub_429(char arg1)
{
    int32_t eflags;
    __out_immb_al(0xad, arg1, eflags);
    void* eax = 0xeb0152ae();
    *0x4580f184 -= 0x5f;
    __int1();
    *(eax - 0x80) -= 0x6b;
    /* undefined */
}

int32_t __convention("regparm") sub_43d(char arg1, char* arg2, void* arg3 @ ebp, void* arg4 @ edi)
{
    __int1();
    *arg2 |= 0xa3;
    __int1();
    arg2[0xffffffd0] -= 0x15;
    *0xebd2d1de -= 0x2e24fa7d;
    arg2 = *(arg3 + 0x41);
    void arg_45;
    arg2 = *(&arg_45 + (arg3 << 2));
    int32_t esi;
    /* tailcall */
    return sub_4aa(arg1 & 0xf3, arg3, esi);
}

int32_t __convention("fastcall") sub_485(void* arg1, int32_t arg2 @ ebp)
{
    int32_t temp0 = *(arg1 - 0x7e);
    *(arg1 - 0x7e) = arg2;
    int32_t esi;
    /* tailcall */
    return sub_4aa(&__return_addr | 0xb, temp0, esi);
}

int32_t __convention("fastcall") sub_487(void* arg1, int32_t arg2 @ ebp)
{
    int32_t esi;
    int32_t var_4 = esi;
    int32_t temp0 = *(arg1 - 0x7e);
    *(arg1 - 0x7e) = arg2;
    /* tailcall */
    return sub_4aa(&var_4 | 0xb, temp0, esi);
}

int32_t __convention("regparm") sub_497(char arg1, int32_t arg2 @ esi, int32_t arg3 @ edi)
{
    *arg2 - *arg3;
    bool p = /* bool p = unimplemented  {add al, 0x82} */;
    bool a = /* bool a = unimplemented  {add al, 0x82} */;
    bool d;
    int32_t var_4 = (arg1 + 0x7c - 0x7e ? 1 : 0) << 0xb | (d ? 1 : 0) << 0xa
        | (arg1 - 2 < 0 ? 1 : 0) << 7 | (arg1 == 2 ? 1 : 0) << 6 | (a ? 1 : 0) << 4
        | (p ? 1 : 0) << 2 | (arg1 + 0x7c >= 0x7e ? 1 : 0);
    /* undefined */
}

int32_t __convention("regparm") j_sub_429(char arg1)
{
    /* tailcall */
    return sub_429(arg1);
}

int32_t __convention("regparm") j_sub_43d(char arg1, char* arg2, void* arg3 @ ebp, void* arg4 @ edi)
{
    /* tailcall */
    return sub_43d(arg1, arg2, arg3, arg4);
}

int32_t __convention("regparm") sub_4a7(int32_t arg1)
{
    /* undefined */
}

int32_t __convention("regparm") sub_4aa(char arg1, int32_t arg2 @ ebp, int32_t arg3 @ esi)
{
    *(arg3 + (arg2 << 3)) = arg1;
    /* undefined */
}

int32_t j_sub_4b8()
{
    /* tailcall */
    return sub_4b8();
}

int32_t sub_4b7()
{
    int16_t ss;
    uint32_t var_4 = ss;
    /* tailcall */
    return sub_4b8();
}

int32_t sub_4b8() __pure
{
    return;
}

int32_t __convention("regparm") sub_4bb(char* arg1, int32_t* arg2 @ edi)
{
    *arg2;
    int32_t eflags;
    __cli(eflags);
    *arg1 += 0x36;
    /* undefined */
}

int32_t __convention("regparm") sub_4cd(int32_t arg1, int16_t arg2)
{
    /* undefined */
}

int32_t __convention("regparm") sub_4d8(char* arg1)
{
    int32_t eflags;
    __cli(eflags);
    *arg1 += 0x45;
    int32_t ebx;
    return ebx + 0x328bebcf;
}

int32_t sub_4e7()
{
    /* undefined */
}

int32_t __convention("regparm") sub_518(void* arg1, char* arg2, void* arg3, int32_t arg4 @ ebp, void* arg5 @ edi)
{
    arg2[0xffffffa1] |= 0xf1;
    void arg_47;
    *(&arg_47 + (arg2 << 2)) -= 0x31;
    __int1();
    char* ebx;
    *ebx |= 0xa3;
    __int1();
    *(arg1 - 0x30) -= 0x15;
    *ebx;
    arg1 = *0x81ebd4d1;
    void* ebx_1 = &ebx[*(arg4 - 0x750dba2f)];
    *(arg5 + 0x45) -= 0xe;
    void* eax;
    eax = ebx_1 + *(arg3 - 0xe);
    *(arg3 - 0xe) += arg1;
    arg2 = *(arg5 - 0x40);
    *(eax + (arg1 << 3)) += arg2;
    *arg2 += arg2;
    int32_t eflags;
    int32_t eflags_1;
    char temp0_2;
    temp0_2 = __daa(arg1, eflags);
    void* eax_1;
    eax_1 = temp0_2;
    /* undefined */
}

int32_t __convention("regparm") sub_556(int32_t, int32_t arg2)
{
    int32_t ebx;
    ebx = *arg2[1];
    bool s;
    bool o;
    
    if (s == o)
        breakpoint();
    
    /* undefined */
}

int32_t __convention("regparm") sub_57b(char* arg1, int16_t arg2, void* arg3 @ edi)
{
    char temp1 = *arg1;
    *arg1 += arg2;
    char temp0 = *(arg3 + 4);
    *(arg3 + 4) = arg1;
    arg1 = temp0;
    char ebx;
    *arg2[1] = *arg2[1] - ebx;
    /* undefined */
}

int32_t __convention("regparm") sub_590(void* arg1, char* arg2)
{
    *arg2;
    char temp0 = arg2[0xffffffcc];
    arg2[0xffffffcc] = arg1;
    arg1 = temp0;
    void* ecx;
    int32_t ebp;
    void* edi;
    /* tailcall */
    return sub_518(arg1, arg2, ecx, ebp, edi);
}

void __convention("regparm") sub_5b5(void* arg1, void* arg2, char* arg3) __noreturn
{
    char temp1 = *(arg1 - 0x6f2e7abe);
    *(arg1 - 0x6f2e7abe) += arg3;
    char* ebx;
    *arg3[1] = *arg3[1] - *ebx;
    char temp0 = ebx;
    ebx = arg2;
    arg2 = temp0;
    *ebx &= 0xe1862280;
    *ebx &= 0xcf;
    __int1();
    *(arg2 - 0x7e) -= 0x1f;
    int32_t eflags;
    __out_dx_oeax(arg2, arg1 + 1, eflags);
    __int1();
    *ebx -= 0x1565ee2d;
    char temp0_1 = *arg3;
    *arg3 = (arg1 + 1);
    void* eax;
    eax = temp0_1;
    breakpoint();
}

int32_t __convention("fastcall") sub_ab9(char* arg1, char* arg2, void* arg3 @ ebp, void* arg4 @ esi, char* arg5 @ edi, long double arg6 @ st0)
{
    arg1[0xffffffa0] = arg1[0xffffffa0];
    *arg1 &= 0xb0;
    void* eax;
    *eax[1] = 0xad;
    int32_t eflags;
    eax = __in_al_dx(arg2, eflags);
    int16_t cs;
    *(arg2 + 0x4954b109) = cs;
    char* ebx;
    ebx[0x49] = RLCB(ebx[0x49], 1, arg1[0xffffff81] < 0x29);
    arg1[0x48521dc0] |= 0x88;
    *(arg3 - 0x61767fb9);
    *(arg3 - 0x61767fb9) |= 0xcfdc8a29;
    __cli(eflags);
    *(arg3 + 0x19f19821) &= arg3;
    *arg1 &= 0x4b;
    arg1[0x71884849] = arg3 - 1;
    arg1 ^= 0x2c;
    trap(0xd);
}

void __convention("regparm") sub_2878(int32_t arg1, int32_t, void* arg3, int32_t arg4 @ ebp) __noreturn
{
    int32_t eflags;
    int32_t eflags_1 = __sti(eflags);
    int32_t* eax = &__return_addr - 0x7f;
    __int1();
    *eax += 0x682f041;
    eax = __salc(eflags_1);
    *(arg3 - 0x6eff3b16) &= eax;
    trap(0xd);
}

int32_t __convention("regparm") sub_28af(void* arg1, void* arg2, int32_t arg3, int32_t arg4 @ ebp, int32_t arg5 @ esi, char* arg6 @ edi, int16_t arg7)
{
    arg1 = *(arg3 + (arg5 << 2) + 0x4c70e93d);
    char* ecx_1 = arg3 ^ 0xd00343af;
    arg1 |= *ecx_1;
    __int1();
    *(arg1 - 0x3f) -= 0x13;
    arg2 |= *(__return_addr - 0x7112c24f);
    arg1 = ecx_1[(__return_addr << 2) - 0x738f16c3];
    
    if (!arg2 || ecx_1 != 1)
    {
        void* eax_1 = arg1 ^ *(ecx_1 - 1 + (arg2 << 2) - 0x23);
        *0xec1dbe28 -= 0xa6;
        *eax_1[1] |= *(eax_1 - 0x25);
        /* undefined */
    }
    
    int32_t eflags;
    int32_t eax;
    eax = __in_al_dx(arg2, eflags);
    *arg6 = eax;
    eax = __in_al_dx(arg2, eflags);
    int32_t eflags_1;
    char temp0_2;
    char temp1;
    temp0_2 = __aas(eax, *eax[1], eflags);
    eax = temp0_2;
    *eax[1] = temp1;
    eax = *(eax + 0x38d0f129);
    *(arg2 - 0x30) += eax;
    ecx_1[0xffffff8e] += eax;
    trap(0xd);
}

void __convention("regparm") sub_291b(int32_t arg1, char* arg2, char* arg3, int32_t arg4 @ ebp, int32_t arg5 @ esi, int32_t arg6 @ edi) __noreturn
{
    *arg5 - *arg6;
    arg2 |= arg3;
    int32_t eflags;
    void* eax;
    eax = __in_oeax_dx(arg2, eflags) | *arg3;
    __int1();
    *(eax - 0x11) -= 0x1f;
    *eax[1] = *eax[1] + *(arg3 - 1)[1];
    *arg2 |= 0x4c;
    __out_immb_al(0x58, eax, eflags);
    trap(0xd0);
}

int32_t sub_2a3e()
{
    int32_t edx;
    edx = 0x82;
    /* undefined */
}

int32_t __convention("regparm") sub_2a7b(int32_t arg1, uint16_t arg2)
{
    int32_t eflags;
    __out_dx_oeax(arg2, arg1, eflags);
    /* undefined */
}

int32_t __convention("regparm") sub_2a83(char* arg1, int32_t arg2, void* arg3, void* arg4 @ edi)
{
    int32_t esi = 0xd18c2c80;
    int32_t temp1 = *0xd18c2c80;
    *0xd18c2c80 -= 0x2c80d08a;
    bool p = /* bool p = unimplemented  {sub dword [esi], 0x2c80d08a} */;
    bool a = /* bool a = unimplemented  {sub dword [esi], 0x2c80d08a} */;
    bool z = temp1 == 0x2c80d08a;
    bool s = temp1 - 0x2c80d08a < 0;
    
    if (!z && s == temp1 - 0x2c80d08a)
    {
        *(arg3 - 0x7f2f75d2) = ROLD(*(arg3 - 0x7f2f75d2), 1);
        arg1 -= 0x7f;
        *(arg4 - 0x7f1e7952) = -(*(arg4 - 0x7f1e7952));
        arg1 -= 0x38;
        esi = 0xdb882d80;
        *0xdb882d80 -= 0xae97f5bf;
    }
    else
    {
        *arg1[1] = (s ? 1 : 0) << 7 | (z ? 1 : 0) << 6 | (a ? 1 : 0) << 4 | (p ? 1 : 0) << 2
            | (temp1 < 0x2c80d08a ? 1 : 0);
        *arg4;
        void* edi = arg4 + 1;
        char temp0_1 = arg3;
        arg3 = *arg1[1];
        *arg1[1] = temp0_1;
        *(arg1 + edi) -= 0xbe;
        *0x2e81db88 -= 0xbf;
        *arg1;
        arg4 = &arg1[1];
    }
    
    int32_t ebx;
    *ebx[1] ^= *arg3[1];
    /* unimplemented  {enter 0x700b, 0xef} */
    void* eax;
    int32_t ecx;
    int32_t edx;
    eax = 0x9be6bbb8();
    
    if (*ebx[1] && ecx == 1)
    {
        *(eax - 0x2f8e9a16) &= eax;
        /* tailcall */
        return sub_2a3e();
    }
    
    void* var_4 = eax;
    int32_t var_8 = ecx - 1;
    int32_t var_c = edx;
    int32_t var_10 = ebx;
    int32_t* var_14 = &var_10;
    int32_t var_1c = esi;
    void* var_20 = arg4;
    eax ^= *edx[1];
    /* jump -> *(ecx + 0xffffff8c) */
}

int32_t __convention("regparm") sub_3fd5(int32_t arg1, char* arg2, int32_t arg3)
{
    int32_t ebp;
    int32_t var_4 = ebp;
    int32_t* esp = &var_4;
    *0x8d634342 = arg1;
    bool c;
    bool z;
    
    if (!z && arg3 == 1)
    {
        int32_t var_8 = 0xffffffa3;
        esp = &var_8;
        c = c ^ 1;
    }
    
    *arg2 = RLCB(*arg2, 3, c);
    int32_t* ebx;
    __bound_gprv_mema32(arg1, *ebx);
    *(esp - 4) = 0xffffffd4;
    *(esp - 4);
    /* undefined */
}

int32_t __convention("regparm") sub_402d(int32_t arg1, int32_t* arg2, int32_t arg3 @ esi)
{
    arg1 = 0x81;
    __int1();
    *arg2 += 0x6903b09b;
    return arg1;
}

char* __convention("regparm") sub_40b1(int32_t arg1, int32_t, char* arg3, int32_t arg4 @ esi, int32_t arg5 @ edi)
{
    *arg3 -= 0x7c;
    char* result = arg1 & 0xb4704181;
    char temp0 = *result;
    *result = *arg3[1];
    *arg3[1] = temp0;
    return result;
}

int32_t sub_40c1()
{
    int32_t var_4 = 0xffffff81;
    /* undefined */
}

int32_t __convention("regparm") sub_40ca(int32_t arg1, int32_t arg2)
{
    *(arg2 - 0x7f);
    /* undefined */
}

int32_t sub_40d4() __pure
{
    int32_t ebx;
    ebx = 0x42;
}

int32_t __convention("fastcall") sub_40d7(char arg1, void* arg2)
{
    __bound_gprv_mema32(&__return_addr, *(arg2 - 0x71d7731f));
    void* ebx;
    *(ebx - 0x79e1f196) = ROLD(*(ebx - 0x79e1f196), arg1);
    /* undefined */
}

int32_t __convention("regparm") sub_4112(int32_t arg1, int32_t arg2, int32_t arg3, int16_t* arg4 @ edi)
{
    int16_t es;
    *arg4 = es;
    char temp0 = arg2;
    arg2 = *arg3[1];
    *arg3[1] = temp0;
    uint32_t var_4 = es;
    void* ebx;
    int32_t temp2 = *(ebx - 0x759cbcbe);
    *(ebx + ((COMBINE(arg2, arg1) % temp2) << 3) - 0x157d977c);
    return COMBINE(arg2, arg1) / temp2;
}

int32_t __stdcall sub_4181(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6) __pure
{
    return arg6;
}

long double __convention("fastcall") sub_4245(char* arg1, void* arg2, void* arg3 @ eax, int32_t arg4 @ ebp, void* const arg5 @ esi, void* arg6 @ edi, long double arg7 @ st0, long double arg8 @ st7, int32_t arg9, int32_t arg10, int32_t arg11, void* arg12, void* arg13, int32_t arg14)
{
    void* ebx;
    *(ebx - 0x1f967fb7);
    *(ebx - 0x1f967fb7) <<= arg1;
    bool c_10 = /* bool c_10 = unimplemented  {shl dword [ebx-0x1f967fb7], cl} */;
    int32_t eflags;
    int16_t temp0;
    temp0 = __arpl_memw_gpr16(*(arg2 + 0x518c238f), &__return_addr);
    *(arg2 + 0x518c238f) = temp0;
    int32_t* eax = arg3 - *(arg3 - 0x75257ed8);
    char* edi = arg6 + 1;
    arg1 &= 0xca;
    void* ebx_2 = ebx + 1 - *(eax + 0x638fe2db);
    int16_t ss;
    *(eax + 0x1b) = ss;
    *arg1 -= 0x81;
    long double result = arg7 + *(arg2 - 0x3d1e7fb9);
    void* ebx_3 = ebx_2 + 1;
    void* ecx = arg1 - *(arg5 - 0x4b06eb25);
    eax = 0xcf;
    int32_t eflags_1 = __cli(eflags);
    *(ecx + 0x4ff19421);
    *(ecx + 0x4ff19421) &= 0xcf;
    bool c = false;
    
    while (true)
    {
        char temp5_1 = eax;
        eax = temp5_1 - 7;
        *eax[1] = 1;
        *edi = RRCB(*edi, 4, temp5_1 - 7 < temp5_1 || (c && temp5_1 - 7 == temp5_1));
        *eax[1] = 1;
        int32_t* ecx_1 = eax;
        *(arg5 - 0xe7f74f0);
        *(arg5 - 0xe7f74f0) = RORD(*(arg5 - 0xe7f74f0), 1);
        bool c_2 = /* bool c_2 = unimplemented  {ror dword [esi-0xe7f74f0], sub_0+1} */;
        *ebx_3[1] = *(ebx_3 - 1)[1] - ecx;
        void* eax_2 = 0xf18047a0;
        
        while (true)
        {
            int16_t cs;
            ecx_1[-0x20] = cs;
            *(eax_2 - 0x27b573e0);
            int32_t eax_3 = *(eax_2 - 0x27b573e0) * 0x8841c941;
            bool c_3 = /* bool c_3 =
                unimplemented  {imul eax, dword [eax-0x27b573e0], 0x8841c941} */;
            ecx = (ecx_1 - 1) + *ebx_3[1];
            void* edx;
            edx = 1;
            edi = &edi[1];
            *ebx_3 &= 0x91804886;
            *(ecx - 0x6c);
            __int1();
            int32_t* esp;
            int32_t esp_1 = *esp;
            eflags_1 = __sti(eflags_1);
            int16_t es;
            *(esp_1 - 4) = es;
            *ecx &= 4;
            *0xd465fcdd -= 0x44;
            *(ecx - 0x7e4aa885) &= arg5;
            *ecx = *(esp_1 - 4);
            *(ecx - 0x7c) = *esp_1;
            *(ecx + arg5 - 0x7d91690c) += ecx;
            arg8 = arg8 * result;
            int16_t temp0_2 = arg5;
            arg5 = 0x540180bc;
            eax = temp0_2;
            *esp_1 = eax;
            *(esp_1 - 4) = ecx;
            *(esp_1 - 8) = edx;
            *(esp_1 - 0xc) = ebx_3;
            *(esp_1 - 0x10) = esp_1 - 0xc;
            *(esp_1 - 0x14) = arg4;
            *(esp_1 - 0x18) = 0x540180bc;
            *(esp_1 - 0x1c) = edi;
            esp = esp_1 - 0x1c;
            int32_t temp11_1 = *(ecx + eax - 0x690bce74);
            *(ecx + eax - 0x690bce74) += eax;
            c = temp11_1 + eax < temp11_1;
            bool z_1 = temp11_1 == -(eax);
            bool o_1 = temp11_1 + eax;
            
            if (z_1 || temp11_1 + eax < 0 != o_1)
            {
                __int1();
                edi -= 1;
                break;
            }
            
            if (!z_1)
                result = arg8;
            
            if (o_1)
                /* undefined */
            
            *(ecx - 0x74);
            int32_t esp_6 = esp ^ eax;
            int32_t eax_4;
            *eax_4[1] = *eax[1] + 0x31;
            void* eax_5 = __outsb(edx, *0x540180bc, 0x540180bc, eflags_1);
            *(esp_6 - 4) = eax_5;
            *(esp_6 - 8) = ecx;
            *(esp_6 - 0xc) = edx;
            *(esp_6 - 0x10) = ebx_3;
            *(esp_6 - 0x14) = esp_6 - 0x10;
            *(esp_6 - 0x18) = arg4;
            *(esp_6 - 0x1c) = eax_4;
            *(esp_6 - 0x20) = edi;
            ecx_1 = ecx + 1;
            ecx_1[-0x1d];
            esp = (esp_6 - 0x20) ^ eax_4;
            bool z_2 = esp_6 - 0x20 == eax_4;
            arg5 = eax_5;
            eax_2 = eax_4;
            
            if (!z_2 && !(((esp_6 - 0x20) ^ eax_4) < 0))
            {
                if (!z_2)
                    result = arg8;
                
                void* eax_6 = arg5;
                
                if (false)
                {
                    __fldenv_memmem28(*eax_6);
                    /* undefined */
                }
                
                *(ecx_1 - 0x7dd77e85);
                int32_t temp18_1 = *(edx - 0x6e2f5ad8);
                *(edx - 0x6e2f5ad8) = ROLD(*(edx - 0x6e2f5ad8), 1);
                bool z_3 = !ROLD(temp18_1, 1);
                
                while (true)
                {
                    ecx_1 -= 1;
                    
                    if (z_3 || ecx_1)
                        break;
                    
                    int16_t fs;
                    *ecx_1 = fs;
                    __fldenv_memmem28(*eax_6);
                    eax_6 ^= 0x23;
                    
                    while (true)
                    {
                        void* temp20_1 = edx;
                        edx = temp20_1 + edi;
                        z_3 = !(temp20_1 + edi);
                        
                        if (temp20_1 + edi < temp20_1)
                            break;
                        
                        *(ecx_1 + 0x3420d9f3) += ecx_1;
                        *ecx_1;
                        edx &= *ecx_1;
                        eflags_1 = __cli(eflags_1);
                    }
                }
                
                edx -= 0xc1;
                *(ecx_1 - 0x7f417f9d) += eax_6;
                *(esp - 4) = 0xf072fa31;
                eax_6 = 0x30;
                return result;
            }
            
            *(eax_2 - 0x7fb85f48) += edx;
            __int1();
        }
    }
}

int32_t __convention("regparm") sub_443b(int32_t* arg1, int32_t* arg2, int32_t arg3, void* arg4 @ esi, int32_t** arg5 @ edi, long double arg6 @ st0)
{
    char temp1 = arg1[-9];
    arg1[-9] += *arg1[1];
    bool c = temp1 + *arg1[1] < temp1;
    void* ecx_2;
    int32_t* ebx;
    
    while (true)
    {
        *ebx[1] = *ebx[1] - *ebx[1];
        *(arg5 - 0x57);
        arg5 += 1;
        long double x87_r0 = arg6 * *(arg4 - 0x7e);
        __int1();
        ecx_2 = arg4 - 1;
        arg6 = x87_r0 * *(ecx_2 - 0x80);
        
        if (arg4 - 1 >= 0)
            break;
        
        void* temp4_1 = arg4;
        arg4 -= arg5;
        arg1 = RRCB(arg1, 1, temp4_1 < arg5);
        *(ecx_2 + 0x3f) += *ebx[1];
        arg1 = 0xd7;
        char temp5_1 = *(arg4 - 0x40);
        *(arg4 - 0x40) += *(ecx_2 - 2)[1];
        *(ecx_2 - 2) &= 0xd3;
        arg1 = arg1 - 0x660848d6 - 1;
        *(ecx_2 - 0x62);
        *(ecx_2 - 0x62) |= *arg2[1];
        c = false;
    }
    
    int16_t cs;
    *(arg1 + 0x51) = cs;
    *arg1 = *arg1 + arg2;
    *(arg1 - 0x32) &= 0x8123e0f7;
    int32_t var_4_1 = 0xf072fa31;
    int32_t* var_8_1 = arg1;
    void* var_c_1 = ecx_2 + 1;
    int32_t* var_10 = arg2;
    int32_t* var_14 = ebx;
    int32_t** var_18_1 = &var_14;
    int32_t ebp;
    int32_t var_1c_1 = ebp;
    int32_t** var_20 = arg4;
    int16_t var_24 = arg5;
    ebx <<= 0xd3;
    bool c_3 = /* bool c_3 = unimplemented  {shl bl, 0xd3} */;
    void* ecx_7;
    
    if (c_3)
    {
        arg1 = 0xb4;
        ecx_7 = 0x84;
        /* undefined */
    }
    
    int32_t var_28 = 0x688242d9;
    *ecx_7[1] = *(ecx_2 + 1)[1] & arg2;
    *arg1 = RLCD(*arg1, 0x81, false);
    int32_t* var_2c = arg1;
    void* var_30 = ecx_7;
    int32_t* var_34 = arg2;
    int32_t* var_38 = ebx;
    int32_t** var_3c = &var_38;
    int32_t var_40 = ebp;
    void* var_44 = arg4;
    int32_t** var_48 = arg5;
    /* undefined */
}

int32_t sub_4b51(int32_t* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t* arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, char arg10, char* arg11, int32_t arg12)
{
    *(arg4 - 0x81) |= *arg5[1];
    int32_t temp1 = *arg5;
    *arg5 &= arg4 - 1;
    
    if (!(temp1 & (arg4 - 1)))
    {
        *(arg4 + 0x47) += *arg5[1];
        char temp2 = *arg11;
        *arg11 += arg10;
        /* unimplemented  {enter 0xcf61, 0xf5} */
        arg11[0xffffffc8] = RLCB(arg11[0xffffffc8], 0x60, temp2 + arg10 < temp2);
        /* undefined */
    }
    
    int32_t eflags;
    int32_t eflags_1 = __sti(eflags);
    *(arg4 + 0x7e) |= 0xfffffff6;
    int32_t* eax_2 = *arg1;
    int32_t eflags_2 = __sti(eflags_1);
    *eax_2 &= 0xf67f4981;
    __cli(eflags_2);
    *(eax_2 + arg2 - 0x61df7f4f) ^= 0x49;
    /* undefined */
}

int32_t __convention("regparm") sub_4e4d(int32_t arg1, int32_t arg2)
{
    int32_t eflags;
    __sti(eflags);
    int32_t ecx;
    ecx = *arg2[1];
    int32_t eax;
    *eax[1] = 0x80;
    *(eax - 0x76b676b8);
    __int1();
    /* jump -> arg2 */
}

int32_t __convention("regparm") sub_50bd(int16_t arg1, int32_t, int32_t arg3)
{
    int16_t es;
    uint32_t var_4 = es;
    int32_t eax = arg1;
    __int1();
    
    while (true)
    {
        arg3 -= 1;
        bool cond:0;
        
        if (!cond:0 && !arg3)
            break;
        
        int32_t temp0_1 = *eax & 0xf1980608;
        *eax = temp0_1;
        cond:0 = !temp0_1;
    }
    
    /* undefined */
}

void __convention("regparm") sub_511b(void* arg1, char arg2, int32_t arg3, void* arg4 @ esi, char* arg5 @ edi, long double arg6 @ st0, long double arg7 @ st1)
{
    *(arg1 - 0x64df7ddd) += 1;
    int32_t eax = arg1;
    __int1();
    *arg5 = eax;
    
    if (arg3 == 1 || arg3 == 2)
    {
        *eax &= 0x99;
        __int1();
        
        while (arg3 - 3 < 0)
            /* nop */
        
        int32_t ebx;
        *ebx &= 0x82;
        *(arg4 - 0x4c0e67b7) &= arg2;
        __int1();
        int32_t eax_4;
        int32_t ecx_4;
        
        if (arg3 == 4)
            eax_4 = (*(ebx + 0x4ef19849))();
        else
            __int1();
        __int1();
    }
}

int32_t __convention("regparm") sub_52cf(void* arg1, char* arg2, char* arg3, void** arg4 @ ebp, int32_t arg5 @ edi)
{
    void* ebx;
    bool c_2;
    bool p;
    bool o;
    
    if (p)
    {
        *(arg5 - 0x57);
        arg3[0xffffff81] |= arg3;
        __int1();
        void** esp_5 = arg4;
        arg4 = *esp_5;
        int32_t* esp_1 = &esp_5[1];
        char temp1_1 = *arg3;
        *arg3 |= arg3;
        
        if ((temp1_1 | arg3) < 0)
        {
            void* eax_2;
            eax_2 = *0x504907b2;
            char temp5 = eax_2;
            eax_2 += 1;
            *0xf9414805 = RRCB(*0xf9414805, 4, temp5 >= 0xff);
            *(eax_2 + 0x8480121);
            *(eax_2 + 0x8480121) += eax_2;
            *(ebx - 0x60);
            *(ebx - 0x60) |= *arg2[1];
            *esp_1;
            esp_1[1];
            void* ebp = esp_1[2];
            esp_1[4];
            esp_1[5];
            char* ecx = esp_1[6];
            int32_t eax_3 = esp_1[7];
            *ecx &= 0x81;
            ecx &= *(ebp - 0x18);
            *ecx ^= 0x84;
            *(eax_3 + 0x3180e84d);
            char eax_5;
            int32_t ecx_2;
            eax_5 = 0xfb4950da();
            __int1();
            int32_t eflags;
            int32_t eflags_1;
            char temp0_4;
            temp0_4 = __daa(eax_5, eflags);
            __sti(eflags_1);
            *(ecx_2 - 0x80);
            /* undefined */
        }
        
        arg1 = arg1 - *(arg1 - 0x7f9e3bdb);
        c_2 = /* c_2 = unimplemented  {sbb eax, dword [eax-0x7f9e3bdb]} */;
        o = /* o = unimplemented  {sbb eax, dword [eax-0x7f9e3bdb]} */;
    }
    else
    {
        *arg2;
        *arg2 -= 0x80;
        /* unimplemented  {sub byte [edx], 0x80} */
        ebx += 1;
        void* var_4 = arg1;
        char temp7_1 = arg1;
        arg1 += 0x41;
        int32_t gsbase;
        *(gsbase + arg1 - 7) = *(gsbase + arg1 - 7) - arg2;
        char temp8_1 = arg1;
        arg1 += 0x41;
        arg1 = arg1 - *(arg1 - 0x7f9e3bdb);
        c_2 = /* c_2 = unimplemented  {sbb ax, word [eax-0x7f9e3bdb]} */;
        o = /* o = unimplemented  {sbb ax, word [eax-0x7f9e3bdb]} */;
    }
    
    do
    {
        if (!o)
        {
            int32_t* esp_3 = arg1 - 0x610425e4;
            char temp12_1 = *0x2580db81;
            *0x2580db81 -= 4;
            c_2 = temp12_1 < 4;
            o = temp12_1 - 4;
            *esp_3;
            esp_3[1];
            arg4 = esp_3[2];
            ebx = esp_3[4];
            esp_3[5];
            arg3 = esp_3[6];
            arg1 = esp_3[7];
        }
        else
        {
            ebx += 1;
            arg4 = arg4 + 0x4f;
            o = /* o = unimplemented  {sbb ebp, 0xffffffb1} */;
            c_2 = false;
            
            if (o)
            {
                /* unimplemented  {imul edi, edi, 0x2461c71d} */
                /* undefined */
            }
        }
    } while (o);
    
    *arg3 -= 0x50;
    *arg1[1] = 7;
    arg3 = 0x84;
    /* undefined */
}

int32_t sub_530d(int32_t arg1 @ esi, void* arg2 @ edi, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, char arg7)
{
    *(arg2 + 0x67f58cfa);
    int32_t ebx;
    (*ebx)(arg1);
    void arg_1e;
    void* esp = &arg_1e;
    bool c = arg7 >= 0x97;
    int32_t eflags;
    __in_al_immb(0x2d, eflags);
    
    while (true)
    {
        int32_t* esp_1 = esp - 0x610425e4;
        char temp2_1 = *0x2580db81;
        *0x2580db81 -= 4;
        c = temp2_1 < 4;
        bool o_1 = temp2_1 - 4;
        *esp_1;
        esp_1[1];
        void* ebp_1 = esp_1[2];
        void* ebx_2 = esp_1[4];
        esp_1[5];
        void* ecx_1 = esp_1[6];
        void* eax_1 = esp_1[7];
        
        while (true)
        {
            if (!o_1)
            {
                *ecx_1 -= 0x50;
                *eax_1[1] = 7;
                ecx_1 = 0x84;
                /* undefined */
            }
            
            esp = eax_1;
            
            if (!o_1)
                break;
            
            ebx_2 += 1;
            ebp_1 = ebp_1 + 0x4f;
            o_1 = /* o_1 = unimplemented  {sbb ebp, 0xffffffb1} */;
            c = false;
            eax_1 = esp;
            
            if (o_1)
            {
                /* unimplemented  {imul edi, edi, 0x2461c71d} */
                /* undefined */
            }
        }
    }
}

int32_t __convention("regparm") sub_53eb(void* arg1, void* arg2, int32_t arg3, int32_t arg4 @ ebp, void** arg5 @ edi)
{
    *(arg2 - 0x74) = arg1;
    int32_t ebx;
    int32_t ebx_1 = ebx << 1;
    *(arg3 - 0x1f) -= 0x48;
    *(ebx_1 - 0x79) |= arg1;
    *(arg1 - 0x7eb87cdf) = ROLD(*(arg1 - 0x7eb87cdf), 1);
    int32_t esp = &__return_addr & arg2;
    *(arg3 - 0xe6cb622) = *(arg3 - 0xe6cb622) - 0x41;
    int32_t eflags;
    int32_t eflags_1 = __sti(eflags);
    void* eax;
    eax = *0xf0298479;
    char temp2 = ebx_1;
    ebx_1 = RRCB(temp2, 1, arg3 < esp);
    void* ecx_2;
    ecx_2 = (arg3 - esp - 1) + *ebx_1[1];
    *arg5 = eax;
    *(eax + 0x14d1ce29) += eax;
    *(ecx_2 - 0x272f35d7) += eax;
    *(ecx_2 - 0x28) -= 0x48;
    *(ecx_2 - 0x81) = *eax[1];
    int32_t* ebx_2 = ebx_1 & *(ebx_1 - 0x77b86fe0);
    __int1();
    eax = __in_al_dx(arg2, eflags_1);
    *ebx_2 &= 0xf1884790;
    *ebx_2[1] -= *(ecx_2 - 1)[1];
    *0x41ea817d;
    *(arg2 - 0x7fef7e16);
    /* undefined */
}

int32_t __convention("regparm") sub_5456(void* arg1, int32_t, void* arg3)
{
    char* ebx;
    *ebx &= 0x81;
    void* temp0 = *(arg1 - 0x1e02e20f) & arg3;
    *(arg1 - 0x1e02e20f) = temp0;
    
    if (temp0 < 0)
        /* undefined */
    
    *(arg3 - 0x80) -= 0x20;
    /* jump -> 0xc9422c35 */
}

int32_t sub_54b2(long double arg1 @ st0, long double arg2 @ st7, char** arg3, char** arg4, void* arg5, int16_t arg6, char* arg7, char* arg8)
{
    arg8[0xecf9c445] = arg7;
    *(arg5 - 0x6b967fb7) |= *arg6[1];
    *arg8;
    *arg8 &= *arg6[1];
    int32_t eflags;
    __cli(eflags);
    /* undefined */
}

int32_t __convention("regparm") sub_678f(int32_t arg1, int32_t arg2, char* arg3, int32_t arg4 @ esi, void* arg5 @ edi)
{
    *(arg5 - 0x6f) += 0x7f698049;
    void* ebx;
    int32_t temp1 = *(ebx - 0x7fb66f2f);
    *(ebx - 0x7fb66f2f) -= ebx;
    
    if (temp1 - ebx < 0)
    {
        arg3[0xffffffc0];
        arg3[0xffffffc0] s>>= arg3;
        /* unimplemented  {sar byte [ecx-0x40], cl} */
    }
    
    *arg3 &= 0x86;
    arg3 = *arg1[1];
    arg3[0x27];
    arg3[0x27] -= 0x43;
    *(arg3 - 1) &= 0x86;
    *(arg4 - 0x1e664180);
    int32_t eax;
    eax = 0x81;
    /* undefined */
}

int32_t __convention("regparm") sub_67b1(int32_t* arg1, int32_t arg2, int32_t arg3, int32_t* arg4 @ ebp, void* arg5 @ esi, void* arg6 @ edi)
{
    if (arg3 + 1 >= 0)
    {
        int32_t* ebx;
        char* ecx_1 = *(ebx + 0x52) - 1;
        
        if (arg3 != 0xffffffff && !ecx_1)
        {
            *(arg5 - 0x7f417fb9) &= arg1;
            int32_t eax_4;
            eax_4 = 0xa0;
            /* undefined */
        }
        
        *(arg6 - 0x7c1e3f1f) <<= 1;
        ecx_1[0x28];
        ecx_1[0x28] -= 0x43;
        *ecx_1 &= 0x86;
        *(arg5 - 0x1e4c4180);
        ecx_1[0xd0499ae1] = RORB(ecx_1[0xd0499ae1], 1);
        *(arg6 + 1) = *arg5;
        arg5 += 1;
        *ebx;
        *ebx += arg4;
        *ecx_1 &= 0x86;
        ecx_1 = *ebx[1];
        ecx_1[0x27];
        ecx_1[0x27] -= 0x43;
        *(ecx_1 - 1) &= 0x86;
    }
    else
    {
        *arg1;
        *(arg1 - 0x79de7f1f) &= arg1;
    }
    
    *(arg5 - 0x1e664180);
    arg1 = 0x81;
    /* undefined */
}

int32_t __convention("fastcall") sub_6a25(void* arg1, void* arg2 @ edi)
{
    __int1();
    int32_t eax;
    eax = 0x84;
    *0x848070e9 &= arg2;
    int32_t edx;
    *edx[1] = 0x21;
    *edx[1] = arg1;
    *(arg2 + 0x14) = eax;
    *(arg1 + 0x2c);
    *(arg1 + 0x2c) u>>= 1;
    /* undefined */
}

void* __convention("regparm") sub_6a4d(void* arg1, int16_t arg2, uint16_t* arg3, int32_t* arg4 @ edi)
{
    *arg4 &= arg1;
    arg1 = arg2;
    void* ebx;
    *(ebx + 1) = *arg1[1];
    arg1 = *0x10af084;
    int32_t eflags;
    __outsd(arg2, *arg3, arg3, eflags);
    *(arg1 - 0x199cde80) = *(ebx + 1)[1];
    return arg1;
}

void sub_6a76(int32_t arg1 @ esi) __noreturn
{
    *(arg1 - 0x64);
    trap(0xd);
}

int32_t __convention("regparm") sub_6bb3(int32_t arg1, void* arg2, int32_t arg3)
{
    int32_t var_4 = 0xffffffd2;
    *(arg2 + 0x4a);
    int32_t var_8 = 0xffffffd2;
    __bound_gprv_mema32(arg3, *(arg2 - 0x75e22d94));
    /* undefined */
}

int32_t __convention("regparm") sub_6bd3(int32_t arg1)
{
    /* undefined */
}

int32_t __convention("regparm") sub_6bdb(void* arg1, int32_t arg2, char arg3, void* arg4 @ ebp, int32_t arg5 @ edi)
{
    int32_t eflags;
    int16_t* edi_1;
    int16_t temp0_1;
    temp0_1 = __insd(arg5, arg2, eflags);
    *edi_1 = temp0_1;
    bool c;
    *0x2380b88a = RRCB(*0x2380b88a, arg3, c);
    *(arg4 + 0x4a);
    *arg1[1] |= *(arg4 + 0x4a);
    int16_t* edi;
    int16_t temp0;
    temp0 = __insd(edi_1, arg2, eflags);
    *edi = temp0;
    *0x2380b88a = RRCB(*0x2380b88a, arg3, false);
    int32_t gsbase;
    *(gsbase + (arg2 - 1) * 9 + 0x1d);
    int32_t ebx;
    *ebx[1] = *(arg1 + 0x648a2380);
    /* undefined */
}

int32_t __convention("regparm") sub_6bfb(int32_t arg1)
{
    /* undefined */
}

int32_t __convention("regparm") sub_6c03(int32_t arg1, int32_t arg2, int32_t arg3, uint16_t* arg4 @ esi, int32_t arg5 @ edi)
{
    int32_t eflags;
    uint8_t* edi;
    uint8_t temp0;
    temp0 = __insb(arg5, arg2, eflags);
    *edi = temp0;
    bool c;
    *0x2380b88a = RRCB(*0x2380b88a, arg3, c);
    *(arg2 + (arg3 << 1) + 0x6c);
    *arg1[1] |= *(arg2 + (arg3 << 1) + 0x6c);
    *0x2380b88a = RRCB(*0x2380b88a, arg3, false);
    /* unimplemented  {rcr byte [0x2380b88a], cl} */
    int32_t fsbase;
    *arg3[1] = edi[0xffffffd2 + fsbase];
    bool c_2 = /* bool c_2 = unimplemented  {sbb eax, 0x2380b88a} */;
    int32_t eax;
    *eax[1] = edi[0xffffffca];
    __outsd(arg2 - 1, *arg4, arg4, eflags);
    *0x2380b88a = RRCB(*0x2380b88a, arg3, c_2);
    /* undefined */
}

int32_t __convention("regparm") sub_6c2b(int32_t arg1, int16_t arg2, char arg3, int32_t arg4 @ ebp, uint16_t* arg5 @ esi, void* arg6 @ edi)
{
    int32_t eflags;
    uint16_t* esi_2 = __outsd(arg2, *arg5, arg5, eflags);
    bool c;
    *0x2380b88a = RRCB(*0x2380b88a, arg3, c);
    *(arg6 + 0x4a);
    *arg1[1] |= *(arg6 + 0x4a);
    uint16_t* esi = __outsd(arg2, *esi_2, esi_2, eflags);
    *0x2380b88a = RRCB(*0x2380b88a, arg3, false);
    /* unimplemented  {rcr byte [0x2380b88a], cl} */
    arg3 = *(arg4 - 0x2e);
    bool c_2 = /* bool c_2 = unimplemented  {sbb eax, 0x2380b88a} */;
    int32_t eax;
    *eax[1] = esi[-0x1b];
    __outsb(arg2 - 1, *esi, esi, eflags);
    *0x2380b88a = RRCB(*0x2380b88a, arg3, c_2);
    /* undefined */
}

void __convention("regparm") sub_6c53(int32_t arg1, int32_t arg2, char* arg3, int32_t arg4 @ ebp, uint16_t* arg5 @ esi, int32_t arg6 @ edi) __noreturn
{
    int32_t eflags;
    uint16_t* esi_4 = __outsb(arg2, *arg5, arg5, eflags);
    bool c;
    *0x2380b88a = RRCB(*0x2380b88a, arg3, c);
    esi_4[0x25];
    *arg1[1] |= esi_4[0x25];
    uint8_t* esi = __outsb(arg2, *esi_4, esi_4, eflags);
    *0x2380b88a = RRCB(*0x2380b88a, arg3, false);
    int16_t var_2 = arg3;
    char temp3 = *arg3;
    *arg3 += *arg1[1];
    *0x2380b892 = RRCB(*0x2380b892, arg3, temp3 + *arg1[1] < temp3);
    arg3[1] += *arg1[1];
    void* var_6 = &arg3[1];
    char temp4 = arg1;
    arg1 += 0x21;
    *0x2380b892 = RRCB(*0x2380b892, (&arg3[1]), temp4 >= 0xdf);
    arg1 += 0x21;
    void* var_a = &arg3[2];
    arg3[2];
    arg3[2] |= *arg1[1];
    *0x2380b892 = RRCB(*0x2380b892, (&arg3[2]), false);
    arg3[3] |= *arg1[1];
    void* var_e = &arg3[3];
    arg1 |= 0x21;
    *0x2380b892 = RRCB(*0x2380b892, (&arg3[3]), false);
    arg1 |= 0x21;
    void* var_12 = &arg3[4];
    char temp7 = arg3[4];
    arg3[4] = temp7 + *arg1[1];
    *0x2380b892 =
        RRCB(*0x2380b892, (&arg3[4]), temp7 + *arg1[1] < temp7 || temp7 + *arg1[1] == temp7);
    arg3[5] = arg3[5] + *arg1[1];
    void* var_16 = &arg3[5];
    char temp8 = arg1;
    arg1 = temp8 + 0x21;
    *0x2380b892 = RRCB(*0x2380b892, (&arg3[5]), temp8 + 0x21 < temp8 || temp8 + 0x21 == temp8);
    arg1 = arg1 + 0x21;
    void* var_1a = &arg3[6];
    arg3[6] = arg3[6] - *arg1[1];
    bool c_5 = /* bool c_5 = unimplemented  {sbb byte [ecx], ah} */;
    *0x2380b892 = RRCB(*0x2380b892, (&arg3[6]), c_5);
    arg3[7] = arg3[7] - *arg1[1];
    void* var_1e = &arg3[7];
    arg1 = arg1 - 0x21;
    bool c_6 = /* bool c_6 = unimplemented  {sbb al, 0x21} */;
    *0x2380b892 = RRCB(*0x2380b892, (&arg3[7]), c_6);
    arg1 = arg1 - 0x21;
    void* var_22 = &arg3[8];
    arg3[8];
    arg3[8] &= *arg1[1];
    *0x2380b892 = RRCB(*0x2380b892, (&arg3[8]), false);
    arg3[9] &= *arg1[1];
    void* var_26 = &arg3[9];
    arg1 &= 0x21;
    *0x2380b892 = RRCB(*0x2380b892, (&arg3[9]), false);
    arg1 &= 0x21;
    void* var_2a = &arg3[0xa];
    char temp13 = arg3[0xa];
    arg3[0xa] -= *arg1[1];
    *0x2380b892 = RRCB(*0x2380b892, (&arg3[0xa]), temp13 < *arg1[1]);
    arg3[0xb] -= *arg1[1];
    void* var_2e = &arg3[0xb];
    char temp14 = arg1;
    arg1 -= 0x21;
    *0x2380b892 = RRCB(*0x2380b892, (&arg3[0xb]), temp14 < 0x21);
    arg1 -= 0x21;
    void* var_32 = &arg3[0xc];
    arg3[0xc];
    arg3[0xc] ^= *arg1[1];
    *0x2380b892 = RRCB(*0x2380b892, (&arg3[0xc]), false);
    arg3[0xd] ^= *arg1[1];
    void* var_36 = &arg3[0xd];
    arg1 ^= 0x21;
    *0x2380b892 = RRCB(*0x2380b892, (&arg3[0xd]), false);
    arg1 ^= 0x21;
    void* var_3a = &arg3[0xe];
    *0x2380b892 = RRCB(*0x2380b892, (&arg3[0xe]), arg3[0xe] < *arg1[1]);
    arg3[0xf];
    void* var_3e = &arg3[0xf];
    *0x2380b892 = RRCB(*0x2380b892, (&arg3[0xf]), arg1 < 0x21);
    void* var_42 = &arg3[0x10];
    *(arg3 + 0xa) &= arg2 - 1;
    *(arg3 + 0xb) &= arg2 - 1;
    *(arg3 + 0xc) &= arg2 - 1;
    int32_t eax_7 = arg1 + 1 - 0x2380b892 + 1 - 0x2380b892 - 1 - 0x2380b892 - 1 - 0x2380b892;
    *(arg3 + 0xd) &= arg2 - 1;
    int32_t var_46 = eax_7;
    int32_t* var_4a = eax_7 - 0x2380b892;
    *(arg3 + 0xe) &= arg2 - 1;
    int32_t* var_4e = &var_4a;
    int32_t** var_52 = &var_4e;
    *(arg3 + 0xf) &= arg2 - 1;
    int32_t* eax_9 = var_4e;
    *(arg3 + 0x10) &= arg2 - 1;
    int32_t eax_10 = eax_9 - 0x2380b892;
    int32_t esp_1 = *var_4a;
    *(arg3 + 0x11) &= arg2 - 1;
    *(esp_1 - 4) = eax_10;
    *(esp_1 - 8) = &arg3[0x18];
    *(esp_1 - 0xc) = arg2 - 1;
    int32_t ebx;
    *(esp_1 - 0x10) = ebx;
    *(esp_1 - 0x14) = esp_1 - 0x10;
    *(esp_1 - 0x18) = arg4;
    *(esp_1 - 0x1c) = esi;
    *(esp_1 - 0x20) = arg6;
    *(esp_1 - 0x24) = eax_10 - 0x2380b892;
    *(esp_1 - 0x28) = &arg3[0x19];
    *(esp_1 - 0x2c) = arg2 - 1;
    *(esp_1 - 0x30) = ebx;
    *(esp_1 - 0x34) = esp_1 - 0x30;
    *(esp_1 - 0x38) = arg4;
    *(esp_1 - 0x3c) = esi;
    *(esp_1 - 0x40) = arg6;
    *(arg3 + 0x12) &= arg2 - 1;
    int32_t fsbase;
    *(fsbase + arg3 + 0x13) &= arg2 - 1;
    *(esp_1 - 0x44) = 0x921dd221;
    *(esp_1 - 0x48) = 0x6cf95121;
    int32_t esp_5 = esp_1 - 0x48;
    char* eax_12 = 0xf9412380 - 0x2380b892;
    void* ecx_26 = &arg3[0x1b];
    uint8_t* edi;
    uint8_t temp0;
    temp0 = __insb(arg6, (arg2 - 1), eflags);
    *edi = temp0;
    *(ecx_26 - 7);
    *(ecx_26 - 7) &= arg2 - 1;
    *0x2380b892 = RRCB(*0x2380b892, ecx_26, false);
    void* temp43_1 = ecx_26;
    ecx_26 += 1;
    void* eax_13;
    bool c_11;
    bool c_13;
    bool s_2;
    bool o_2;
    
    if (temp43_1 + 1)
    {
        eax_12 = eax_12 - 0x2380b892;
        label_6e22:
        void* temp44_1 = ecx_26;
        ecx_26 += 1;
        s_2 = temp44_1 + 1 < 0;
        o_2 = temp44_1 + 1;
        c_13 = true;
        label_6e24:
        
        if (s_2 == o_2)
        {
            *(esp_5 - 4) = ecx_26;
            esp_5 -= 4;
            *eax_12;
            *eax_12 &= 0xd2;
            c_11 = false;
            label_6e2b:
            eax_13 = eax_12 - 0x2380b892;
            ecx_26 += 1;
            label_6e32:
            *eax_13 &= 0x51;
            *eax_13;
            *0x2380b892 = RRCB(*0x2380b892, ecx_26, false);
            goto label_6e3e;
        }
        
        eax_13 = eax_12 - 0x2380b892;
    }
    else
    {
        *(esp_5 - 4) = ecx_26;
        esp_5 -= 4;
        
        if (temp43_1 == 0xffffffff)
        {
            char* temp45_1 = eax_12;
            eax_12 &= *(ecx_26 - 7);
            c_13 = false;
            s_2 = (temp45_1 & *(ecx_26 - 7)) < 0;
            o_2 = false;
            goto label_6e24;
        }
        
        *0x2380b892 = RRCB(*0x2380b892, ecx_26, true);
        void* temp47_1 = ecx_26;
        ecx_26 += 1;
        c_11 = true;
        
        if (temp47_1 == 0xffffffff)
            goto label_6e2b;
        
        *(esp_5 - 4) = ecx_26;
        esp_5 -= 4;
        
        if (temp47_1 + 1 < 0)
        {
            eax_13 = eax_12 & *(ecx_26 - 7);
            goto label_6e32;
        }
        
        *0x2380b892 = RRCB(*0x2380b892, ecx_26, true);
        void* temp50_1 = ecx_26;
        ecx_26 += 1;
        bool s_1 = temp50_1 + 1 < 0;
        
        if (s_1)
        {
            eax_13 = eax_12 - 0x2380b892;
            label_6e3e:
            ecx_26 += 1;
        }
        else
        {
            *(esp_5 - 4) = ecx_26;
            esp_5 -= 4;
            
            if (s_1 == temp50_1 + 1)
            {
                *0x2380b892 = RRCB(*0x2380b892, ecx_26, true);
                goto label_6e22;
            }
            
            eax_13 = eax_12 & *(ecx_26 - 7);
        }
        
        *eax_13;
        *(esp_5 - 4) = ecx_26;
        esp_5 -= 4;
        *eax_13 = *eax_13[1];
        *0x2380b892 = RRCB(*0x2380b892, ecx_26, true);
    }
    *eax_13 = *eax_13[1];
    *(esp_5 - 4) = ecx_26 + 1;
    int16_t fs;
    *eax_13 = fs;
    *0x2380b892 = RRCB(*0x2380b892, (ecx_26 + 1), true);
    *eax_13 = fs;
    *(esp_5 - 8) = ecx_26 + 2;
    int32_t edx_11;
    edx_11 = (arg2 - 1);
    *(ecx_26 - 4) &= edx_11;
    edx_11 = edx_11;
    int32_t eax_15 = esp_5 - 8 - 0x2380b892;
    *(ecx_26 - 3) &= edx_11;
    edx_11 = edx_11;
    char temp57 = *(ecx_26 - 2);
    *(ecx_26 - 2) &= edx_11;
    bool p = /* bool p = unimplemented  {and byte [ecx-0x7], dl} */;
    bool a = /* undefined */;
    bool d;
    *(eax_15 - 4) = (d ? 1 : 0) << 0xa | ((temp57 & edx_11) < 0 ? 1 : 0) << 7
        | (!(temp57 & edx_11) ? 1 : 0) << 6 | (a ? 1 : 0) << 4 | (p ? 1 : 0) << 2;
    edx_11 = edx_11;
    bool p_1 = /* bool p_1 = unimplemented  {inc ecx} */;
    bool a_1 = /* bool a_1 = unimplemented  {inc ecx} */;
    *(eax_15 - 8) = (ecx_26 + 5 + 1 ? 1 : 0) << 0xb | (d ? 1 : 0) << 0xa
        | (ecx_26 + 6 < 0 ? 1 : 0) << 7 | (ecx_26 == 0xfffffffa ? 1 : 0) << 6 | (a_1 ? 1 : 0) << 4
        | (p_1 ? 1 : 0) << 2 | 1;
    *(ecx_26 - 1) &= edx_11;
    int32_t eax_16;
    eax_16 = *0xa4f95120;
    edx_11 = edx_11;
    *edi = *esi;
    void* esi_1 = &esi[1];
    *ecx_26 &= edx_11;
    *0x2380b892 = RRCB(*0x2380b892, (ecx_26 + 7), false);
    *(eax_15 - 0xc) = ecx_26 + 8;
    int32_t eax_17;
    eax_17 = *esi_1;
    edx_11 = edx_11;
    int32_t eax_18;
    eax_18 = *(esi_1 + 1);
    *(ecx_26 + 2);
    *(ecx_26 + 2) &= edx_11;
    *0x2380b892 = RRCB(*0x2380b892, (ecx_26 + 9), false);
    *(eax_15 - 0x10) = ecx_26 + 0xa;
    *0x2380b892 = RRCB(*0x2380b892, (ecx_26 + 0xa), true);
    *(eax_15 - 0x14) = ecx_26 + 0xb;
    edx_11 = edx_11;
    char* eax_20 = 0xbcf95120 - 0x2380b892 - 0x2380b892;
    *eax_20 <<= 0x51;
    int32_t esp_14;
    int16_t es;
    esp_14 = __les_gprz_memp(*eax_20);
    *0x2380b892 = RRCB(*0x2380b892, (ecx_26 + 0xd), true);
    int32_t esp_15;
    int16_t es_1;
    esp_15 = __les_gprz_memp(*eax_20);
    *(esp_15 - 4) = ecx_26 + 0xe;
    /* unimplemented  {enter 0xd220, 0x1d} */
    /* unimplemented  {enter sub_511b+5, 0xf9} */
    breakpoint();
}

int32_t __convention("regparm") sub_7b92(int32_t arg1, int16_t arg2, int32_t* arg3, void* arg4 @ ebp, int32_t arg5 @ esi, int32_t arg6 @ edi)
{
    *0x40499fdd = 0xffffffc0;
    int32_t* ebx;
    *ebx &= 0x300148a1;
    bool z = !(*ebx & 0x300148a1);
    void* eax;
    eax = *0x8631e049;
    __int1();
    
    while (true)
    {
        if (!z)
        {
            *(arg6 - 0x7f);
            *(eax - 0x5eb87dde);
            *(eax - 0x5eb87dde) &= eax;
            arg3[-0x39bed9a] = arg3[-0x39bed9a] - 0x1b;
            /* jump -> *(arg5 + 0x804994e1) */
        }
        
        z = arg3 == 1;
        arg3 -= 2;
        
        if (!z && arg3)
            break;
        
        char temp0_1 = arg3;
        arg3 = *arg2[1];
        *arg2[1] = temp0_1;
    }
    
    __int1();
    *0x40499fdd;
    *(arg6 - 0x7f);
    *(eax - 0x5eb87dde);
    *(eax - 0x5eb87dde) &= eax;
    arg3[-0x39bed9d] = arg3[-0x39bed9d] - 0x33;
    *(arg4 - 0x70dc7e1f) -= 1;
    void* eax_1 = eax - 1;
    /* unimplemented  {enter 0x861f, 0xf1} */
    int32_t edi_2 = arg6;
    int32_t temp10_1;
    
    do
    {
        *(edi_2 - 0x7f);
        *(eax_1 - 0x5eb87dde);
        *(eax_1 - 0x5eb87dde) &= eax_1;
        edi_2 += 1;
        *(arg3 - 0xe6fb67b) = *(arg3 - 0xe6fb67b) - 0x42;
        *(eax_1 - 0x47417f42) += 1;
        *arg3;
        *arg3 &= 0x9d;
        int32_t temp8_1 = *(eax_1 - 0x4b);
        *(eax_1 - 0x4b) = temp8_1 + arg3;
        bool o_1 = /* bool o_1 = unimplemented  {adc dword [eax-0x4b], ecx} */;
        
        if (temp8_1 + arg3 < 0 != o_1)
            /* undefined */
        
        *arg3;
        *arg3 &= 0xdb;
        eax_1 = eax_1 - 0x4b;
        *arg3[1] = 0xc1;
        *arg3[1] = 0x59;
        eax_1 -= 2;
        *arg3[1] = 0xcd;
        *(eax_1 - 0x4b);
        arg2 |= *(ebx - 0x4b474ab5);
        void* ecx_1 = arg3 & arg3[0x14];
        temp10_1 = ROLD(*(eax_1 - 0x660e7442), 1);
        *(eax_1 - 0x660e7442) = temp10_1;
        arg3 = ecx_1 - 1;
    } while (temp10_1 && arg3);
    *arg3 -= 0x2982d1bf;
    int32_t eflags;
    eax_1 = __in_al_immb(0xd1, eflags);
    int32_t temp11 = *arg3;
    *arg3 -= 0xffffffa5;
    *ebx = RRCB(*ebx, 1, temp11 < 0xffffffa5);
    int32_t* edi_3 = *0xfd298003;
    int32_t esi_1 = *0xfd298007;
    void* ebp = *0xfd29800b;
    void* ebx_1 = *0xfd298013;
    int32_t edx = *0xfd298017;
    char* ecx_2 = *0xfd29801b;
    void* eax_3 = *0xfd29801f;
    *ecx_2 &= 0x7e;
    char temp1 = eax_3 % *(eax_3 - 0x7e4f0f04);
    eax_3 = eax_3 / *(eax_3 - 0x7e4f0f04);
    *eax_3[1] = temp1;
    *edi_3;
    int16_t edx_1 = edx & *edi_3;
    int16_t ds;
    *0xfd29801f = ds;
    char temp0_4 = ecx_2;
    ecx_2 = *edx_1[1];
    *edx_1[1] = temp0_4;
    void* eax_5;
    eax_5 = (eax_3 - 2) - 7;
    *(edi_3 - 0x7f);
    *(eax_5 - 0x5eb87dde);
    *(eax_5 - 0x5eb87dde) &= eax_5;
    ecx_2[0xf1904913] = ecx_2[0xf1904913] - 0x7d;
    *(ebp + 0x122381e1) -= 1;
    *(edi_3 + 1) |= ebx_1;
    char temp0_5 = ecx_2;
    ecx_2 = *edx_1[1];
    *edx_1[1] = temp0_5;
    *(eax_5 + 0x228f071a);
    *(eax_5 + 0x228f071a) &= eax_5 - 0x7eb87b08;
    ecx_2[0xf190490c] = ecx_2[0xf190490c] + 0x74;
    void* eax_7;
    eax_7 = __in_al_immb(0xe1, eflags);
    ecx_2[0xffffff80] |= ecx_2;
    int16_t es;
    *0xfd29801b = es;
    *(ebx_1 - 0x7f) = *(eax_7 * 0x1d - 1)[1];
    void* ecx_3 = ecx_2 & *ecx_2;
    *(ecx_3 - 0x66) |= ecx_3;
    *(esi_1 - 0x7b060f0f);
    *ecx_3 &= 0x47822280;
    *0x1918047;
    __int1();
    *0xfd29801b;
    /* undefined */
}

int32_t sub_8247()
{
    void* ebx;
    *(ebx - 0x76df5fdd) = RORB(*(ebx - 0x76df5fdd), 1);
    /* undefined */
}

int32_t sub_82b3(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6)
{
    /* undefined */
}

int32_t j_sub_8247()
{
    /* tailcall */
    return sub_8247();
}

int32_t __convention("regparm") sub_82bf(int32_t arg1, int32_t arg2, char* arg3, void* arg4 @ ebp, char* arg5 @ esi, char* arg6 @ edi)
{
    __int1();
    *arg6 -= 0x40;
    int32_t i = arg1 ^ 0x8347a010;
    __int1();
    
    while (i <= 0)
        /* nop */
    
    arg6[0xffffff84];
    __int1();
    *arg3 += i;
    int32_t eax;
    eax = 0x84;
    __int1();
    *arg3 += 1;
    void* ebx;
    ebx = 0x48;
    int16_t ds;
    *(arg4 + 0x7f) = ds;
    *arg6 = RRCB(*arg6, 0x82, eax < 0x9981dc91);
    int32_t eax_2 = eax + 0x236f;
    *(ebx - 0x7c) |= eax_2;
    __int1();
    int32_t temp2 = *arg6;
    *arg6 -= 0x7f;
    bool c_1 = temp2 >= 0x7f;
    int32_t eax_3;
    int32_t edx;
    edx = HIGHD(eax_2);
    eax_3 = LOWD(eax_2);
    char temp3 = arg3[0x13a2e636];
    arg3[0x13a2e636] = temp3 - 0x7e;
    int32_t eax_4;
    void* edx_1;
    edx_1 = HIGHD(eax_3);
    eax_4 = LOWD(eax_3);
    *0xf0899082 = RRCD(*0xf0899082, 0xa4, temp3 - 0x7e < temp3 || (c_1 && temp3 - 0x7e == temp3));
    *(edx_1 - 0x5b1e67ab) += arg3;
    eax_4 = 0xa1;
    arg6 = &arg6[1];
    int32_t eax_6;
    eax_6 = 0xdf;
    int32_t eax_7 = eax_6 & 0x783f1c6;
    *0x2ddada83 u>>= 0x81;
    __int1();
    *arg3 |= 0xe1;
    int16_t* esp;
    void* edx_2;
    void* i_1;
    
    do
    {
        /* unimplemented  {enter 0x81f1, 0x9} */
        int32_t eax_8;
        eax_8 = (eax_7 - 0x2dfada86) & 0xf0;
        eax_8 = *0x82b30401;
        int32_t eax_9;
        edx_2 = HIGHD(eax_8);
        eax_9 = LOWD(eax_8);
        *0xf0899082 = RRCD(*0xf0899082, 0xa4, false);
        char temp5_1 = *(arg4 + (edx_2 << 1) - 0x417f19f2);
        *(arg4 + (edx_2 << 1) - 0x417f19f2) += arg3;
        arg3 = arg3 - arg6;
        *arg6 = *arg5;
        void* edi = &arg6[1];
        void* esi = &arg5[1];
        int32_t temp6_1 = *(arg4 + 0x29);
        *(arg4 + 0x29) += esp;
        eax_9 = eax_9 - 0x7b;
        *arg3 &= arg3;
        *edi = *esi;
        void* edi_1 = edi + 1;
        arg5 = esi + 1;
        *(arg3 - 0x7cd67767) += eax_9;
        *ebx[1] = RORB(*ebx[1], 1);
        *(arg3 + arg4 - 0xe772e7d) = &arg3[*(arg3 + arg4 - 0xe772e7d)];
        *arg3 -= 0x7d;
        *(arg3 - 0x7d0e3930) -= eax_9;
        *esp;
        esp = &esp[1];
        char temp0_1 = arg3;
        arg3 = *edx_2[1];
        *edx_2[1] = temp0_1;
        *arg3 -= 0x38;
        eax_7 = 0x181f188;
        *0x912e34e = *edx_2[1];
        arg3 = *edx_2[1];
        *arg3;
        *0x90ae34e = *edx_2[1];
        *edi_1;
        i_1 = edi_1 + 4;
        *0x81e37b81 &= 0x181f188;
        *(arg3 - 0x19) &= arg5;
        *arg3 -= 0x5e;
        arg6 = i_1 - *(edx_2 - 0x3c141c3);
    } while (i_1 <= *(edx_2 - 0x3c141c3));
    *0x84a66e89 += 0x181f188;
    *(ebx - 0x24c344d3) |= arg4;
    int16_t* esp_1 = *esp;
    char temp9 = *arg3;
    *arg3 -= 0x53;
    int32_t* eax_10;
    void* ecx;
    char* edx_3;
    eax_10 = 0xb105d239();
    eax_10 = eax_10 - arg6[0xffffff83];
    *arg6 = eax_10;
    void* edi_2 = &arg6[4];
    *eax_10 &= 0xf1819985;
    int32_t eax_11;
    eax_11 = 0x81;
    *(ecx + 0x70e93db1) &= ecx;
    *(arg4 - 7);
    int16_t ss;
    *(ecx + 0x9bff1cf) = ss;
    *arg5 = *eax_11[1];
    void* ecx_1 = ecx & 0xf8707f8;
    
    while (true)
    {
        int32_t ebx_1;
        *ebx_1[1] = 0xb0;
        
        if (edx_3 > edi_2)
            *(eax_11 - 0x71e7eda) |= ecx_1;
        else
        {
            edx_3 ^= 0xb0;
            
            if (edx_3 >= 0)
            {
                *eax_11[1] ^= *edx_3[1];
                arg5[0x75] += *ecx_1[1];
                *(edi_2 - 0x30d98048);
                *(ebx_1 - 0x80) ^= 0x20;
                char temp11 = *(edi_2 - 0x77);
                *(edi_2 - 0x77) = ROLB(*(edi_2 - 0x77), 1);
                bool c_6 = /* bool c_6 = unimplemented  {rol byte [edi-0x77], 0x1} */;
                __int1();
                
                if (ROLB(temp11, 1) && !c_6)
                    /* undefined */
                
                __int1();
                *edx_3 |= 0xc4;
                /* jump -> 0xd09a0af0 */
            }
            
            while (true)
            {
                ecx_1 -= 1;
                
                if (edx_3 && !ecx_1)
                    break;
                
                __int1();
                edi_2 = 0x81268809;
            }
        }
        
        *esp_1;
        esp_1 = &esp_1[1];
        void* temp0_2 = *edi_2;
        *edi_2 = ecx_1;
        ecx_1 = temp0_2;
    }
}

int32_t sub_835d(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6)
{
    /* undefined */
}

int32_t __convention("regparm") sub_8b9a(int32_t* arg1, int32_t arg2, int32_t arg3, void* arg4 @ ebp, void** arg5 @ edi)
{
    bool c;
    bool p;
    bool a;
    bool z;
    bool s;
    bool d;
    bool o;
    int32_t var_4 = (o ? 1 : 0) << 0xb | (d ? 1 : 0) << 0xa | (s ? 1 : 0) << 7 | (z ? 1 : 0) << 6
        | (a ? 1 : 0) << 4 | (p ? 1 : 0) << 2 | (c ? 1 : 0);
    int32_t* esp_1 = &var_4;
    *(arg5 + 0x4ffa4f1) += arg3;
    int32_t* ecx = arg3 - 1;
    int32_t* ebx;
    
    if (*(arg5 + 0x4ffa4f1) == -(arg3) || ecx)
        *(ecx + 0x50692091) += ecx;
    else
    {
        *arg1;
        bool o_1 = /* bool o_1 = unimplemented  {imul eax, dword [eax], 0xc848cf7c} */;
        
        if (o_1)
        {
            *(*arg1 * 0xc848cf7c + 0x7c);
            ecx[-0x20] -= 0x20;
            *ebx &= 0x1381e84d;
            arg4 -= 1;
            arg1 = 0x69209d45();
            int32_t* var_8 = arg1;
            esp_1 = &var_8;
            *(ecx + 0x50692091) += ecx;
        }
    }
    
    while (true)
    {
        void** eax_4;
        int32_t ecx_1;
        int32_t edx_1;
        eax_4 = 0x847ead1c();
        *(arg5 - 0x3d00780f) += ecx_1;
        void* ecx_2 = ecx_1 - 1;
        *edx_1[1] = ecx_2;
        int16_t ds;
        *(esp_1 - 4) = ds;
        esp_1 -= 4;
        int32_t eflags = __sti(eflags);
        eax_4 = __in_al_immb(0xe1, eflags);
        *(ecx_2 - 0x80) = RORD(*(ecx_2 - 0x80), 0x79);
        void* temp3_1 = *(ecx_2 + 9) & arg4;
        *(ecx_2 + 9) = temp3_1;
        char temp5_1;
        
        if (temp3_1 >= 0)
        {
            ebx += 1;
            temp5_1 = *ecx_2 & *ecx_2[1];
            *ecx_2 = temp5_1;
        }
        
        bool c_1;
        
        if (temp3_1 >= 0 && temp5_1 < 0)
        {
            *ebx &= 0x1381e84d;
            arg4 -= 1;
            eax_4 = 0x69209d03();
        }
        else
        {
            int32_t temp4_1 = *(ebx + 0x6920d1);
            *(ebx + 0x6920d1) -= eax_4;
            
            if (temp4_1 >= eax_4)
            {
                ebx[-0x1fed93cc] -= eax_4;
                arg5 = *(ecx_2 - 0x7f9837b8) * 0x148b721;
                
                while (true)
                {
                    *eax_4 += esp_1;
                    
                    while (true)
                    {
                        int32_t* eax_7 = *eax_4 * 0x8729847c;
                        *eax_7 <<= 1;
                        int32_t* eax_8 = *eax_7 * 0x8329857c;
                        *eax_8 <<= 1;
                        char* eax_9 = *eax_8 * 0x8429817c;
                        char temp7_1 = *eax_9 << 1;
                        *eax_9 = temp7_1;
                        *eax_9;
                        int32_t* eax_10 = *eax_9 * 0x8848af7c;
                        c_1 = /* c_1 = unimplemented  {imul eax, dword [eax], 0x8848af7c} */;
                        bool o_2 = /* bool o_2 =
                            unimplemented  {imul eax, dword [eax], 0x8848af7c} */;
                        
                        if (!o_2)
                            goto label_8bb9;
                        
                        void* ecx_3 = ecx_2 - 1;
                        void** ecx_5;
                        
                        if (!temp7_1 || ecx_3)
                        {
                            int32_t temp10_1 = *(arg4 - 0x18);
                            ecx_5 = ecx_3 + temp10_1;
                            *ecx_5 = *ecx_5 + 0x20;
                            *(eax_10 - 7);
                            ecx_5[0x14] &= *ecx_5[1];
                        }
                        else
                        {
                            int32_t* eax_11 = *eax_10 * 0x8329827c;
                            *eax_11 <<= 1;
                            eax_4 = *eax_11 * 0x8229817c;
                            char temp11_1 = *(arg4 - 0x77b756df);
                            *(arg4 - 0x77b756df) = ROLB(*(arg4 - 0x77b756df), 1);
                            bool o_3 = /* bool o_3 =
                                unimplemented  {rol byte [ebp-0x77b756df], 0x1} */;
                            
                            if (!o_3)
                            {
                                if (ROLB(temp11_1, 1) < 0)
                                {
                                    ecx_3 = *ecx_3 * 0x8b43087c;
                                    *eax_4 <<= 1;
                                    int32_t* eax_5 = *eax_4 * 0x8329817c;
                                    *eax_5 <<= 1;
                                    void* eax_6 = *eax_5 * 0x8329857c;
                                    *(eax_6 - 0x46967fb7) <<= 1;
                                    eax_4 = eax_6 - 1;
                                    /* unimplemented  {enter 0x8067, 0x21} */
                                }
                                
                                *ebx[1] = 0x48;
                                ecx_2 = ecx_3 + arg5;
                                break;
                            }
                            
                            *(ecx_3 - 0x81) -= 0x20;
                            *ebx &= 0x1381e84d;
                            arg4 -= 1;
                            void** eax_12;
                            void* ecx_6;
                            eax_12 = 0x69209ddb();
                            *(esp_1 - 4) = eax_12;
                            esp_1 -= 4;
                            ecx_5 = eax_12;
                            *(ecx_6 + 0x50692091) += ecx_6;
                        }
                        
                        void* eax_14;
                        void* ecx_7;
                        eax_14 = 0x847eadb2();
                        int32_t temp12_1 = *(arg5 + 0x20fc3cf1);
                        *(arg5 + 0x20fc3cf1) += ecx_7;
                        bool s_2 = temp12_1 + ecx_7 < 0;
                        *(eax_14 - 7);
                        void* edx_4 = *(eax_14 - 7) * 0x499c118d;
                        void* temp15_1;
                        
                        for (bool i = /* bool i =
                            unimplemented  {imul edx, dword [eax-0x7], 0x499c118d} */; s_2 != i; 
                            i = temp15_1 - 1)
                        {
                            char temp14_1 = *(ecx_7 + 0x50);
                            *(ecx_7 + 0x50) &= *ecx_7[1];
                            bool p_1 = /* bool p_1 = unimplemented  {and byte [ecx+0x50], ch} */;
                            bool a_1 = /* undefined */;
                            edx_4 = ecx_7;
                            *(esp_1 - 4) = (d ? 1 : 0) << 0xa
                                | ((temp14_1 & *ecx_7[1]) < 0 ? 1 : 0) << 7
                                | (!(temp14_1 & *ecx_7[1]) ? 1 : 0) << 6 | (a_1 ? 1 : 0) << 4
                                | (p_1 ? 1 : 0) << 2 | 1;
                            esp_1 -= 4;
                            temp15_1 = ecx_7;
                            ecx_7 -= 1;
                            s_2 = temp15_1 - 1 < 0;
                        }
                        
                        eax_14 &= 0xfd;
                        void* const esi_3 = eax_14;
                        eax_4 = ecx_5;
                        ecx_2 = ecx_7 - 1;
                        
                        if (eax_14 && !ecx_2)
                        {
                            *(ecx_2 - 0x81) -= 0x20;
                            *ebx &= 0xe84d9381;
                            *eax_4 &= 0x84;
                            void* ecx_9 = eax_4;
                            void* eax_15 = ecx_2 - 1;
                            *(ecx_9 + 0x50) &= *ecx_9[1];
                            int16_t es;
                            char temp18_1;
                            char temp19_1;
                            bool c_4;
                            bool c_5;
                            
                            do
                            {
                                void* temp0_6 = ecx_9;
                                ecx_9 = eax_15;
                                *(temp0_6 + 0x50692091) += temp0_6;
                                *ecx_9 = esi_3;
                                *(esp_1 - 4) = temp0_6;
                                int32_t temp0_7 = *temp0_6;
                                *temp0_6 = ecx_9;
                                bool p_2 = /* bool p_2 = unimplemented  {test al, dh} */;
                                bool a_2 = /* undefined */;
                                *(temp0_7 - 4) = (d ? 1 : 0) << 0xa
                                    | ((temp0_6 & *edx_4[1]) < 0 ? 1 : 0) << 7
                                    | (!(temp0_6 & *edx_4[1]) ? 1 : 0) << 6 | (a_2 ? 1 : 0) << 4
                                    | (p_2 ? 1 : 0) << 2;
                                int32_t temp16_1 = *(arg5 - 0x7f03e00f);
                                *(arg5 - 0x7f03e00f) += ecx_9;
                                esi_3 = 0xe19dbe80;
                                *(edx_4 - 0x80) = *(edx_4 - 0x80) + ecx_9;
                                *(temp0_6 + 0x4a) &= temp0_6;
                                *ecx_9 &= 0x60;
                                *ecx_9 &= 0xb8;
                                edx_4 -= 1;
                                *ecx_9 &= 0x54;
                                *(temp0_7 - 8) = es;
                                *ecx_9 &= 0xfc;
                                *ecx_9 &= 0xfd;
                                es = *(temp0_7 - 6);
                                esp_1 = temp0_7 - 4;
                                *ecx_9 &= 0x80;
                                int32_t temp17_1 = *(temp0_6 - 0x6667e5ff);
                                *(temp0_6 - 0x6667e5ff) += temp0_6;
                                c_4 = temp17_1 + temp0_6 < temp17_1;
                                char temp0_8;
                                char temp1_1;
                                temp0_8 = __aas(temp0_6, *temp0_6[1], eflags);
                                eax_15 = temp0_8;
                                *eax_15[1] = temp1_1;
                                temp18_1 = (ebx - 1);
                                temp19_1 = *(eax_15 - 0x3c1a4067);
                                ebx = temp18_1 - temp19_1;
                                c_5 = /* c_5 = unimplemented  {sbb bl, byte [eax-0x3c1a4067]} */;
                            } while (!(temp18_1 - temp19_1) || c_5);
                            *ebx;
                            esp_1[-0x20] &= arg5;
                            *arg5 &= esp_1;
                            *ecx_9 &= 0xc4;
                            char* fsbase;
                            *(fsbase + ecx_9) &= 0x8d;
                            int32_t eax_16 = eax_15 - 0x71;
                            *(ebx + 0x32f18f49) &= (ecx_9 - 1);
                            *(ecx_9 - 0x7f) &= *ebx[1];
                            *(edx_4 - 0x77de7e30) -= eax_16;
                            eax_15 = eax_16 - 1;
                            *(arg4 - 0x78) = *edx_4[1];
                            ecx_9 -= 2;
                            *(ecx_9 - 0x20) -= 0x64;
                            *ecx_9;
                            *ecx_9 &= 0x20;
                            *eax_15 &= *eax_15[1];
                            void* edi = *0xe19dbe76 * 0x2180fd6a;
                            eax_15 = *0x90b18672;
                            *ecx_9 &= 0x10;
                            *ecx_9 &= 0x54;
                            *0xda017c = es;
                            *ecx_9 &= 0x81;
                            *(eax_15 + 0x46f02180) = 0xe19dbe80;
                            *ecx_9 &= 0x7c;
                            __out_immb_al(0x81, eax_15, eflags);
                            *(eax_15 + 0x46f02180) = 0xe19dbe80;
                            *ecx_9 &= 0x7c;
                            __out_immb_al(0x90, eax_15, eflags);
                            *eax_15[1] = 0x81;
                            *(ecx_9 - 0x640e7ab7);
                            *(ecx_9 - 0x640e7ab7) &= eax_15;
                            __sti(eflags);
                            *eax_15[1] = 0x82;
                            *(edi + 3) = RRCD(*(edi + 3), ecx_9, false);
                            char* ecx_11;
                            int32_t edx_6;
                            edx_6 = 0x972b13ac();
                            ebx = ebx + *ecx_11;
                            *ecx_11 = *((edx_6 - 1) + 0x7e)[1];
                            trap(0xd);
                        }
                    }
                }
            }
        }
        
        *(esp_1 - 4) = eax_4;
        esp_1 -= 4;
        int32_t temp6_1 = *(ecx_2 + 0x50692091);
        *(ecx_2 + 0x50692091) += ecx_2;
        c_1 = true;
        int32_t* eax_17;
        int32_t ecx_18;
        uint8_t edx_10;
        eax_17 = 0xf5e20dda();
        int32_t* ecx_12 = ecx_18 - 1;
        
        if (temp6_1 == -(ecx_2) || ecx_12)
        {
            *arg4;
            
            if (*(ebx + 0x21) >= 0x69)
            {
                eax_17 = __in_oeax_dx(eax_17, eflags);
                label_8b26:
                ecx_12[8] s>>= 0x69;
                *(eax_17 + ecx_12 - 1 + 0x43) |= arg5;
                /* undefined */
            }
            
            int32_t* ecx_15 = *ecx_12 * 0x8543087c - 1;
            *(ecx_15 + 0x21) += *ebx[1];
            *ecx_15;
            *eax_17 <<= 1;
            __int1();
            /* undefined */
        }
        
        if (temp6_1 != -(ecx_2) && ecx_12 == 1)
        {
            if (temp6_1 > -(ecx_2))
                /* undefined */
            
            *ecx_12[1] = *((ecx_12 - 1) * 0x8b43087c)[1] >> 1;
            goto label_8b26;
        }
        
        arg4 -= 1;
        label_8bb9:
        void* eax_2;
        eax_2 = 0xe84d9f3f();
        *ecx = *ecx + 0x20;
        *(eax_2 - 7);
        ecx[0x14] &= *ecx[1];
    }
}

int32_t __convention("regparm") sub_9ad7(int32_t arg1, void* arg2 @ esi)
{
    *(arg2 - 0x7aaefe68) += arg1;
    /* undefined */
}

int32_t __convention("fastcall") sub_9ae4(int16_t* arg1, int32_t arg2 @ esi)
{
    void* var_75aefe68;
    void* var_75aefe68_1 = var_75aefe68 + arg1;
    char eax;
    int32_t edx;
    edx = HIGHD(&__return_addr);
    eax = LOWD(&__return_addr);
    void* ebx;
    *(ebx + 0x105ea85) += arg2;
    int16_t es;
    *arg1 = es;
    *(arg1 - 0x7b) += edx;
    /* undefined */
}

int32_t __convention("regparm") sub_9b47(int32_t arg1, int32_t arg2, int32_t arg3)
{
    bool z;
    
    if (z || arg3 != 1)
        /* undefined */
    
    /* undefined */
}

int32_t __convention("regparm") sub_9b84(void* arg1, int32_t arg2, char* arg3)
{
    *arg3 = arg1;
    int32_t temp0 = *(arg3 - 0x73);
    *(arg3 - 0x73) += arg2;
    
    if (temp0 != -(arg2) && arg3 == 1)
        /* undefined */
    
    *(arg1 + 0x42864288);
    /* undefined */
}

int32_t __convention("regparm") sub_9bc9(char* arg1, int32_t, int32_t arg3)
{
    bool z;
    
    if (!z && arg3 == 1)
        /* undefined */
    
    *(arg3 - 1) = arg1;
    bool c;
    *(arg3 - 0x61) = RRCB(*(arg3 - 0x61), 0xf1, c);
    *arg1 = ROLB(*arg1, 0x85);
    /* undefined */
}

int32_t __convention("regparm") sub_9c41(char* arg1, int32_t arg2, char* arg3, void* arg4 @ edi)
{
    int16_t es;
    *(arg4 - 0x5f) = es;
    arg3 ^= 0xc4;
    int16_t ebx;
    arg1[0xe67ebe80] = *ebx[1];
    arg1 += 1;
    *arg3 = &arg1[*arg3];
    *arg3 = arg1;
    arg3[0xffffffa0] = RRCB(arg3[0xffffffa0], 0xf1, false);
    *arg1 += arg1;
    arg1 += 1;
    arg1 += *arg3;
    *arg3 = arg1;
    *(arg3 - 0x10) += arg2;
    *(arg4 - 0x5e) = es;
    arg3 ^= 0xab;
    arg1[0xe67ebe80] = *ebx[1];
    arg1 += 1;
    *arg3 = &arg1[*arg3];
    *arg3 = arg1;
    arg3[0xffffffc0] = RRCB(arg3[0xffffffc0], 0xf1, false);
    *arg1 += arg1;
    arg1 += 1;
    arg1 += *arg3;
    *arg3 = arg1;
    *(arg3 - 0x10) += arg2;
    *(arg4 - 0x5d) = es;
    arg3 ^= 0x92;
    arg1[0xe67ebe80] = *ebx[1];
    arg1 += 1;
    *arg3 = &arg1[*arg3];
    *arg3 = arg1;
    arg3[0xffffffa0] = RRCB(arg3[0xffffffa0], 0xf5, false);
    arg1[0xffffff84] += arg1;
    /* undefined */
}

int32_t __convention("regparm") sub_9dc6(int32_t arg1, void* arg2, char* arg3, void* arg4 @ esi, void* arg5 @ edi)
{
    arg3[0xffffff80] &= *arg1[1];
    __int1();
    int32_t eflags;
    char temp0_1;
    char temp1_1;
    temp0_1 = __aam_immb(0xfd, (arg1 & &__return_addr));
    void* eax;
    eax = temp0_1;
    *eax[1] = temp1_1;
    *(eax - 0x2e5fd67f) = *(eax - 0x2e5fd67f) - *arg2[1];
    *arg3 -= 0xad;
    void* const ebx;
    *(ebx - 0x7f2f46d7) = ROLD(*(ebx - 0x7f2f46d7), 1);
    *(eax - 0x7f96df6f) &= eax;
    /* undefined */
}

int32_t __convention("regparm") sub_9dec(char* arg1, int32_t, char* arg3)
{
    *arg1 = ROLB(*arg1, 0x80);
    arg1 &= arg3[0x8e49ef23];
    __int1();
    /* unimplemented  {enter 0xabfc, 0xe1} */
    *arg3 &= 0x80;
    arg1[0xffffff80] &= *arg1[1];
    /* undefined */
}

int32_t __convention("regparm") sub_9e13(void* arg1)
{
    __int1();
    *(arg1 - 0x7f96df6f) &= arg1;
    /* undefined */
}

int32_t __convention("regparm") sub_9e35(void* arg1, int16_t arg2, int32_t arg3, void* arg4 @ ebp, char* arg5 @ esi)
{
    bool z;
    
    if (!z && arg3 == 1)
    {
        *(arg1 - 0x7f96df6f) &= arg1;
        /* undefined */
    }
    
    *(arg4 - 0x7f07190f) ^= arg3 - 1;
    void* ebx;
    void* eax = arg1 & *(ebx - 0x7cde7ee0);
    __int1();
    bool c = /* bool c = unimplemented  {imul edi, esi, 0x21806120} */;
    
    if (eax && arg3 != 2)
    {
        arg2 = arg2;
        arg2 -= 0xc0;
        *(eax - 0x26dc7ede) += eax;
        /* undefined */
    }
    
    int32_t eflags;
    char temp0;
    char temp1;
    temp0 = __aam_immb(0xfd, eax);
    eax = temp0;
    *eax[1] = temp1;
    *(eax - 0x2e5fd67f) = *(eax - 0x2e5fd67f) - *arg2[1];
    *arg5 -= 0xad;
    *(ebx - 0x7f2f46d7) = ROLD(*(ebx - 0x7f2f46d7), 1);
    *(eax - 0x7f96df6f) &= eax;
    /* undefined */
}

int32_t __convention("fastcall") sub_9e66(char* arg1, void* arg2, void* arg3 @ ebp, char* arg4 @ esi, char* arg5 @ edi, long double arg6 @ st0, long double arg7 @ st1)
{
    void* eax;
    eax = *0x34f18047;
    char temp1 = *arg1;
    *arg1 &= 0xe0;
    
    if (!(temp1 & 0xe0) || arg1 != 1)
    {
        *(eax - 0x26dc7ede) += eax;
        /* undefined */
    }
    
    void* ecx_1 = arg1 - 2;
    __int1();
    *arg5 = *arg4;
    void* edi = &arg5[1];
    void* esi = &arg4[1];
    char temp2 = *(ecx_1 - 0x7c);
    *(ecx_1 - 0x7c) = RORB(*(ecx_1 - 0x7c), 1);
    bool c = /* bool c = unimplemented  {ror byte [ecx-0x7c], 0x1} */;
    bool p = /* bool p = unimplemented  {ror byte [ecx-0x7c], 0x1} */;
    bool a = /* bool a = unimplemented  {ror byte [ecx-0x7c], 0x1} */;
    bool o = /* bool o = unimplemented  {ror byte [ecx-0x7c], 0x1} */;
    __int1();
    bool d;
    *(eax - 4) = (o ? 1 : 0) << 0xb | (d ? 1 : 0) << 0xa | (RORB(temp2, 1) < 0 ? 1 : 0) << 7
        | (!RORB(temp2, 1) ? 1 : 0) << 6 | (a ? 1 : 0) << 4 | (p ? 1 : 0) << 2 | (c ? 1 : 0);
    void* const* eax_1;
    eax_1 = &__return_addr * 2;
    bool c_1 = &__return_addr * 2 < &__return_addr;
    void* eax_2 = eax_1 + 0x6beb739;
    bool c_2 = /* bool c_2 = unimplemented  {sbb eax, 0xf94148c7} */;
    bool p_1 = /* bool p_1 = unimplemented  {sbb eax, 0xf94148c7} */;
    bool a_1 = /* bool a_1 = unimplemented  {sbb eax, 0xf94148c7} */;
    bool o_1 = /* bool o_1 = unimplemented  {sbb eax, 0xf94148c7} */;
    *(eax - 8) = (o_1 ? 1 : 0) << 0xb | (d ? 1 : 0) << 0xa | (eax_1 + 0x6beb739 < 0 ? 1 : 0) << 7
        | (!(eax_1 + 0x6beb739) ? 1 : 0) << 6 | (a_1 ? 1 : 0) << 4 | (p_1 ? 1 : 0) << 2
        | (c_2 ? 1 : 0);
    void* const ebx;
    char temp6 = *(ebx + 0x4848c921);
    *(ebx + 0x4848c921) += eax_2;
    bool p_2 = /* bool p_2 = unimplemented  {add byte [ebx+0x4848c921], al} */;
    bool a_2 = /* bool a_2 = unimplemented  {add byte [ebx+0x4848c921], al} */;
    bool z_3 = temp6 == -(eax_2);
    bool o_2 = temp6 + eax_2;
    
    if (!o_2)
    {
        *(eax - 0xc) = (o_2 ? 1 : 0) << 0xb | (d ? 1 : 0) << 0xa | (temp6 + eax_2 < 0 ? 1 : 0) << 7
            | (z_3 ? 1 : 0) << 6 | (a_2 ? 1 : 0) << 4 | (p_2 ? 1 : 0) << 2
            | (temp6 + eax_2 < temp6 ? 1 : 0);
        void* esp_5 = eax - 0xc;
        char* ecx_2 = ecx_1 - 1;
        
        if (!z_3 && !ecx_2)
        {
            *(eax_2 - 0x7f96df6f) &= eax_2;
            /* undefined */
        }
        
        char temp7 = eax_2;
        char temp8 = eax_2;
        eax_2 *= 2;
        *(eax_2 + 0x6beb7fe);
        bool c_11 = false;
        char* eax_3;
        eax_3 = *0x6af67f47;
        
        while (true)
        {
            char temp10_1 = eax_3[0x848fe21];
            eax_3[0x848fe21] += 1;
            
            if (temp10_1 + 1)
                break;
            
            *(ecx_2 - 0x3f) ^= 0xf0710171;
            esi += 1;
            *ecx_2 -= 0x48;
            *eax_3[1] = 0x84;
            eax_3 = &eax_3[0x80790049];
            edi = edi + 1 - ebx;
            *(ecx_2 * 3) = ROLD(*(ecx_2 * 3), 1);
            *(esp_5 - 4) = eax_3;
            esp_5 -= 4;
            *eax_3;
            *0xf9414802 = RRCB(*0xf9414802, 0x84, false);
            char temp12_1 = eax_3[0x6af67f47];
            eax_3[0x6af67f47] += *eax_3[1];
            c_11 = temp12_1 + *eax_3[1] < temp12_1;
        }
        
        int32_t eflags;
        __cli(eflags);
        
        if (c_11 ^ 1)
        {
            ecx_2 &= eax_3;
            *ecx_2 |= *arg2[1];
            /* undefined */
        }
        
        while (true)
        {
            *(esp_5 - 4) = ecx_2;
            char temp13_1 = ecx_2;
            char temp14_1 = ecx_2;
            ecx_2 = temp13_1 + temp14_1;
            bool c_7 = /* bool c_7 = unimplemented  {sbb eax, 0xf9424b8b} */;
            int32_t eax_12 = eax_3 - 1 + 0x6bdb475;
            char temp16_1 = *(arg3 + 0x514b8a20);
            *(arg3 + 0x514b8a20) = temp16_1 + eax_12;
            bool o_3 = /* bool o_3 = unimplemented  {adc byte [ebp+0x514b8a20], al} */;
            
            if (!o_3 || !(temp16_1 + eax_12) || ecx_2 != 1)
            {
                *(ebx - 0x7dbce5b6) &= eax_12;
                *(eax_12 + arg3 + 0x2180dc80) = ROLB(*(eax_12 + arg3 + 0x2180dc80), 1);
                /* undefined */
            }
            
            *(esp_5 - 8) = ecx_2 - 1;
            ecx_2 = (ecx_2 - 1) + (ecx_2 - 1);
            bool c_9 = /* bool c_9 = unimplemented  {sbb eax, 0xf9424b86} */;
            *(esi + 0x514b8520) = *(esi + 0x514b8520) + (eax_12 - 1);
            bool o_4 = /* bool o_4 = unimplemented  {adc byte [esi+0x514b8520], al} */;
            
            if (o_4)
                break;
            
            eax_3 = (eax_12 - 1) & esi;
            
            while (true)
            {
                esi += 1;
                *ecx_2 -= 0x80;
                char temp0_1 = *(edi - 0x74);
                *(edi - 0x74) = (&eax_3[0xb4f04182]);
                void* eax_4;
                eax_4 = temp0_1;
                edi += 2;
                *(ebx + 0x104ea84) -= esi;
                void* const eax_5;
                eax_5 = 0x80 + *ecx_2;
                char temp0_2 = eax_5;
                eax_5 = *arg2[1];
                *arg2[1] = temp0_2;
                int16_t es;
                *ecx_2 = es;
                *(ecx_2 - 0x10) += arg2;
                *ecx_2 -= 0xffffff8d;
                *(ecx_2 + eax_4 - 0x1e6a2f5f) = ROLD(*(ecx_2 + eax_4 - 0x1e6a2f5f), 1);
                void* const temp0_3 = ebx;
                ebx = eax_5;
                *0x2982017c = ecx_2;
                esp_5 = 0x2982017c;
                char temp21_1 = ecx_2;
                char temp22_1 = ecx_2;
                ecx_2 = temp21_1 + temp22_1;
                void* eax_8 = temp0_3 - 1 + 0x6bdb46f;
                bool c_5 = /* bool c_5 = unimplemented  {sbb eax, 0xf9424b91} */;
                char temp24_1 = *(eax_8 + 0x71514b90) + eax_8;
                *(eax_8 + 0x71514b90) = temp24_1;
                arg3 = eax_8;
                eax_3 = eax_4;
                ecx_2 -= 1;
                
                if (temp24_1 && !ecx_2)
                    break;
                
                eax_3 += 1;
                eax_3 += *ecx_2;
                *ecx_2 = eax_3;
                *(ecx_2 - 0x10) += arg2;
                *(arg2 + 0x1a);
                *(arg2 + 0x1a) |= 0x43;
                eax_3 = eax_3 - 0x7c;
                eax_3[0xf02180dc] -= eax_3;
            }
        }
        
        *(ebx - 0x6f) |= 0x71;
        /* undefined */
    }
    
    *(eax_2 + 0xf5cf71) &= ecx_1;
    *(eax - 0xc) = eax_2;
    *(eax - 0x10) = ecx_1;
    *(eax - 0x14) = arg2;
    *(eax - 0x18) = ebx;
    *(eax - 0x1c) = eax - 0x18;
    *(eax - 0x20) = arg3;
    *(eax - 0x24) = esi;
    *(eax - 0x28) = edi;
    /* unimplemented  {enter 0x8449, 0xf1} */
    
    while (true)
    {
        *(eax_2 - 0x38) += *eax_2[1];
        ecx_1 -= 1;
    }
}

void __convention("regparm") sub_9ead(void* arg1, int16_t arg2, int32_t arg3, int32_t arg4 @ edi)
{
    bool cond:0_1;
    
    do
    {
        *(arg1 - 0x3d) &= 0x49;
        cond:0_1 = !(arg3 & *arg2[1]);
        arg3 -= 1;
    } while (cond:0_1 || arg3);
    *(arg4 - 0x57);
}

int32_t __convention("regparm") sub_9ec1(void* arg1, void* arg2, int32_t arg3, void* arg4 @ ebp, char* arg5 @ esi, void* arg6 @ edi, long double arg7 @ st0, long double arg8 @ st1)
{
    *(arg1 - 0x42) += arg2;
    void* const ebx;
    arg1 = *(ebx + arg1);
    *(arg6 - 0x57);
    int32_t eflags;
    int32_t eflags_1 = __cli(eflags);
    *arg2[1] = 0x49;
    void* ecx;
    ecx = (arg3 - 1) + *ebx[1];
    *0x6f67c49;
    int32_t temp2 = *(arg1 - 0x5f2e2dd7);
    *(arg1 - 0x5f2e2dd7) += arg1;
    
    if (temp2 + arg1 < 0)
        /* undefined */
    
    char* edi_1 = 0x6f67c4a - ecx;
    *(arg2 - 0x5306efb7) s>>= 1;
    int32_t temp3 = *(arg1 - 0x50a3050);
    *(arg1 - 0x50a3050) += arg4;
    
    if (temp3 + arg4 < temp3)
    {
        *(ecx + 0x16f18e21) &= arg1;
        *(ecx + 0x20fa3ef1) -= 1;
        arg1 = 0x81;
        *(ecx - 0x51d67d2f) -= &__return_addr;
        *(ebx - 0x7f2f44d7) = ROLD(*(ebx - 0x7f2f44d7), 1);
        *(arg1 - 0x7f96df6f) &= arg1;
        /* undefined */
    }
    
    if (temp3 == -(arg4) || ecx != 1)
    {
        *(arg1 - 0x26dc7ede) += arg1;
        /* undefined */
    }
    
    void* ecx_4 = ecx - 2;
    __int1();
    *edi_1 = *arg5;
    void* edi_2 = &edi_1[1];
    void* esi = &arg5[1];
    char temp4 = *(ecx_4 - 0x7c);
    *(ecx_4 - 0x7c) = RORB(*(ecx_4 - 0x7c), 1);
    bool c_10 = /* bool c_10 = unimplemented  {ror byte [ecx-0x7c], 0x1} */;
    bool p = /* bool p = unimplemented  {ror byte [ecx-0x7c], 0x1} */;
    bool a = /* bool a = unimplemented  {ror byte [ecx-0x7c], 0x1} */;
    bool o_3 = /* bool o_3 = unimplemented  {ror byte [ecx-0x7c], 0x1} */;
    __int1();
    bool d;
    *(arg1 - 4) = (o_3 ? 1 : 0) << 0xb | (d ? 1 : 0) << 0xa | (RORB(temp4, 1) < 0 ? 1 : 0) << 7
        | (!RORB(temp4, 1) ? 1 : 0) << 6 | (a ? 1 : 0) << 4 | (p ? 1 : 0) << 2 | (c_10 ? 1 : 0);
    void* const* eax_15;
    eax_15 = &__return_addr * 2;
    bool c_11 = &__return_addr * 2 < &__return_addr;
    void* eax_14 = eax_15 + 0x6beb739;
    bool c_12 = /* bool c_12 = unimplemented  {sbb eax, 0xf94148c7} */;
    bool p_1 = /* bool p_1 = unimplemented  {sbb eax, 0xf94148c7} */;
    bool a_1 = /* bool a_1 = unimplemented  {sbb eax, 0xf94148c7} */;
    bool o_4 = /* bool o_4 = unimplemented  {sbb eax, 0xf94148c7} */;
    *(arg1 - 8) = (o_4 ? 1 : 0) << 0xb | (d ? 1 : 0) << 0xa | (eax_15 + 0x6beb739 < 0 ? 1 : 0) << 7
        | (!(eax_15 + 0x6beb739) ? 1 : 0) << 6 | (a_1 ? 1 : 0) << 4 | (p_1 ? 1 : 0) << 2
        | (c_12 ? 1 : 0);
    char temp8 = *(ebx + 0x4848c921);
    *(ebx + 0x4848c921) += eax_14;
    bool p_2 = /* bool p_2 = unimplemented  {add byte [ebx+0x4848c921], al} */;
    bool a_2 = /* bool a_2 = unimplemented  {add byte [ebx+0x4848c921], al} */;
    bool z_4 = temp8 == -(eax_14);
    bool o_5 = temp8 + eax_14;
    
    if (!o_5)
    {
        *(arg1 - 0xc) = (o_5 ? 1 : 0) << 0xb | (d ? 1 : 0) << 0xa
            | (temp8 + eax_14 < 0 ? 1 : 0) << 7 | (z_4 ? 1 : 0) << 6 | (a_2 ? 1 : 0) << 4
            | (p_2 ? 1 : 0) << 2 | (temp8 + eax_14 < temp8 ? 1 : 0);
        void* esp_1 = arg1 - 0xc;
        char* ecx_1 = ecx_4 - 1;
        
        if (!z_4 && !ecx_1)
        {
            *(eax_14 - 0x7f96df6f) &= eax_14;
            /* undefined */
        }
        
        char temp9 = eax_14;
        char temp10 = eax_14;
        eax_14 *= 2;
        *(eax_14 + 0x6beb7fe);
        bool c_8 = false;
        void* eax;
        eax = *0x6af67f47;
        
        while (true)
        {
            char temp12_1 = *(eax + 0x848fe21);
            *(eax + 0x848fe21) += 1;
            
            if (temp12_1 + 1)
                break;
            
            *(ecx_1 - 0x3f) ^= 0xf0710171;
            esi += 1;
            *ecx_1 -= 0x48;
            *eax[1] = 0x84;
            eax -= 0x7f86ffb7;
            edi_2 = edi_2 + 1 - ebx;
            *(ecx_1 * 3) = ROLD(*(ecx_1 * 3), 1);
            *(esp_1 - 4) = eax;
            esp_1 -= 4;
            *eax;
            *0xf9414802 = RRCB(*0xf9414802, 0x84, false);
            char temp14_1 = *(eax + 0x6af67f47);
            *(eax + 0x6af67f47) += *eax[1];
            c_8 = temp14_1 + *eax[1] < temp14_1;
        }
        
        __cli(eflags_1);
        
        if (c_8 ^ 1)
        {
            ecx_1 &= eax;
            *ecx_1 |= 0x49;
            /* undefined */
        }
        
        while (true)
        {
            *(esp_1 - 4) = ecx_1;
            char temp15_1 = ecx_1;
            char temp16_1 = ecx_1;
            ecx_1 = temp15_1 + temp16_1;
            bool c_4 = /* bool c_4 = unimplemented  {sbb eax, 0xf9424b8b} */;
            int32_t eax_9 = eax - 1 + 0x6bdb475;
            char temp18_1 = *(arg4 + 0x514b8a20);
            *(arg4 + 0x514b8a20) = temp18_1 + eax_9;
            bool o = /* bool o = unimplemented  {adc byte [ebp+0x514b8a20], al} */;
            
            if (!o || !(temp18_1 + eax_9) || ecx_1 != 1)
            {
                *(ebx - 0x7dbce5b6) &= eax_9;
                *(eax_9 + arg4 + 0x2180dc80) = ROLB(*(eax_9 + arg4 + 0x2180dc80), 1);
                /* undefined */
            }
            
            *(esp_1 - 8) = ecx_1 - 1;
            ecx_1 = (ecx_1 - 1) + (ecx_1 - 1);
            bool c_6 = /* bool c_6 = unimplemented  {sbb eax, 0xf9424b86} */;
            *(esi + 0x514b8520) = *(esi + 0x514b8520) + (eax_9 - 1);
            bool o_1 = /* bool o_1 = unimplemented  {adc byte [esi+0x514b8520], al} */;
            
            if (o_1)
                break;
            
            eax = (eax_9 - 1) & esi;
            
            while (true)
            {
                esi += 1;
                *ecx_1 -= 0x80;
                char temp0_1 = *(edi_2 - 0x74);
                *(edi_2 - 0x74) = (eax - 0x4b0fbe7e);
                void* eax_1;
                eax_1 = temp0_1;
                edi_2 += 2;
                *(ebx + 0x104ea84) -= esi;
                void* const eax_2;
                eax_2 = 0x80 + *ecx_1;
                char temp0_2 = eax_2;
                eax_2 = *arg2[1];
                *arg2[1] = temp0_2;
                int16_t es;
                *ecx_1 = es;
                *(ecx_1 - 0x10) += arg2;
                *ecx_1 -= 0xffffff8d;
                *(ecx_1 + eax_1 - 0x1e6a2f5f) = ROLD(*(ecx_1 + eax_1 - 0x1e6a2f5f), 1);
                void* const temp0_3 = ebx;
                ebx = eax_2;
                *0x2982017c = ecx_1;
                esp_1 = 0x2982017c;
                char temp23_1 = ecx_1;
                char temp24_1 = ecx_1;
                ecx_1 = temp23_1 + temp24_1;
                void* eax_5 = temp0_3 - 1 + 0x6bdb46f;
                bool c_2 = /* bool c_2 = unimplemented  {sbb eax, 0xf9424b91} */;
                char temp26_1 = *(eax_5 + 0x71514b90) + eax_5;
                *(eax_5 + 0x71514b90) = temp26_1;
                arg4 = eax_5;
                eax = eax_1;
                ecx_1 -= 1;
                
                if (temp26_1 && !ecx_1)
                    break;
                
                eax += 1;
                eax += *ecx_1;
                *ecx_1 = eax;
                *(ecx_1 - 0x10) += arg2;
                *(arg2 + 0x1a);
                *(arg2 + 0x1a) |= 0x43;
                eax = eax - 0x7c;
                *(eax - 0xfde7f24) -= eax;
            }
        }
        
        *(ebx - 0x6f) |= 0x71;
        /* undefined */
    }
    
    *(eax_14 + 0xf5cf71) &= ecx_4;
    *(arg1 - 0xc) = eax_14;
    *(arg1 - 0x10) = ecx_4;
    *(arg1 - 0x14) = arg2;
    *(arg1 - 0x18) = ebx;
    *(arg1 - 0x1c) = arg1 - 0x18;
    *(arg1 - 0x20) = arg4;
    *(arg1 - 0x24) = esi;
    *(arg1 - 0x28) = edi_2;
    /* unimplemented  {enter 0x8449, 0xf1} */
    
    while (true)
    {
        *(eax_14 - 0x38) += *eax_14[1];
        ecx_4 -= 1;
    }
}

int32_t __convention("fastcall") sub_9f23(int32_t arg1, char* arg2, int32_t arg3 @ ebp, char* arg4 @ esi, int32_t arg5 @ edi)
{
    __int1();
    void* eax;
    eax = *arg4;
    
    if (arg3 != arg5 && arg1 == 1)
    {
        *(eax - 0x7f96df6f) &= eax;
        /* undefined */
    }
    
    *arg2 = -(*arg2);
    int32_t eflags;
    __cli(eflags);
    /* undefined */
}

int32_t __convention("regparm") sub_9f5f(void* arg1, int32_t, char* arg3, int32_t arg4 @ ebp, int32_t arg5 @ edi)
{
    __int1();
    *arg3 &= 0x80;
    *(arg1 - 0x80) &= *arg1[1];
    /* undefined */
}

int32_t __convention("regparm") sub_9f9e(char* arg1, void* arg2, int32_t arg3 @ esi, int32_t arg4 @ edi)
{
    char* ecx = arg1;
    __int1();
    __int1();
    *0x8000db06 &= 0x8000dabc;
    *ecx &= 0x3d;
    char* fsbase;
    *(fsbase + ecx) &= 0x69;
    void* ebx;
    *ebx[1] = 0xe4;
    *(ebx + arg4) = 0;
    *(ebx + arg4);
    *(ebx + arg4) &= 0x80;
    *(ecx - 0x7fcb3fbf) = *(ecx - 0x7fcb3fbf) - 0x7fff1b44;
    void* eax;
    eax = (0x8000e4bc & &__return_addr) ^ 0x80;
    *eax &= eax;
    
    while (true)
    {
        eax ^= 0x80;
        *(eax * 2) &= eax;
        *ecx &= 0xb8;
        *eax[1] = 0x84;
        *(ecx - 0x80) = /* *(ecx - 0x80) = unimplemented  {fisttp word [ecx-0x80], st0} */;
        /* unimplemented  {fisttp word [ecx-0x80], st0} */
        int16_t top = top + 1;
        
        if (arg4 + 1 >= 0)
            break;
        
        arg4 = arg4 + 1 - arg3;
        *(arg2 - 0x77b722df);
        *(arg2 - 0x77b722df) = ROLB(*(arg2 - 0x77b722df), 1);
        bool o_1 = /* bool o_1 = unimplemented  {rol byte [edx-0x77b722df], 0x1} */;
        
        if (o_1)
        {
            void* var_4 = eax;
            int16_t es;
            *eax = es;
            *0xf94148db = RRCB(*0xf94148db, 0x8c, true);
            ecx[0xd0fac0f0] += (ecx - 1);
            arg2 = 0x81;
            *(arg2 - 0x7c2e0bd7) = ROLD(*(arg2 - 0x7c2e0bd7), 1);
            *(ebx - 0x7fde7e30) -= &var_4;
            *(eax - 0x80) &= *eax[1];
            /* undefined */
        }
        
        char temp4_1 = *(eax * 5) << 0x21;
        *(eax * 5) = temp4_1;
        ecx -= 1;
        
        if (temp4_1 && ecx)
        {
            *ecx -= 0xf4;
            *(ebx - 0x7e2f5cd7) = ROLD(*(ebx - 0x7e2f5cd7), 1);
            *(eax - 0x7f96df6f) &= eax;
            /* undefined */
        }
        
        *ecx = 0;
    }
    
    /* undefined */
}

int32_t __convention("regparm") sub_a0aa(void* arg1, char* arg2, int32_t* arg3, int32_t arg4 @ ebp, int32_t arg5 @ esi)
{
    arg2 -= 0xc0;
    *(arg2 + 0x79) += &__return_addr;
    int32_t ebx;
    *arg3 += ebx;
    *arg2 &= 0x81;
    void* ebp = arg4 & *(ebx + 0x66f18e49);
    int32_t eflags;
    int32_t eflags_1 = __cli(eflags);
    void* var_4 = arg1;
    int32_t* var_8 = arg3;
    char* var_c = arg2;
    int32_t var_10 = ebx;
    int32_t* var_14 = &var_10;
    void* var_18 = ebp;
    int32_t var_1c = arg5;
    
    if (ebp >= 0)
    {
        *(arg5 - 0xe76de7f);
        __cli(eflags_1);
        *(arg5 - 0x1e0d4180);
        *(arg1 - 0x7f96df6f) &= arg1;
        /* undefined */
    }
    
    *(ebp - 0x79d67b2f) -= arg3;
    *(ebp - 0x792e7ad7) = ROLD(*(ebp - 0x792e7ad7), 1);
    *(arg1 + (arg2 << 3) - 0x1e4d1e79) -= arg3;
    *(arg5 - 0xe76de7d);
    int32_t eflags_2 = __cli(eflags_1);
    *(arg5 - 0xe76de7f);
    __cli(eflags_2);
    *(arg5 - 0x1e5b4180);
    *(arg1 - 0x7f96df6f) &= arg1;
    /* undefined */
}

int32_t __convention("regparm") sub_a0fa(void* arg1, char* arg2, char* arg3, void* arg4 @ ebp, int32_t arg5 @ esi, int32_t arg6 @ edi)
{
    char temp1 = *arg3;
    *arg3 = ROLB(*arg3, 0x62);
    bool c_1 = /* bool c_1 = unimplemented  {rol byte [ecx], 0x62} */;
    
    if (ROLB(temp1, 0x62) >= 0)
    {
        *arg2 &= 0x81;
        void* edx = arg2 & *(arg6 + 0x3ff18e49);
        int32_t eflags;
        int32_t eflags_1 = __cli(eflags);
        void* var_4_1 = arg1;
        char* var_8_1 = arg3;
        void* var_c_1 = edx;
        void* ebx;
        void* var_10 = ebx;
        int32_t* var_14_1 = &var_10;
        void* var_18_1 = arg4;
        int32_t var_1c_1 = arg5;
        int32_t var_20 = arg6;
        int32_t* esp_1 = &var_20;
        
        if (edx >= 0)
        {
            *arg3 &= 0xfa53f189;
            label_a096:
            *(arg5 - 0x1e334180);
            *(arg1 - 0x7f96df6f) &= arg1;
            /* undefined */
        }
        
        *(ebx - 0x7bd67b2f) -= arg3;
        *(arg4 - 0x792e7cd7) = ROLD(*(arg4 - 0x792e7cd7), 1);
        *(edx - 0x7f1e7a30) -= arg3;
        int32_t edi_1 = arg6 | edx;
        *0xe3124304;
        int32_t eflags_2 = __cli(eflags_1);
        char temp2_1 = *0xb009e003;
        
        if (temp2_1 == 0x8d || arg3 != 1)
        {
            *0x76b2a754 -= arg1;
            int32_t temp3_1 = ROLD(*0x7959adac, 1);
            *0x7959adac = temp3_1;
            
            if (temp3_1 && arg3 == 2)
            {
                if (temp3_1 && arg3 == 3)
                {
                    if (!temp3_1 || arg3 != 4)
                    {
                        *(arg1 - 0x3efeff16);
                        /* undefined */
                    }
                    
                    edx ^= *ebx[1];
                    *0xe3124304;
                    __cli(eflags_2);
                    *0xd32de003;
                    *(arg1 - 0x7f96df6f) &= arg1;
                    /* undefined */
                }
                
                edx -= 0xc0;
                *(edx + 0x79) += &var_20;
                *(arg3 - 3) += ebx;
                *edx &= 0x81;
                int32_t edi_2 = edi_1 & *0x7e7aafcc;
                void* var_24_1 = arg1;
                void* var_28_1 = arg3 - 3;
                void* var_2c_1 = edx;
                void* var_30 = ebx;
                void** var_34_1 = &var_30;
                void* var_38_1 = arg4;
                int32_t var_3c_1 = 0xf1892183;
                int32_t var_40 = edi_2;
                esp_1 = &var_40;
                
                if (edi_2 >= 0)
                {
                    edx s>>= 0xd0;
                    edx = 0x81;
                    *(edx - 0x7c2e0bd7) = ROLD(*(edx - 0x7c2e0bd7), 1);
                    *(ebx - 0x7fde7e30) -= &var_40;
                    *(arg1 - 0x80) &= *arg1[1];
                    /* undefined */
                }
                
                *(ebx - 0x7bd67b2f) -= arg3 - 3;
                *(arg4 - 0x792e7cd7) = ROLD(*(arg4 - 0x792e7cd7), 1);
                *(edx - 0x7f1e7a30) -= arg3 - 3;
            }
            else if (!temp3_1 || arg3 != 3)
            {
                arg3[0x2091801e] = ROLB(arg3[0x2091801e], 1);
                *(arg1 - 0x2cfeff16);
                *(edx + 0x79) += &var_20;
                *(arg3 - 3) += ebx;
                *edx &= 0x81;
                /* undefined */
            }
            
            arg5 = 0xf1892183;
            arg1 = *esp_1;
            int32_t eflags_4 = __cli(eflags_2);
            *0xe3124304;
            __cli(eflags_4);
            goto label_a096;
        }
        
        arg3 = (arg3 - 2) + *ebx[1];
        edx = 1;
        /* unimplemented  {enter 0x81b0, 0x20} */
        arg3 = arg3[0xffffff8e];
        __int1();
        arg1 |= 0xfa;
        char* i;
        
        do
        {
            *arg3 &= 0x88;
            arg1 -= 1;
            arg3[0xffffff88] |= *edx[1];
            i = arg3;
            arg3 -= 1;
        } while (i >= 1);
        __sti(eflags_2);
        *(ebx + edi_1) &= 0x40;
        *arg3 &= 0x3c;
        char* fsbase;
        *(fsbase + arg3) &= 0x68;
        *ebx[1] = 0xe4;
        *0x9868e4dd -= 0x44;
        void* temp5_1 = *0x984b7470 & (edx - 2);
        *0x984b7470 = temp5_1;
        
        if (temp5_1 < 0)
        {
            int32_t temp6 = *(arg3 + 0x50498ed1);
            *(arg3 + 0x50498ed1) -= ebx;
            
            if (!(temp6 + -(ebx)))
            {
                *arg3 -= 0x2982d184;
                *(edx - 2) -= 0xffffff8e;
                *(edx - 0x76df7e21) = RORB(*(edx - 0x76df7e21), 1);
                /* undefined */
            }
            
            *(edx - 0x7c2e78d9) = ROLD(*(edx - 0x7c2e78d9), 1);
            *0x736aab53 -= arg3;
            arg3[0xadf18c49] &= arg3;
            arg3[0x872082e1] -= 1;
            /* undefined */
        }
    }
    else
        *(arg1 - 0x68dc7ede) = *(arg1 - 0x68dc7ede) - arg1;
    
    /* undefined */
}

int32_t __convention("regparm") sub_a107(void* arg1, char* arg2, int32_t* arg3, void* arg4 @ ebp, int32_t arg5 @ esi, int32_t arg6 @ edi)
{
    __int1();
    int32_t eflags;
    int32_t eflags_1;
    char temp0;
    char temp1;
    temp0 = __aas(arg1, *arg1[1], eflags);
    arg1 = temp0;
    *arg1[1] = temp1;
    int32_t eflags_2 = __cli(eflags_1);
    void* var_4 = arg1;
    int32_t* var_8 = arg3;
    char* var_c = arg2;
    void* ebx;
    void* var_10 = ebx;
    int32_t* var_14 = &var_10;
    void* var_18 = arg4;
    int32_t var_1c = arg5;
    int32_t var_20 = arg6;
    int32_t* esp = &var_20;
    bool s;
    
    if (!s)
        *arg3 &= 0xfa53f189;
    else
    {
        *(ebx - 0x7bd67b2f) -= arg3;
        *(arg4 - 0x792e7cd7) = ROLD(*(arg4 - 0x792e7cd7), 1);
        *(arg2 - 0x7f1e7a30) -= arg3;
        int32_t edi = arg6 | arg2;
        *0xe3124304;
        int32_t eflags_3 = __cli(eflags_2);
        char temp1_1 = *0xb009e003;
        
        if (temp1_1 != 0x8d && arg3 == 1)
        {
            int32_t* i_1;
            i_1 = (arg3 - 2) + *ebx[1];
            arg2 = 1;
            /* unimplemented  {enter 0x81b0, 0x20} */
            i_1 = *(i_1 - 0x72);
            __int1();
            arg1 |= 0xfa;
            int32_t* i;
            
            do
            {
                *i_1 &= 0x88;
                arg1 -= 1;
                i_1[-0x1e] |= *arg2[1];
                i = i_1;
                i_1 -= 1;
            } while (i >= 1);
            __sti(eflags_3);
            *(ebx + edi) &= 0x40;
            *i_1 &= 0x3c;
            char* fsbase;
            *(fsbase + i_1) &= 0x68;
            *ebx[1] = 0xe4;
            *0x9868e4dd -= 0x44;
            void* temp4 = *0x984b7470 & (arg2 - 2);
            *0x984b7470 = temp4;
            
            if (temp4 >= 0)
                /* undefined */
            
            int32_t temp5 = *(i_1 + 0x50498ed1);
            *(i_1 + 0x50498ed1) -= ebx;
            
            if (!(temp5 + -(ebx)))
            {
                *i_1 -= 0x2982d184;
                *(arg2 - 2) -= 0xffffff8e;
                arg2[0x892081df] = RORB(arg2[0x892081df], 1);
                /* undefined */
            }
            
            *(arg2 - 0x7c2e78d9) = ROLD(*(arg2 - 0x7c2e78d9), 1);
            *0x736aab53 -= i_1;
            *(i_1 - 0x520e73b7) &= i_1;
            *(i_1 - 0x78df7d1f) -= 1;
            /* undefined */
        }
        
        *0x76b2a754 -= arg1;
        int32_t temp2_1 = ROLD(*0x7959adac, 1);
        *0x7959adac = temp2_1;
        
        if (temp2_1 && arg3 == 2)
        {
            if (temp2_1 && arg3 == 3)
            {
                if (!temp2_1 || arg3 != 4)
                {
                    *(arg1 - 0x3efeff16);
                    /* undefined */
                }
                
                arg2 ^= *ebx[1];
                *0xe3124304;
                __cli(eflags_3);
                *0xd32de003;
                *(arg1 - 0x7f96df6f) &= arg1;
                /* undefined */
            }
            
            arg2 -= 0xc0;
            *(arg2 + 0x79) += &var_20;
            *(arg3 - 3) += ebx;
            *arg2 &= 0x81;
            int32_t edi_1 = edi & *0x7e7aafcc;
            void* var_24_1 = arg1;
            void** var_28_1 = arg3 - 3;
            char* var_2c_1 = arg2;
            void* var_30 = ebx;
            void** var_34_1 = &var_30;
            void* var_38_1 = arg4;
            int32_t var_3c_1 = 0xf1892183;
            int32_t var_40 = edi_1;
            esp = &var_40;
            
            if (edi_1 >= 0)
            {
                arg2 s>>= 0xd0;
                arg2 = 0x81;
                *(arg2 - 0x7c2e0bd7) = ROLD(*(arg2 - 0x7c2e0bd7), 1);
                *(ebx - 0x7fde7e30) -= &var_40;
                *(arg1 - 0x80) &= *arg1[1];
                /* undefined */
            }
            
            *(ebx - 0x7bd67b2f) -= arg3 - 3;
            *(arg4 - 0x792e7cd7) = ROLD(*(arg4 - 0x792e7cd7), 1);
            *(arg2 - 0x7f1e7a30) -= arg3 - 3;
        }
        else if (!temp2_1 || arg3 != 3)
        {
            *(arg3 + 0x2091801e) = ROLB(*(arg3 + 0x2091801e), 1);
            *(arg1 - 0x2cfeff16);
            *(arg2 + 0x79) += &var_20;
            *(arg3 - 3) += ebx;
            *arg2 &= 0x81;
            /* undefined */
        }
        
        arg5 = 0xf1892183;
        arg1 = *esp;
        int32_t eflags_5 = __cli(eflags_3);
        *0xe3124304;
        __cli(eflags_5);
    }
    
    *(arg5 - 0x1e334180);
    *(arg1 - 0x7f96df6f) &= arg1;
    /* undefined */
}

int32_t __convention("fastcall") sub_a1f4(int32_t arg1, void* arg2 @ esi, void* arg3 @ edi)
{
    int32_t ebx;
    bool z;
    
    if (!z && arg1 == 1)
    {
        int32_t eflags;
        int32_t eflags_1;
        char temp0;
        temp0 = __daa(ebx, eflags);
        int32_t eax;
        eax = temp0;
        *(arg3 - 0x50) = ROLD(*(arg3 - 0x50), 0x47);
        __int1();
        trap(0xff);
    }
    
    *(arg1 - 0x79);
    int32_t eax_1;
    int32_t edx;
    edx = HIGHD(ebx);
    eax_1 = LOWD(ebx);
    *(arg2 + 0x70f95049) = RORD(*(arg2 + 0x70f95049), 1);
    *(arg3 - 0x71d67c2f) -= eax_1 + *(arg1 - 0x7d2e7bd9);
    *(arg1 - 0x76df7e21) = RORB(*(arg1 - 0x76df7e21), 1);
    /* undefined */
}

int32_t __convention("regparm") sub_a249(int32_t arg1, int32_t* arg2, char* arg3, void* arg4 @ ebp, uint16_t* arg5 @ esi, char* arg6 @ edi, long double arg7 @ st0)
{
    bool c;
    void* eax = arg1 - 0x2f00b346;
    bool z = !(arg1 - 0x2f00b346);
    bool o_2 = /* bool o_2 = unimplemented  {sbb eax, 0x2f00b346} */;
    int32_t eflags;
    char* esi = __outsb(arg2, *arg5, arg5, eflags);
    *(eax - 0x7ffe7e10);
    __int1();
    void* ebx;
    void* esp;
    
    if (!z && arg1 - 0x2f00b346 < 0 == o_2)
    {
        *(eax + 0x18f18321) &= arg3;
        label_a26a:
        eax = *0xc0b34445;
        
        if (eax + 0x16c225cd)
        {
            void* eax_1;
            eax_1 = 0x47;
            __int1();
            trap(0xff);
        }
        
        *arg3 -= 0x7a;
        *(eax - 0x78552d12) += (eax + 0x16c225cd);
        *(arg6 - 0x5c);
        *(arg6 - 0x5c) = eax + 0x16c225ce;
    }
    else
    {
        arg3 -= 1;
        
        if (z || !arg3)
        {
            *(arg4 - 0x23) = ROLB(*(arg4 - 0x23), 0x80);
            *(eax - 0x7cde77e0);
            esp = &__return_addr & *(eax - 0x7cde77e0);
            __int1();
            *eax[1] = *eax[1] - *ebx[1];
            goto label_a26a;
        }
        
        *(esi - 0x52de8000) += eax;
        arg2 = 0x4787e2f2();
        *arg6 = *esi;
        esi = &esi[1];
    }
    
    void* ecx = arg3 - 1;
    *(ecx + 0x48a23190) |= 0x88;
    void* eax_4 = *0x7ef67549;
    *(eax_4 - 0x7f1e53db) += 1;
    eax_4 &= 0xa6;
    ecx -= 1;
    
    if (!eax_4 || ecx)
    {
        *(ebx - 0x7e7e77b8) &= eax_4;
        *(eax_4 + (ecx << 1) - 0x16c28e78);
        *(eax_4 + (ecx << 1) - 0x16c28e78) &= eax_4;
        *ecx -= 0x7a;
        *(eax_4 - 0x7fec57df) += eax_4;
        arg2[0x1e086000] &= eax_4;
        *eax_4[1] = 0x84;
        *((arg6 | 0xb96300f5) + 2) &= 0xd8;
        *(ecx + 0x77);
        *(ecx - 1) &= 0xd6;
        *(ecx - 0x2b) = *arg2[1];
        *(ecx - 0x7e77b72b) = (eax_4 - 2);
        eax_4 = __salc(eflags);
        
        if (!(*(ecx - 0x77) & ((arg6 | 0xb96300f5) + 2)) || ecx != 3)
        {
            ecx -= 2;
            goto label_a2c3;
        }
        
        void* eax_7 = eax_4 & *(arg4 - 0x7cde7de0);
        __int1();
        *esi - *((arg6 | 0xb96300f5) + 2);
        *(eax_7 - 0x78);
        *(eax_7 - 0x78) = RORB(*(eax_7 - 0x78), (ecx - 3));
        bool o_1 = /* bool o_1 = unimplemented  {ror byte [eax-0x78], cl} */;
        
        if (o_1)
        {
            void* ecx_4;
            ecx_4 = (ecx - 3) - 0x80;
            
            if (ecx_4 && ecx_4 == 1)
            {
                __out_immb_al(0x80, eax_7, eflags);
                /* undefined */
            }
            
            do
                __int1();
             while (ecx_4 >= 0);
            
            *(ecx_4 - 1) &= 0x49ae9180;
            *(ecx_4 - 1);
            void* ebx_2;
            ebx_2 = 0xac;
            *(ecx_4 - 2);
            ebx_2 = 0xff;
            void* eax_8 = eax_7 & *(eax_7 + 0x6bf19021);
            *(ecx_4 - 1) &= 0x49a79180;
            *(ecx_4 + 0x3f);
            void* ebx_3;
            ebx_3 = 0xa5;
            *(ecx_4 + 0x3e);
            ebx_3 = 0xff;
            *0x80898848 = eax_8 & *(eax_8 + 0x5df19021);
            /* undefined */
        }
    }
    else
    {
        int16_t ss;
        *(esp - 4) = ss;
        *(ebx + 0x52);
        *(ebx + 0x52) <<= ecx;
        bool c_1 = /* bool c_1 = unimplemented  {shl byte [ebx+0x52], cl} */;
        int32_t temp7_1 = *(arg4 - 0x65ecbd16);
        *(arg4 - 0x65ecbd16) = temp7_1 + eax_4;
        ebx = ebx - *(arg4 + 0x63);
        *(esp - 8) = ss;
        *(arg2 + 0x5a);
        *(arg2 + 0x5a) <<= ecx;
        bool c_3 = /* bool c_3 = unimplemented  {shl dword [edx+0x5b], cl} */;
        (arg2 - 1)[arg4 * 2] = (arg2 - 1)[arg4 * 2] + esp - 8;
        *(esp - 8);
        *(arg2 - 1) &= 0x419a4133;
        label_a2c3:
        int32_t* eax_5;
        eax_5 = 0xcf;
        __int1();
        *ecx |= 0xf1cfe181;
        *ecx |= 0x91;
        *(ecx + 0x167019a5) |= 0x86;
    }
    
    /* undefined */
}

int32_t __convention("regparm") sub_a3be(int32_t arg1, int32_t, int32_t* arg3)
{
    bool c;
    char temp0 = *(arg3 + 0x798349b2) - 0x7f;
    *(arg3 + 0x798349b2) = temp0;
    int32_t ebx;
    
    if (temp0 >= 0)
        /* jump -> *ebx */
    int32_t eax = arg1 & *(arg1 + 0x79f19021);
    *arg3 &= 0x49ae9180;
    *arg3;
    int32_t ebx_1;
    ebx_1 = 0xac;
    *(arg3 - 1);
    ebx_1 = 0xff;
    int32_t eax_1 = eax & *(eax + 0x6bf19021);
    *arg3 &= 0x49a79180;
    arg3[0x10];
    int32_t ebx_2;
    ebx_2 = 0xa5;
    *(arg3 + 0x3f);
    ebx_2 = 0xff;
    *0x80898848 = eax_1 & *(eax_1 + 0x5df19021);
    /* undefined */
}

void __convention("regparm") sub_a583(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4 @ ebp, int32_t arg5 @ esi, int32_t arg6 @ edi, long double arg7 @ st0, long double arg8 @ st1) __noreturn
{
    int32_t var_4 = arg1;
    int32_t var_8 = arg3;
    int32_t var_c = arg2;
    void* ebx;
    void* var_10 = ebx;
    int32_t* var_14 = &var_10;
    int32_t var_18 = arg4;
    int32_t var_1c = arg5;
    int32_t var_20 = arg6;
    *(ebx - 0x70) |= arg1;
    *(arg3 - 0x7f);
    *arg5 - *arg6;
    int32_t ecx;
    *ecx[1] = ROLB(*(arg3 - 1)[1], 1);
    *(ecx - 0x7676b73f) |= 0x88;
    *ebx[1] &= *arg2[1];
    trap(0xd);
}

int32_t __stdcall sub_a59d(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6) __pure
{
    return arg6;
}

int32_t __convention("regparm") sub_a602(int32_t arg1, int32_t arg2, char* arg3, int32_t arg4 @ ebp, void* arg5 @ edi, int80_t arg6 @ st0)
{
    int16_t ss;
    uint32_t var_4 = ss;
    void* ebx;
    bool o;
    
    if (!o)
    {
        *(ebx - 0x70) |= arg1;
        *(arg3 * 3 + 0x29817980) = arg6;
        *(arg3 - 0x83fba78) = arg3;
        *ebx = ebx;
        *(arg3 + 0x48b34588) = arg3;
        arg3[0x48b64bb6] = 0x48;
        goto label_a5e2;
    }
    
    arg3[0x7116f424] = (arg1 - 1);
    void* eax;
    eax = 0x48;
    arg3[0x6b0049ab] = 0x48;
    *arg3 -= 0xbc;
    *(eax - 0x54df7fdf);
    *(eax - 0x54df7fdf) = ROLD(*(eax - 0x54df7fdf), 1);
    bool c_1 = /* bool c_1 = unimplemented  {rol dword [eax-0x54df7fdf], sub_0+1} */;
    *(ebx - 0x59766eb6) = arg4;
    *arg3[1] = *arg3[1] + *(ebx - 0x81);
    int32_t temp2_1 = *(ebx - 2);
    *(ebx - 2) -= 0xffffff97;
    arg3[0x48f420e1] = RLCB(arg3[0x48f420e1], 1, temp2_1 < 0xffffff97);
    bool c_3 = /* bool c_3 = unimplemented  {rcl byte [ecx+0x48f420e1], 0x1} */;
    
    if (!c_3)
    {
        *arg2[1] = 0x48;
        label_a5e2:
        arg3 = 0x49;
        arg3[0xfa2df18b] |= 0x80;
        int32_t ebx_4;
        ebx_4 = 0x4b;
        ebx_4 = 0x48;
    }
    else
    {
        0x48f527c4(var_4);
        void* eax_2;
        eax_2 = 0x80e233cc();
        
        if (c_3)
        {
            0x48f4c7d6();
            void** eax_3;
            int32_t ecx;
            int32_t edx_6;
            eax_3 = 0x9ce22ade();
            *(ebx - 2 + (ecx << 1) - 0x417f7e6f) =
                *(ebx - 2 + (ecx << 1) - 0x417f7e6f) - 0x4b96be80;
            int32_t var_8 = edx_6;
            void* edx_7 = *eax_3;
            int32_t eflags;
            int16_t temp0;
            temp0 = __arpl_memw_gpr16(*(edx_7 - 0x6b94adb9), (ebx - 2));
            *(edx_7 - 0x6b94adb9) = temp0;
            *(ebx + 0x12479ad0);
            bool c_4 = /* bool c_4 = unimplemented  {imul edx, edx, 0x1d} */;
            int32_t* eax_4;
            *eax_4[1] = &var_8 - *(ebx - 0x82);
            void* ebx_3 = (ebx - 2) & *(edx_7 * 0x1d + 0x63);
            void* eax_5;
            char* ecx_2;
            char* edx_9;
            eax_5 = 0x836bb8d2();
            *(eax_5 - 0x7f9ce5dd) = ROLB(*(eax_5 - 0x7f9ce5dd), ecx_2);
            *(eax_5 - 0x78) |= 0x71;
            *edx_9 -= 0x80;
            *(arg5 - 0x7bde7ffe) &= edx_9;
            eax_5 += *(eax_5 - 0x7ffd63df);
            *0x11a1c989 &= edx_9;
            
            while (true)
            {
                eax_5 += *(eax_5 - 0x7ffacddf);
                *(edx_9 + 2) &= arg4;
                *ecx_2 &= 0xd4;
                *ecx_2 &= 0x68;
                eax_5 += *(eax_5 - 0x7ffd5fdf);
                *0x7980498a &= arg5;
                *ecx_2 &= 0x80;
                char temp5_1 = eax_5;
                char temp6_1 = *(eax_5 - 0x7fdf7fdf);
                eax_5 += *(eax_5 - 0x7fdf7fdf);
                ecx_2 -= 1;
                
                if (temp5_1 != -(temp6_1) && !ecx_2)
                    break;
                
                *ecx_2 &= 0x97;
                eax_5 += *(eax_5 - 0x7ffd7bdf);
                *(edx_9 + eax_5 + 0x2962180) &= ebx_3;
                *ecx_2 &= 0x98;
            }
            
            char temp0_1 = ecx_2[0xffffff80];
            ecx_2[0xffffff80] = ecx_2;
            ecx_2 = temp0_1;
            /* undefined */
        }
        
        *eax_2[1] = 0x48;
        *(eax_2 + 0x405cf381) |= arg3;
        *(ebx + 0x48b34bb1) |= *arg2[1];
    }
    
    *((arg5 & arg2) - 0x7c);
    trap(0xd);
}

int32_t __convention("regparm") sub_a6ea(char* arg1, int16_t arg2, int32_t arg3, void* arg4 @ edi)
{
    char temp0_1 = *arg1;
    *arg1 = *arg3[1];
    *arg3[1] = temp0_1;
    bool c;
    char* ecx = arg3 + 0x46f02181;
    *ecx &= 0x7c;
    int32_t eflags;
    __out_immb_al(0x80, arg1, eflags);
    *ecx &= 0x90;
    int32_t eax_1;
    *eax_1[1] = 0x94;
    
    while (true)
    {
        ecx -= 2;
        
        if (!ecx)
            break;
        
        int32_t esp;
        char temp0 = esp;
        esp = eax_1;
        eax_1 = temp0;
    }
    
    int32_t* ebx;
    *ebx &= 0x49922000;
    eax_1 = *0x84238322;
    *(arg4 + 0x5df18349) &= ecx ^ 0xb0;
    /* undefined */
}

int32_t __convention("regparm") sub_a71b(int32_t, void* arg2)
{
    *(arg2 - 0x80) ^= 0x23;
    /* undefined */
}

int32_t __convention("regparm") sub_a721(int32_t arg1, char* arg2, void* arg3, int32_t arg4 @ edi)
{
    int32_t eflags;
    int32_t eflags_1 = __cli(eflags);
    int32_t var_4 = arg1;
    arg3 = *(arg3 - 0x7c);
    __int1();
    __out_immb_oeax(0xfa, arg1, eflags_1);
    *arg2 &= 0x9a;
    /* undefined */
}

int32_t __convention("regparm") sub_a72f(void* arg1, char arg2, int32_t arg3)
{
    *(arg1 - 0x79) <<= 0x49;
    *(arg3 - 0x7c);
    __int1();
    /* undefined */
}

int32_t __convention("regparm") sub_a73f(int32_t* arg1, int32_t arg2, void* arg3, void* arg4 @ esi, int32_t arg5 @ edi)
{
    *(arg3 - 0x6970e80) &= arg2;
    *arg1 &= 0xffffff92;
    *(arg1 - 0x6f069b0f) &= arg1;
    *0xb4904181 |= 0x80;
    void* ebx;
    *(ebx - 0x7a0e7cb7) &= arg2;
    *arg5;
    int32_t eflags;
    __cli(eflags);
    int32_t eax;
    eax = *0x98238322;
    *(arg4 + 0x2ff18349) &= arg3 - 1;
    /* undefined */
}

int32_t __convention("regparm") sub_a777(int32_t, void* arg2)
{
    *(arg2 - 0x80) ^= 0x23;
    /* undefined */
}

int32_t sub_a77d(int32_t arg1 @ edi)
{
    int32_t eflags;
    __cli(eflags);
    __int1();
    /* undefined */
}

void __convention("regparm") sub_a78b(char* arg1, void* arg2, void* arg3, void* arg4 @ ebp, char* arg5 @ esi, char* arg6 @ edi) __noreturn
{
    arg1[0xffffff88] ^= 0x49;
    bool p = /* bool p = unimplemented  {test cl, dh} */;
    bool a = /* undefined */;
    bool z = !(arg3 & *arg2[1]);
    bool s = (arg3 & *arg2[1]) < 0;
    *arg6 = *arg5;
    void* edi = &arg6[1];
    void* esi = &arg5[1];
    int32_t eflags;
    int32_t eflags_1 = __cli(eflags);
    char temp0 = *(arg3 - 0x7c);
    *(arg3 - 0x7c) = arg3;
    arg3 = temp0;
    __int1();
    bool d;
    int32_t var_4 = (d ? 1 : 0) << 0xa | (s ? 1 : 0) << 7 | (z ? 1 : 0) << 6 | (a ? 1 : 0) << 4
        | (p ? 1 : 0) << 2;
    int32_t eflags_2 = __cli(eflags_1);
    *arg1 &= 0x94;
    *(arg1 - 0x7e06c50f) &= arg1;
    *(arg2 + 0x36f18021) &= arg2;
    *0xb4904180;
    void* eax = arg1 & 0xf67e21e4;
    char* i = 0x8120b0fa;
    *(eax - 0x7b06d70f) &= eax;
    int32_t eax_1 = eax;
    *(arg2 + 0x23f18022) &= eax_1;
    *(arg2 - 0x66);
    int32_t* ebx;
    *(ebx + 0x1ef18021) &= eax_1;
    *(arg2 - 0x66);
    *0x7a3aa27a &= eax_1;
    *(arg2 - 0x3b);
    *(arg4 + 0x14f18021) &= eax_1;
    *(arg2 - 0x7f);
    *(ebx + 0xff18021) &= 0xfa;
    *(arg2 - 0x7f);
    *0x7a2ba27a &= 0xfa;
    *(arg2 - 0x60);
    *(eax_1 + 0x5f18021) &= (arg2 + 1);
    *arg2;
    *0x8212311b &= (arg2 + 1);
    *(arg2 + 1);
    *(eax_1 - 0x40e7fdf) &= eax_1;
    *(arg2 - 0x4d);
    *(esi - 0xa) &= edi;
    *eax_1 &= 0xf180218d;
    *(arg2 - 0x40);
    *0x7012311b &= eax_1;
    *(arg2 - 0x7f);
    *0x7b0aa27a &= (arg2 + 1);
    *(arg2 - 0x7c);
    *(arg2 - 0x1b0e7fde) &= (arg2 + 1);
    *(arg2 - 0x7f);
    *(ebx - 0x200e7fdf) &= (arg2 + 1);
    *(arg2 - 0x73);
    *0x5c12311b &= 0xfa;
    *(arg2 - 0x73);
    *(arg2 - 0x2a0e7fde) &= 0xfa;
    *(arg2 - 0x75);
    *(esi - 0x2f0e7fdf) &= 0xfa;
    *(arg2 + 0x80);
    *(edi - 0x340e7fdf) &= 0xfa;
    *(arg2 - 0x4f);
    *(arg4 - 0x390e7fdf) &= (arg2 + 1);
    *(arg2 - 0x75);
    *(ebx - 0x3e0e7fdf) &= ebx;
    *(arg2 - 0x3a);
    *0x7adda27a &= ebx;
    *(arg2 + 0x70);
    *(edi - 0x480e7fdf) &= (arg2 + 1);
    *(arg2 - 0x47);
    *(edi - 0x4d0e7fdf) &= *(arg2 + 1)[1];
    *(arg2 + 0x40);
    *(arg2 - 0x520e7fde) &= *(arg2 + 1)[1];
    *(arg2 - 0x77);
    *eax_1[1] &= eax_1;
    *(eax_1 - 0x7b06570f) &= eax_1;
    void* edx_1 = arg2 + 2;
    *0x80219620 = eax_1;
    __int1();
    *0x584284f9 = eax_1;
    *(edi - 0x610e7fdf) &= edx_1;
    *(edx_1 + 7);
    *(eax_1 - 0x660e7fdf) &= ebx;
    *(edx_1 + 0x7f);
    *0x1612311b &= ebx;
    *(edx_1 - 0x74);
    *(edx_1 - 0x700e7fdf) &= ebx;
    *(edx_1 + 0x6a);
    *(ebx - 0x750e7fdf) &= ebx;
    *(edx_1 - 0x60);
    void* edi_1 = edi + 1;
    int32_t eax_2 = *0x8021b247;
    __int1();
    *(edi_1 - 0x74);
    bool c_1;
    
    do
    {
        int32_t eax_3 = eax_2 | 0xd5180f9;
        *(i - 0x7e) -= 0x4fb816dd;
        *(edx_1 - 0xa) &= edi_1 + 1;
        *i &= 0xb8;
        __out_immb_oeax(0xf8, eax_3, eflags_2);
        *eax_3;
        eax_3 = __in_al_dx(edx_1, eflags_2);
        eax_3 = *esi;
        *ebx;
        char* edi_4 = *0xb4900180;
        char* esi_2 = *0xb4900184;
        *0xb4900188;
        *0xb4900190;
        *0xb4900194;
        *0xb4900198;
        *0x3699b1c = *0xb490019c;
        *edi_4 = *esi_2;
        char* edi_6 = *0xb49001a0;
        char* esi_4 = *0xb49001a4;
        *0xb49001a8;
        *0xb49001b0;
        *0xb49001b4;
        *0xb49001b8;
        *0x3699b1c = *0xb49001bc;
        *edi_6 = *esi_4;
        char* edi_8 = *0xb49001c0;
        char* esi_6 = *0xb49001c4;
        *0xb49001c8;
        *0xb49001d0;
        *0xb49001d4;
        *0xb49001d8;
        *0x3699b1c = *0xb49001dc;
        *edi_8 = *esi_6;
        edi_1 = *0xb49001e0;
        esi = *0xb49001e4;
        ebx = *0xb49001f0;
        int32_t edx_8 = *0xb49001f4;
        int32_t eax_7 = *0xb49001fc;
        *(esi - 0x5f1e7a30) -= eax_7;
        *(ebx - 0x5cb261be);
        c_1 = /* c_1 = unimplemented  {imul eax, dword [ebx-0x5cb261be], 0x9de18861} */;
        edx_1 = edx_8 - 2;
        eax_2 = *(ebx - 0x5bb264be) * 0x8061a31c;
        i = eax_7 - 1;
    } while (!(*(ebx - 0x5cb261be) * 0x61 + 0x65) || i);
    *ebx -= 0x2b82d18f;
    i[0x884a95e1] = RRCB(i[0x884a95e1], 1, *0xb0a2be80 < *edi_1);
    *0x1ca361a3 = *edx_1[1];
    int32_t edi_11 = *0xb4900200;
    *0xb4900204;
    int32_t ebp_3 = *0xb4900208;
    void* ebx_4 = *0xb4900210;
    *0xb4900214;
    *0xb4900218;
    *0xb490021c;
    char* ecx_6;
    int32_t edx_11;
    edx_11 = 0x884b38aa();
    *(edx_11 - 1) = *(edx_11 - 1)[1];
    *(ebx_4 - 0x77b279be);
    void* eax_10 = *(ebx_4 - 0x5ce35bbe) * 0x80e18061;
    *ecx_6 -= 0x80;
    ecx_6[0xfffffff0] = *(eax_10 + 0x48814181)[1];
    *ecx_6 -= 0x6c;
    char temp0_2 = *(ecx_6 - 0x80);
    *(ecx_6 - 0x80) = ecx_6;
    char* ecx_7 = temp0_2;
    int32_t eax_15 =
        (*(*(eax_10 + 0x150604ed) * 0x80399449 - 0x6dfd7e15) * 0x81b08bb0) & 0xbc90be81;
    *ecx_7 &= 0x7c;
    __out_immb_al(0x94, eax_15, eflags_2);
    *(edi_11 - 0x58);
    int32_t edi_12 = edi_11 + 1;
    ecx_7 ^= 0xc5;
    *(edi_12 + ((eax_15 - 0x4b47be7f) << 1) + 0x47e9b804) += 1;
    char eax_17 = ebp_3;
    __int1();
    
    do
    {
        edi_12 = (edi_12 >> 0x84) + 1;
        int32_t eflags_3;
        char temp0_4;
        char temp1_2;
        temp0_4 = __aam_immb(0xb8, eax_17);
        eax_17 = temp1_2;
    } while ((eax_17 & 0x68) <= 0);
    
    *ebx_4[1] += eax_17;
    *(edi_12 - 0x74);
    *0x61a82180 &= 0x80;
    __int1();
    *0xb4900220;
    int32_t eax_19;
    eax_19 = *0x71bcb847;
    *eax_19[1] = 0x2d;
    trap(0xd);
}

int32_t sub_d2ff(int32_t arg1 @ ebp, char* arg2 @ esi, void* arg3 @ edi)
{
    int32_t eax;
    eax = 0xb4;
    *(arg3 - 0x75) += 0x47;
    *arg2 &= 0xc5;
    int32_t eflags;
    char temp0_1;
    char temp1;
    temp0_1 = __aad_immb(0x51, arg2, *arg2[1]);
    char* eax_1;
    eax_1 = temp0_1;
    *eax_1[1] = temp1;
    *(eax + 0x69404993);
    __int1();
    *(arg1 - 1) += 0x1f841fe0;
    *(arg1 - 0x434fde81) = eax;
    void* ebp_1 = *0x41804587;
    *0x4180458f;
    *0x41804593;
    void* eax_3 = *0x4180459b;
    int32_t ecx;
    ecx = (*(ebp_1 - 0x80)) ^ 0x82;
    eax_3 += *eax_3[1];
    *0x4180459f;
    **0x4180457f;
    *(eax_3 - 0x1991de80) = 0x6940498b;
    *(*(ecx - 0x2f89d780) + ebp_1 + 0x61);
    /* undefined */
}

int32_t __convention("regparm") sub_d35b(void* arg1, int32_t, void** arg3, int32_t arg4 @ ebp, void* arg5 @ edi)
{
    *(arg1 + 0x65218161) &= arg4;
    int32_t eflags;
    __out_immb_al(0x80, arg1, eflags);
    *(arg5 - 2) += arg5;
    *arg3 = __return_addr;
    *arg3 ^= 0x80;
    /* undefined */
}

int32_t __convention("regparm") sub_d3a1(int16_t arg1, int32_t arg2, int32_t arg3, void* arg4 @ edi, long double arg5 @ st0)
{
    *arg4;
    int32_t eax = arg1;
    *(arg4 - 0x461e6eb9);
    void* i;
    
    do
    {
        *(arg2 - 0x1e74db80);
        i = arg4;
        arg4 += 1;
        int32_t eflags;
        __out_immb_oeax(0xf2, eax, eflags);
        int16_t top = top - 1;
        /* unimplemented  {fild st0, word [ecx]} */
        int32_t temp0_2 = *(arg4 - 0x31);
        *(arg4 - 0x31) = eax;
        eax = arg3;
        arg3 = temp0_2 - 1;
    } while (i != 0xffffffff && !arg3);
    
    while (i > 0xffffffff)
        /* nop */
    
    *arg3 = __return_addr;
    *arg3 ^= 0x80;
    /* undefined */
}

int32_t __convention("regparm") sub_d523(char* arg1, int32_t arg2, int32_t* arg3, char* arg4 @ esi, void* arg5 @ edi)
{
    __int1();
    int32_t temp1 = *arg3 | 0xf1cfe1de;
    *arg3 = temp1;
    
    if (temp1 > 0)
    {
        arg1[0x50f18547] &= *arg3[1];
        arg1[0x46e1b9b0] += 1;
        *arg1 = arg1;
        arg1 = 0xc75dc001;
        arg2 = RORB(arg2, 1);
        
        if (arg2 < 0)
            goto label_d501;
    }
    else
    {
        *arg3 -= 0x2982d184;
        arg1 = *arg4;
        void* ebx;
        int32_t temp3_1 = ROLD(*(ebx - 0x432f2ed7), 1);
        *(ebx - 0x432f2ed7) = temp3_1;
        arg3 -= 1;
        
        if (temp3_1 && !arg3)
        {
            char temp0_1 = arg2;
            arg2 = *arg3[1];
            *arg3[1] = temp0_1;
            int32_t eflags;
            arg1 = __salc(eflags);
            *(ebx - 0x80) -= *arg3[1];
            /* undefined */
        }
        
        void* temp4_1 = *(arg1 - 0x75b777df) & arg1;
        *(arg1 - 0x75b777df) = temp4_1;
        
        if (temp4_1 < 0)
        {
            *ebx[1] = *(arg3 - 0x3f);
            arg1 = arg1 - *(arg1 + (arg2 << 3) + 0x2bc579ca) - 0x1e79de7e - *(ebx - 0x38863530);
            label_d501:
            *(arg1 - 0xfde7c30);
            *arg3 &= 0xad;
            void* ecx;
            char edx;
            edx = 0x47021b82();
            int16_t es;
            *(arg5 + 0x59) = es;
            *(ecx - 0x7e) = *(ecx - 0x7e) + 0x2d;
            int32_t var_4 = 0xd9824320;
            /* undefined */
        }
        
        char temp0_3 = *(arg3 - 0x75);
        *(arg3 - 0x75) = arg3;
        arg3 = temp0_3;
        __int1();
    }
    
    *arg3 &= 0x84;
    arg3[-0x16] |= *arg2[1];
    /* undefined */
}

int32_t __convention("regparm") sub_d54c(void* arg1, int16_t arg2, char* arg3, int32_t arg4 @ esi)
{
    *(arg1 - 0x4f1e3750) += 1;
    void* edi = __return_addr + 1;
    *0x88f240 = -(*0x88f240);
    void* __return_addr_1 = *0xd07e9deb * 0x47;
    __return_addr = __return_addr_1;
    *(__return_addr_1 + 0x46e1b9b0) += 1;
    *__return_addr_1 = __return_addr_1;
    arg2 = RORB(arg2, 1);
    
    if (arg2 >= 0)
    {
        *arg3 &= 0x84;
        arg3[0xffffffa8] |= *arg2[1];
        /* undefined */
    }
    
    *0xb77f43d1;
    *arg3 &= 0xad;
    void* ecx;
    char edx;
    edx = 0x47021b82();
    int16_t es;
    *(edi + 0x59) = es;
    *(ecx - 0x7e) = *(ecx - 0x7e) + 0x2d;
    int32_t var_4 = 0xd9824320;
    /* undefined */
}

int32_t __convention("fastcall") sub_d5d8(int32_t arg1, int16_t arg2, int32_t* arg3 @ esi, void* arg4 @ edi)
{
    char* eax;
    eax = *0x8249f0f1;
    int32_t* ecx = arg1 - 1;
    int32_t* esp;
    bool z;
    
    if (z || ecx)
    {
        *eax += 1;
        void* temp1_1 = arg4;
        arg4 += 1;
        int32_t* temp0_1 = arg3;
        arg3 = eax;
        eax = temp0_1;
        ecx = (ecx ^ 0x7c) - 1;
        
        if (temp1_1 != 0xffffffff && !ecx)
        {
            int32_t eax_7 = (*(eax - 0x57efab16) * 0x47) & 0x8eb080fe;
            
            if (!eax_7 || ecx != 1)
            {
                if (eax_7 && ecx == 2)
                {
                    void* eax_4 = *(ecx - 2);
                    char temp6 = *(arg4 - 0x57);
                    *(arg4 - 0x57) += eax_4;
                    
                    if (temp6 == -(eax_4) || ecx != 3)
                        /* undefined */
                    
                    void* eax_5 = *(eax_4 - 0x57df6b16) * 0x47;
                    *(eax_5 - 0xc3f1e5f);
                    *(eax_5 - 0xc3f1e5f) ^= 0x7f;
                    ecx[-0x1ebf0ec6] = ecx[-0x1ebf0ec6] + eax_5;
                    /* undefined */
                }
            }
            else if (eax_7 > 0)
                /* undefined */
            
            __int1();
            *esp;
            /* undefined */
        }
    }
    
    __int1();
    *ecx |= 0xbe80be80;
    *(arg4 + 0x3d);
    *(arg4 + 0x3d) = ROLB(*(arg4 + 0x3d), 0xe9);
    bool o_1 = /* bool o_1 = unimplemented  {rol byte [edi+0x3d], 0xe9} */;
    int16_t es;
    
    if (o_1)
    {
        *eax = eax;
        arg2 = RORB(arg2, 1);
        
        if (arg2 >= 0)
        {
            *ecx &= 0x84;
            ecx[-0x16] |= *arg2[1];
            /* undefined */
        }
        
        *0xb77f43d1;
        *ecx &= 0xad;
        void* ecx_4;
        char edx_1;
        edx_1 = 0x47021b82();
        *(arg4 + 0x59) = es;
        *(ecx_4 - 0x7e) = *(ecx_4 - 0x7e) + 0x2d;
        *(esp - 4) = 0xd9824320;
        /* undefined */
    }
    
    *arg3;
    void* ecx_1;
    eax = 0x47883462();
    *(arg4 + 0x57) = es;
    *(ecx_1 + 0x74202180);
    *(ecx_1 + 0x74202180) ^= 0x78;
    *(esp - 4) = 0xe93db888;
    esp -= 4;
    char temp5 = *(arg4 - 0x5d);
    *(arg4 - 0x5d) -= 0x28;
    
    if (temp5 == 0x28 || ecx_1 != 1)
    {
        void* ebx;
        *(ebx - 0x5f01a20f) = *(ebx - 0x5f01a20f) - 0x281dc028;
        __int1();
        /* undefined */
    }
    
    *(ecx_1 - 1) |= 0x218cf95b;
    *esp;
    char* esi = esp[1];
    esp[2];
    esp[4];
    esp[5];
    esp[6];
    *esi |= 0x87;
    *esi <<= 1;
    trap(0xd);
}

int32_t __convention("regparm") sub_e14f(int32_t arg1, char* arg2, void* arg3 @ ebp, char* arg4 @ esi)
{
    char temp1_1 = arg1 % *arg2;
    arg1 = arg1 / *arg2;
    *arg1[1] = temp1_1;
    void* eax = arg1 & arg4;
    *arg4 = eax;
    int32_t eflags;
    int32_t eflags_1;
    char temp0;
    char temp1;
    temp0 = __aas(eax, *eax[1], eflags);
    eax = temp0;
    *eax[1] = temp1;
    *(arg3 - 0x45097805) += eax;
    void* eax_1 = eax - 0x1e7d9f3d;
    /* unimplemented  {enter 0x802d, 0xd0} */
    *(eax_1 - 0x3e) &= 0x61;
    /* undefined */
}

int32_t __convention("regparm") sub_e16f(int32_t arg1, char* arg2, char* arg3, void* arg4 @ ebp, void* arg5 @ esi, void* arg6 @ edi, long double arg7 @ st0)
{
    bool c;
    void* eax = arg1 - 0x2890b339;
    void* var_4 = eax;
    char* var_8 = arg3;
    char* var_c = arg2;
    int32_t ebx;
    int32_t var_10 = ebx;
    int32_t* var_14 = &var_10;
    void* var_18 = arg4;
    void* var_1c = arg5;
    void* var_20 = arg6;
    *(eax - 0x44) <<= arg3;
    *(arg6 + 0x10) += 0x69;
    arg3[0xffffff88] = eax;
    eax = 0x81;
    *arg3 &= 0x7c;
    int32_t eflags;
    __out_immb_al(0x70, (eax & arg5), eflags);
    void* eax_1;
    *eax_1[1] = 0x8a;
    *arg2 &= 0x80;
    void* eax_2 = eax_1 & 0x24802080;
    arg3 ^= 0x80;
    int32_t ss;
    *(ss + arg5 - 0x7d) |= 0xd0;
    void* edi_2 = arg6 + 1;
    
    if (arg6 + 2 - 1)
    {
        int32_t temp3 = *(ebx + eax_2 + 1 - 0x4d);
        *(ebx + eax_2 + 1 - 0x4d) -= 0x80;
        *edi_2 = RLCB(*edi_2, 0x36, temp3 >= 0x80 ^ 1);
        trap(0xd);
    }
    
    void* ecx_1 = arg3 & 0x61f14f81;
    *ecx_1 -= 0x80;
    *(ecx_1 - 0x524b6fbf) += eax_2;
    eax_2 = __in_al_dx(arg2, eflags);
    arg2[0x49234784];
    ecx_1 = ecx_1 + *ebx[1];
    *ebx[1] = 1;
    var_20 = 0x104921b0;
    *ebx[1] = 1;
    *ecx_1 -= 0xffffff82;
    *(ecx_1 + arg4 - 0x1e782f70);
    *(ecx_1 + arg4 - 0x1e782f70) = ROLD(*(ecx_1 + arg4 - 0x1e782f70), 1);
    bool c_3 = /* bool c_3 = unimplemented  {rol dword [ecx+ebp-0x1e782f70], sub_0+1} */;
    *(ecx_1 + 0x481c1b88) = ecx_1;
    *(ecx_1 + 0x4919e187) = (eax_2 - 0x1d8e0049 - 1);
    *(arg5 - 0x7676b7e6) += ecx_1;
    *(arg4 + 0x18) = (eax_2 - 0x1d8e0049 - 1);
    *(ecx_1 - 0x417f4180) = (eax_2 - 0x1d8e0049 - 2);
    *ecx_1 &= 0x14;
    *ebx[1] = 1;
    *0x154814e0 = (eax_2 - 0x1d8e0049 - 3);
    *ebx[1] = 0x71;
    char* ebx_1 = ebx - 1;
    *ebx_1 = RORB(*ebx_1, 0x7e);
    int32_t eax_7;
    eax_7 = (eax_2 - 0x1d8e0049 - 3) * *arg2;
    void* ecx_3;
    ecx_3 = (ecx_1 + edi_2 - 1) + *(ecx_1 + edi_2 - 1);
    eax_7 = __in_al_dx(arg2, eflags);
    *ebx_1 |= 0x10;
    eax_7 = __in_al_dx(arg2, eflags);
    *ebx_1;
    *ebx_1 |= 0x5f;
    eax_7 = __in_al_dx(arg2, eflags);
    int32_t temp7 = *ebx_1 + ecx_3;
    *ebx_1 = temp7;
    eax_7 = 0xef;
    
    if (!temp7 || ecx_3 == 1)
    {
        eax_7 = __in_al_dx(arg2, eflags);
        trap(6);
    }
    
    int32_t esp = &var_20 | *(ecx_3 + 0xd0b80ee);
    *eax_7[1] += *(ecx_3 - 2)[1];
    *ebx_1 |= 0x10;
    eax_7 = __in_al_dx(arg2, eflags);
    *ebx_1 |= 0x5f;
    eax_7 = __in_al_dx(arg2, eflags);
    *ebx_1 |= ecx_3 - 2;
    eax_7 ^= 0xef;
    *(esp - 4) = eax_7;
    *(esp - 8) = ecx_3 - 2;
    *(esp - 0xc) = arg2;
    *(esp - 0x10) = ebx_1;
    *(esp - 0x14) = esp - 0x10;
    *(esp - 0x18) = arg4;
    *(esp - 0x1c) = arg5 + 1;
    *(esp - 0x20) = edi_2;
    int32_t esi_1 = (arg5 + 1) | *(ecx_3 - 0x13);
    int32_t eflags_1 = __sti(eflags);
    *(esp - 0x20);
    eax_7 = __in_al_dx(arg2, eflags_1);
    int16_t es;
    *(esp - 0x22) = es;
    *eax_7;
    char* eax_8;
    eax_8 = __in_al_dx(arg2, eflags_1);
    char temp8 = *ebx_1;
    *ebx_1 |= 0x8d;
    void* ecx_6 = ecx_3 - 3;
    
    if (!(temp8 | 0x8d) || ecx_6)
        ebx_1 |= *(edi_2 - 0x14);
    else
    {
        ecx_6 -= 1;
        *eax_8[1] = *eax_8[1] + *ecx_6[1];
        *ebx_1 |= 0x5f;
        eax_8 = __in_al_dx(arg2, eflags_1);
    }
    
    eax_8 += 0xb;
    eax_8 ^= 0xef;
    *(esp - 0x26) = eax_8;
    *(esp - 0x2a) = ecx_6;
    *(esp - 0x2e) = arg2;
    *(esp - 0x32) = ebx_1;
    *(esp - 0x36) = esp - 0x32;
    *(esp - 0x3a) = arg4;
    *(esp - 0x3e) = esi_1;
    *(esp - 0x42) = edi_2;
    *(ecx_6 - 0x11);
    int32_t esi_2 = esi_1 | *(ecx_6 - 0x11);
    int32_t eflags_2 = __sti(eflags_1);
    char* ebx_2 = ebx_1 + 0x1f;
    eax_8 = __in_al_dx(arg2, eflags_2);
    *ebx_2 += ecx_6;
    *eax_8[1] += *ecx_6[1];
    *ebx_2;
    *ebx_2 |= 0xfd;
    *eax_8[1] = *eax_8[1] + *(ecx_6 - 1)[1];
    *ebx_2 |= 0x79;
    __out_dx_oeax(arg2, eax_8, eflags_2);
    *ebx_2;
    eax_8 ^= 0xef;
    *(esp - 0x46) = eax_8;
    *(esp - 0x4a) = ecx_6 - 1;
    *(esp - 0x4e) = arg2;
    *(esp - 0x52) = ebx_2;
    *(esp - 0x56) = esp - 0x52;
    *(esp - 0x5a) = arg4;
    *(esp - 0x5e) = esi_2;
    *(esp - 0x62) = edi_2;
    int32_t esi_3 = esi_2 | *(ecx_6 - 0x12);
    int32_t eflags_3 = __sti(eflags_2);
    arg7 - *(ecx_6 - 1);
    void* eax_9;
    eax_9 = __in_al_dx(arg2, eflags_3);
    *ebx_2 |= 0x71;
    __out_dx_oeax(arg2, eax_9, eflags_3);
    *ebx_2;
    eax_9 ^= 0xef;
    *(esp - 0x66) = eax_9;
    *(esp - 0x6a) = eax_8;
    *(esp - 0x6e) = arg2;
    *(esp - 0x72) = ebx_2;
    *(esp - 0x76) = esp - 0x72;
    *(esp - 0x7a) = arg4;
    *(esp - 0x7e) = esi_3;
    *(esp - 0x82) = edi_2;
    void* esp_7 = esp - 0x82;
    int32_t esi_4 = esi_3 | *(eax_8 - 0x11);
    int32_t eflags_4 = __sti(eflags_3);
    char* i;
    i = ebx_2;
    *i;
    *i &= 0xf5;
    char temp13_1;
    
    do
    {
        i[0x1f] = *arg2[1];
        eax_9 = __in_al_dx(arg2, eflags_4);
        esi_4 |= arg4;
        *eax_9[1] += *(i - 1)[1];
        temp13_1 = *ebx_2;
        *ebx_2 |= 0x9a;
        i -= 2;
    } while (!(temp13_1 | 0x9a) || i);
    void* ecx_9 = i - 1;
    *eax_9[1] = *eax_9[1] + *ecx_9[1];
    *ebx_2 |= 0x71;
    __out_dx_oeax(arg2, eax_9, eflags_4);
    int32_t esi_5;
    
    while (true)
    {
        *ebx_2;
        eax_9 ^= 0xef;
        *(esp_7 - 4) = eax_9;
        *(esp_7 - 8) = ecx_9;
        *(esp_7 - 0xc) = arg2;
        *(esp_7 - 0x10) = ebx_2;
        *(esp_7 - 0x14) = esp_7 - 0x10;
        *(esp_7 - 0x18) = arg4;
        *(esp_7 - 0x1c) = esi_4;
        *(esp_7 - 0x20) = edi_2;
        *(ecx_9 - 0x11);
        esi_5 = esi_4 | *(ecx_9 - 0x11);
        eflags_4 = __sti(eflags_4);
        esp_7 = (esp_7 - 0x20 + 0x7e) & arg4;
        void* temp17_1 = eax_9;
        eax_9 -= 1;
        *(ecx_9 - 0x74) = *arg2[1];
        ecx_9 -= 1;
        
        if (temp17_1 != 1 && !ecx_9)
            break;
        
        esi_4 = esi_5 | *(ecx_9 - 0x11);
    }
    
    *eax_9[1] = *eax_9[1] + *(ecx_9 - 1)[1];
    *ebx_2 |= 0x79;
    __out_dx_oeax(arg2, eax_9, eflags_4);
    *ebx_2;
    eax_9 ^= 0xef;
    *(esp_7 - 4) = eax_9;
    *(esp_7 - 8) = ecx_9 - 1;
    *(esp_7 - 0xc) = arg2;
    *(esp_7 - 0x10) = ebx_2;
    *(esp_7 - 0x14) = esp_7 - 0x10;
    *(esp_7 - 0x18) = arg4;
    *(esp_7 - 0x1c) = esi_5;
    *(esp_7 - 0x20) = edi_2;
    *(ecx_9 - 0x12);
    *(ecx_9 - 0x12);
    int32_t eflags_5 = __sti(eflags_4);
    ebx_2 = ebx_2 - 0x7f;
    void* eax_10 = eax_9 - 1;
    *(ecx_9 - 0x1d) = *arg2[1];
    char temp20 = *(ecx_9 - 0x1a);
    
    if (temp20 == 0xb0 || ecx_9 == 3)
    {
        *eax_10[1] = *eax_10[1] + *(ecx_9 - 3)[1];
        *ebx_2 |= 0x5f;
        eax_10 = __in_al_dx(arg2, eflags_5);
        long double x87_r0 = arg7 * *ebx_2;
        *ebx_2[1] += *(ecx_9 - 3)[1];
        eax_10 = *0x88ef301b;
        *(ecx_9 - 0x20f47f14);
        *eax_10[1] += *(ecx_9 - 4)[1];
        *ebx_2;
        *ebx_2 |= 0xd2;
        void* ecx_14;
        ecx_14 = (ecx_9 - 5) + *ebx_2[1];
        *ecx_14[1] = 1;
        *ecx_14 -= 0x49d9d0d9;
        *(ecx_14 - 8);
        long double x87_r0_1 = x87_r0 * *(ecx_14 + 0x10);
        eax_10 = __in_al_dx(arg2, eflags_5);
        
        while (true)
        {
            *ebx_2 |= 0x5f;
            eax_10 = __in_al_dx(arg2, eflags_5);
            x87_r0_1 = x87_r0_1 * *ebx_2;
            char temp22_1 = eax_10;
            eax_10 ^= 0xef;
            ecx_14 -= 1;
            
            if (temp22_1 != 0xef && ecx_14)
                break;
            
            arg2 = 0xec1049da;
        }
        
        eax_10 = __in_al_dx(arg2, eflags_5);
        char temp0_18;
        char temp1_1;
        temp0_18 = __aad_immb(0xb, eax_10, *eax_10[1]);
        eax_10 = temp0_18;
        *eax_10[1] = temp1_1;
        eax_10 = 0xef;
        goto label_e392;
    }
    
    while (true)
    {
        arg2 |= *(eax_10 - 0x77e46f11);
        edi_2 += 1;
        
        if (arg2 >= 0)
        {
            *arg2[1] |= *eax_10;
            __out_dx_oeax(arg2, eax_10, eflags_5);
            *((arg4 & (esp_7 - 0x20)) >> 0x99);
            *(eax_10 - 0x11);
            /* jump -> 0x6bf757b8 */
        }
        
        label_e392:
        eax_10 += 1;
    }
}

int32_t sub_e1c7(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, char arg6)
{
    bool z;
    
    if (z || arg5 != 1)
        /* undefined */
    
    *__return_addr += arg6;
    trap(0xd);
}

int32_t __convention("regparm") sub_112f5(int32_t arg1, void* arg2, char arg3, void* arg4 @ ebp, int32_t arg5 @ edi, long double arg6 @ st0)
{
    void* ebx_1 = *(arg2 - 0x76de7fab) * 0xbcf084e1;
    char temp0 = *(ebx_1 - 0x15b856a3);
    *(ebx_1 - 0x15b856a3) += arg3;
    bool c_1 = /* bool c_1 = unimplemented  {sbb eax, 0x69e6b355} */;
    void* var_4 = arg4;
    *0x2984b348 = RRCD(*0x2984b348, 0x73, c_1);
    *(arg1 - 0x69e6b355 - 0x101e77df);
    *(arg4 - 0x57);
    /* undefined */
}

int32_t __convention("regparm") sub_11350(uint64_t* arg1, void* arg2 @ ebp, int32_t arg3 @ edi)
{
    int32_t eax;
    int16_t es;
    eax = __les_gprz_memp(*arg1);
    *(arg2 - 0x57);
    /* undefined */
}

int32_t __convention("regparm") sub_113b3(int32_t, void* arg2, int32_t arg3 @ edi)
{
    *(arg2 - 0x78de7fab);
    /* undefined */
}

void __convention("fastcall") sub_113ce(int32_t arg1)
{
    bool z;
    
    if (z || arg1 == 1)
        return;
    
    int32_t ebx;
    ebx = 0xe3;
    int32_t eax;
    void* edx;
    int32_t edi;
    /* tailcall */
    return sub_113b3(eax, edx, edi);
}

int32_t __convention("regparm") sub_11421(int32_t, void* arg2, int32_t arg3 @ edi)
{
    *(arg2 - 0x78de7fab);
    /* undefined */
}

int32_t __convention("regparm") sub_11451(int32_t, void* arg2, int32_t arg3 @ edi)
{
    *(arg2 - 0x78de7fab);
    /* undefined */
}

int32_t __convention("regparm") sub_11477(int32_t, void* arg2, int32_t arg3 @ edi)
{
    *(arg2 - 0x78de7fab);
    /* undefined */
}

int32_t __convention("regparm") sub_114c3(void** arg1, void* arg2, char* arg3, void* arg4 @ esi, int32_t arg5 @ edi)
{
    int32_t ebx_1 = *(arg2 - 0x73b855ab) * 0x8c69e149;
    __int1();
    arg1 -= 0xfe;
    *(arg4 - 0x430f4180);
    int32_t var_80;
    int32_t var_80_1 = var_80 + arg5;
    *arg1 &= arg2;
    *arg3 &= 0x60;
    *arg3 &= 0xb8;
    *arg3 &= 0xf6;
    int16_t* esp = &__return_addr & (arg1 + *(arg1 - 0x7f98dbdf));
    char* fsbase;
    *(fsbase + arg3) &= 0xfc;
    *esp;
    *arg3 &= 0x80;
    *(arg3 - 0x7fb67fbf);
    int32_t eflags;
    __sti(eflags);
    *0x81430889;
    arg3[0x80bc9022] = ROLB(arg3[0x80bc9022], 1);
    *(arg4 - 0x70) &= arg5 + 1;
    void* eax_1;
    *eax_1[1] = 0x82;
    eax_1 |= *(ebx_1 - 0x65);
    *(eax_1 + 0x244d8f22);
    *(eax_1 + 0x244d8f22) = ROLD(*(eax_1 + 0x244d8f22), 1);
    /* unimplemented  {rol dword [eax+0x244d8f22], sub_0+1} */
    /* undefined */
}

int32_t sub_1152e()
{
    int32_t eflags;
    int32_t eax;
    eax = __in_al_immb(0x1b, eflags);
    /* undefined */
}

int32_t __convention("regparm") sub_1159b(char* arg1, int32_t arg2, int32_t* arg3, int32_t arg4 @ esi, char* arg5 @ edi)
{
    char* edx = arg2 & arg3;
    bool c = false;
    bool z = !(arg2 & arg3);
    bool s = (arg2 & arg3) < 0;
    bool o = false;
    
    if (s)
    {
        arg3 &= arg5[0xf31b244d];
        /* undefined */
    }
    
    void* const __return_addr_1 = __return_addr;
    void* ebx;
    
    while (true)
    {
        *(__return_addr_1 - 4) = arg1;
        __return_addr_1 -= 4;
        ebx = 0x7f;
        char* temp0_2 = edx;
        edx = arg1;
        *arg3[1] = 0x76;
        
        if (z || s != o)
            break;
        
        *arg3 -= 0x6f;
        int16_t top = top - 1;
        /* unimplemented  {fild st0, dword [ecx-0x75436fdf]} */
        char* eax;
        eax = temp0_2 + *(ebx - 0x7d);
        /* unimplemented  {fadd dword [ecx]} */
        void* ebx_1;
        ebx_1 = eax;
        *(arg3 - 1) &= 0x4987e677;
        char temp2_1 = eax;
        eax += *(ebx_1 - 0x7d);
        /* unimplemented  {fadd dword [ecx]} */
        arg1 = eax + 0x7f;
        *(arg1 - 0x1a) &= arg4;
        *(arg3 - 1) &= 0x2180e66e;
        int32_t eflags;
        uint8_t temp0_1;
        temp0_1 = __insb(arg5, edx, eflags);
        *arg5 = temp0_1;
        __out_immb_al(0x80, arg1, eflags);
        int32_t temp4_1 = *(arg5 + 0x5c);
        *(arg5 + 0x5c) = &arg5[*(arg5 + 0x5c)];
        c = &arg5[temp4_1] < temp4_1;
        z = temp4_1 == -(arg5);
        s = &arg5[temp4_1] < 0;
        o = temp4_1 + arg5;
    }
    
    *ebx[1] = *ebx[1] - *edx;
    /* undefined */
}

void __convention("regparm") sub_115b3(int32_t arg1, int32_t arg2 @ esi, int32_t arg3 @ edi) __noreturn
{
    int32_t eax;
    *eax[1] = 0x84;
    eax = *0xf7f67a68;
    int32_t eax_1;
    int32_t ecx;
    eax_1 = (*(eax - 0x47fe7f44))();
    *eax_1[1] = 0x84;
    *(arg3 + 2);
    int16_t ebx;
    *(ecx + 0x47) += *ebx[1];
    eax_1 = 0xaf;
    int32_t var_4 = eax_1;
    trap(0xd);
}

int32_t* __convention("regparm") sub_11d93(int32_t* arg1, int32_t arg2, int32_t* arg3, int32_t* arg4 @ ebp, void* arg5 @ esi, void* arg6 @ edi)
{
    int32_t var_4 = 0x75df6fef;
    int32_t* esp = &var_4;
    
    while (true)
    {
        arg3 -= 1;
        bool cond:0;
        bool cond:3_1;
        int32_t eflags;
        int16_t top;
        
        if (cond:0 || arg3)
        {
            int32_t* ebx;
            arg1 = *(ebx + arg1);
            label_11e0d:
            arg4 = arg3 * 0xb129e56d;
            arg1[-0x1d6b0b6f] -= *arg1[1];
            int32_t temp1_1 = *(arg1 - 0x7d4b6fff);
            *(arg1 - 0x7d4b6fff) += arg1;
            bool z_3 = temp1_1 == -(arg1);
            
            while (true)
            {
                arg3 -= 1;
                
                if (z_3 || arg3)
                {
                    char temp3_1 = *arg3 & 0xef;
                    *arg3 = temp3_1;
                    cond:0 = !temp3_1;
                    cond:3_1 = temp3_1 < 0;
                    goto label_11da5;
                }
                
                *(arg5 - 0x7b04160f) &= arg3;
                arg3 -= 1;
                bool d;
                
                if (ebx[-0x20] - 0x29 < 0)
                {
                    arg1 = *arg5;
                    
                    if (d)
                        arg5 -= 1;
                    else
                        arg5 += 1;
                }
                else
                {
                    *(arg3 - 0x76) |= 0xf1;
                    eflags = __sti(eflags);
                    *arg3 &= 0x70;
                    *arg1[1] = 0x83;
                    esp = 0x4a280184;
                    d = TEST_BITD(*0x4a280180, 0xa);
                    arg6 += 2;
                    int16_t es;
                    *(arg6 - 0x80) = es;
                    int32_t temp4_1 = *(arg1 - 0x7e066a42);
                    *(arg1 - 0x7e066a42) &= arg1;
                    bool p_1 = /* bool p_1 = unimplemented  {and dword [eax-0x7e066a42], eax} */;
                    bool z_2 = !(temp4_1 & arg1);
                    
                    if (p_1)
                    {
                        while (!z_2)
                        {
                            *arg3;
                            *arg3 |= 0xe9;
                            bool c_2 = false;
                            
                            while (true)
                            {
                                arg1 = __in_al_dx(arg2, eflags);
                                int16_t temp0_4 = __fbst(/* int16_t temp0_4 =
                                    __fbst(unimplemented  {fbstp tword [fs:ebp-0x1f], st0}) */);
                                int32_t fsbase;
                                *(fsbase + arg4 - 0x1f) = temp0_4;
                                /* unimplemented  {fbstp tword [fs:ebp-0x1f], st0} */
                                top += 1;
                                
                                if (c_2)
                                {
                                    __out_dx_oeax(arg2, arg1, eflags);
                                    goto label_11dbd;
                                }
                                
                                *(arg1 - 0x7e3c66ff) += arg1;
                                int32_t temp12_1 = *(arg1 - 0xcde7fff);
                                *(arg1 - 0xcde7fff) |= arg1;
                                z_2 = !(temp12_1 | arg1);
                                
                                if (z_2)
                                {
                                    while (!z_2)
                                    {
                                        int32_t temp17_1 = *arg3;
                                        *arg3 |= 0x21800180;
                                        z_2 = !(temp17_1 | 0x21800180);
                                        
                                        if (!z_2)
                                            goto label_11dc0;
                                    }
                                    
                                    break;
                                }
                                
                                label_11dc0:
                                *(esp - 4) = 0xffffff80;
                                esp -= 4;
                                int32_t temp13_1 = *0xe9098254;
                                *0xe9098254 += arg6;
                                c_2 = temp13_1 + arg6 < temp13_1;
                            }
                        }
                        
                        *(arg3 + 0x55) += arg1;
                        *arg3 |= 0x54;
                        *(esp - 4) = es;
                        *arg3 &= 0x18;
                        int32_t temp11_1 = *(arg2 - 0x2daa24f7) & 0xdd44c340;
                        cond:0 = !temp11_1;
                        cond:3_1 = temp11_1 < 0;
                        arg2 = *(esp - 4);
                        
                        if (d)
                        {
                            *arg6 = *arg5;
                            arg6 -= 4;
                            arg5 -= 4;
                        }
                        else
                        {
                            *arg6 = *arg5;
                            arg6 += 4;
                            arg5 += 4;
                        }
                        
                        if (temp11_1 < 0)
                            break;
                    }
                    else
                    {
                        arg1 = __salc(eflags);
                        *0x4a280184;
                        esp = 0x4a280186;
                        arg2 = 0x1f;
                        int32_t* temp7_1 = arg3;
                        arg3 = temp7_1 - 0x2e8bd680;
                        z_3 = !(temp7_1 - 0x2e8bd680);
                        bool o_1 = /* bool o_1 = unimplemented  {adc ecx, 0xd1742980} */;
                        
                        if (o_1)
                        {
                            *arg1[1] = 0x82;
                            continue;
                        }
                        else
                        {
                            arg1 = 0xb4;
                            *(arg6 - 0x74) += 0x47;
                            void* const edx = 0x94be80b0;
                            int32_t temp8 = *0x94be8033 + 0x2aa57e07;
                            *0x94be8033 = temp8;
                            bool cond:2 = temp8 < 0;
                            *0x4a280186;
                            int16_t* esp_3 = 0x4a280188;
                            char* ecx;
                            int16_t* esp_5;
                            bool cond:4_1;
                            
                            while (true)
                            {
                                void* edi_1;
                                
                                if (d)
                                {
                                    *arg6 = arg1;
                                    edi_1 = arg6 - 1;
                                }
                                else
                                {
                                    *arg6 = arg1;
                                    edi_1 = arg6 + 1;
                                }
                                
                                *esp_3;
                                
                                if (cond:2)
                                {
                                    *(edx - 0x6c);
                                    /* undefined */
                                }
                                
                                *(arg5 + 0x1a81f983);
                                esp_3[1];
                                *0x90d07a1f = 0xbc;
                                *0x2d82d186 -= 0x2d83d18f;
                                *(arg4 * 2 - 0x1e5f2f54) = ROLD(*(arg4 * 2 - 0x1e5f2f54), 1);
                                arg6 = 0xffff83bc;
                                ecx = arg3 - 1;
                                *0x4784b48c = edi_1 + 1;
                                esp_5 = 0x4784b48c;
                                arg1 = (edi_1 + 1) - 1;
                                bool c_3 = /* bool c_3 = unimplemented  {sbb al, 0x1} */;
                                *0xf9414895 = RRCB(*0xf9414895, 0x1c, c_3);
                                *(ecx * 3 - 0x39a0e80) += edx;
                                arg1 = *0x504991e1;
                                *ecx;
                                *ecx &= arg1;
                                *0xf941488f = RRCB(*0xf941488f, 0x20, false);
                                int32_t temp16_1 = *0x9ef10405;
                                *0x9ef10405 = &ecx[*0x9ef10405];
                                cond:4_1 = temp16_1 == -(ecx);
                                label_11ecc:
                                int16_t temp0_10 = arg4;
                                arg4 = arg1;
                                arg1 = temp0_10;
                                arg3 = ecx - 1;
                                
                                if (!cond:4_1 && !arg3)
                                    break;
                                
                                arg3[edx * 2 + 0x1c] -= arg5;
                                *(arg6 - 0x46) = es;
                                arg1 = 0x80;
                                arg5 = 0x5a81f994;
                                cond:2 = arg3 + 0x7f < 0;
                                edx = *0x4783b4b0;
                                esp_3 = 0x4783b4b4;
                                char temp0_8;
                                char temp1_2;
                                temp0_8 = __aad_immb(0x1f, 0x80, *arg1[1]);
                                arg1 = temp0_8;
                                *arg1[1] = temp1_2;
                            }
                            
                            void* ecx_1 = arg3 - 1;
                            *(esp_5 - 4) = arg1;
                            esp_5 -= 4;
                            bool c_4 = true;
                            label_11ed2:
                            arg1 = arg1 - 1;
                            bool c_5 = /* bool c_5 = unimplemented  {sbb al, 0x1} */;
                            *0xf941488a = RRCB(*0xf941488a, 0x1c, c_5);
                            *(ecx_1 + 0x4ff18049) += ecx_1;
                            *arg1[1] = ecx_1;
                            char temp0_11 = *(ecx_1 + 0x50);
                            *(ecx_1 + 0x50) = ecx_1;
                            ecx_1 = temp0_11;
                            bool c_6 = true;
                            
                            while (true)
                            {
                                arg1 = arg1 - 1;
                                bool c_7 = /* bool c_7 = unimplemented  {sbb al, 0x1} */;
                                *0xf9414884 = RRCB(*0xf9414884, 0x1c, c_7);
                                *(ecx_1 * 3 - 0x3b00e80) += arg1;
                                
                                while (true)
                                {
                                    *(arg5 - 0x436f4180);
                                    *(arg1 + 0x4a) += arg1;
                                    *ecx_1 &= 0xf6;
                                    *(arg1 - 0x7b4b6fdf);
                                    arg6 += 1;
                                    void* eax_1;
                                    eax_1 = *0xc3298c79;
                                    *(arg6 - 0x17) = RRCD(*(arg6 - 0x17), ecx_1, 
                                        arg1 + *(arg1 - 0x7b4b6fdf) < arg1);
                                    ecx_1 ^= 0x86;
                                    ebx |= *(arg6 - 0x4cd056ec);
                                    *(edx - 0x7ec35bef);
                                    *(arg5 + 0x1bf18649) &= ebx;
                                    *edx[1] = 0xe1;
                                    char temp22_1 = *eax_1;
                                    bool p_2 = /* bool p_2 =
                                        unimplemented  {test byte [eax], ah} */;
                                    bool a_1 = /* undefined */;
                                    *(esp_5 - 4) = 0x400 | ((temp22_1 & *eax_1[1]) < 0 ? 1 : 0) << 7
                                        | (!(temp22_1 & *eax_1[1]) ? 1 : 0) << 6
                                        | (a_1 ? 1 : 0) << 4 | (p_2 ? 1 : 0) << 2;
                                    void* ecx_2;
                                    ecx_2 = 0xe1;
                                    *edx[1] = (ecx_1 - 1);
                                    int16_t ss;
                                    *(esp_5 - 8) = ss;
                                    esp_5 -= 8;
                                    d = true;
                                    ecx_2 = 0xe1;
                                    int16_t fs;
                                    *eax_1 = fs;
                                    edx = HIGHD(eax_1);
                                    arg1 = LOWD(eax_1);
                                    void* ecx_3;
                                    ecx_3 = *edx[1];
                                    *edx[1] = (ecx_2 - 1);
                                    arg4 = arg4 + arg6;
                                    arg1 = *arg5;
                                    arg5 -= 1;
                                    
                                    if (!arg4 || ecx_3 != 1)
                                    {
                                        ecx = (ecx_3 - 2) ^ 0x9e;
                                        cond:4_1 = !ecx;
                                        goto label_11ecc;
                                    }
                                    
                                    *(arg6 + 0xcf18649) &= edx;
                                    int32_t temp23_1 = *arg5;
                                    int32_t temp24_1 = *arg6;
                                    c_4 = temp23_1 < temp24_1;
                                    arg5 -= 4;
                                    arg6 -= 4;
                                    ecx_1 = ecx_3 - 2;
                                    
                                    if (temp23_1 == temp24_1 || ecx_1)
                                        goto label_11ed2;
                                    
                                    *(ecx_1 * 3 - 0x2f80e7a) &= edx;
                                    *0x922088e1 = arg1;
                                    void* ecx_5;
                                    ecx_5 = *edx[1];
                                    *edx[1] = (ecx_1 - 1);
                                    *ebx[1] += *ecx_5[1];
                                    int16_t temp0_15 = *esp_5;
                                    esp_5 = &esp_5[2];
                                    c_6 = TEST_BITD(temp0_15, 0);
                                    ecx_1 = ecx_5 - 1;
                                    
                                    if (TEST_BITD(temp0_15, 6) || ecx_1)
                                        break;
                                    
                                    char temp25_1 = *(arg6 - 0x20e79b7) & ecx_1;
                                    *(arg6 - 0x20e79b7) = temp25_1;
                                    arg1 = arg1;
                                    
                                    if (!temp25_1 || ecx_1 != 1)
                                    {
                                        arg1 = arg1 - 1;
                                        *(ecx_1 - 0x80);
                                    }
                                    else
                                    {
                                        char temp26_1 = *(arg4 - 0x70e79b7) & (ecx_1 - 1);
                                        *(arg4 - 0x70e79b7) = temp26_1;
                                        int16_t temp0_16 = ebx;
                                        ebx = arg1;
                                        arg1 = temp0_16;
                                        ecx_1 -= 2;
                                        
                                        if (temp26_1 && !ecx_1)
                                        {
                                            *(edx - 0xc0e79b7) &= ecx_1;
                                            *arg1[1] = *arg1;
                                            *(ecx_1 - 0x7a) = ecx_1;
                                            __int1();
                                            __out_dx_al(edx, arg1, eflags);
                                            *arg1;
                                            *(esp_5 - 0x7a);
                                            __int1();
                                            /* jump -> 0x90e2a48e */
                                        }
                                    }
                                    
                                    __int1();
                                    arg6 -= 1;
                                }
                            }
                        }
                    }
                }
                arg1 &= 0xe4;
                arg1 = *0xee68e14c;
                arg6 &= arg2;
                goto label_11e0d;
            }
        }
        else
        {
            int16_t cs;
            *(esp - 4) = cs;
            esp -= 4;
            int32_t temp2_1 = *arg3 | 0x2180018c;
            *arg3 = temp2_1;
            cond:0 = !temp2_1;
            cond:3_1 = temp2_1 < 0;
            __out_dx_oeax(arg2, arg1, eflags);
            label_11da5:
            int16_t temp0_1;
            temp0_1 = __insd(arg6, arg2, eflags);
            *arg6 = temp0_1;
            arg1 = __in_oeax_immb(0x65, eflags);
            int16_t temp0_2 = __fbst(/* int16_t temp0_2 =
                __fbst(unimplemented  {fbstp tword [ebp-0x1f], st0}) */);
            *(arg4 - 0x1f) = temp0_2;
            /* unimplemented  {fbstp tword [ebp-0x1f], st0} */
            top += 1;
        }
        
        if (!cond:3_1)
            break;
    }
    
    *(arg1 - 0x7df076ff) += arg1;
    int32_t temp5_1 = *(arg3 + arg1 + 0x64f32180) | arg2;
    *(arg3 + arg1 + 0x64f32180) = temp5_1;
    
    if (temp5_1 > 0)
    {
        int32_t i;
        
        do
        {
            *(arg3 - 0x6bf67df1) += arg3;
            i = *(arg1 - 0xd9b0cdf);
            *(arg1 - 0xd9b0cdf) += arg1;
        } while (i != -(arg1) && i + arg1 >= i);
    }
    
    label_11dbd:
    *esp;
    trap(0xd);
}

void* sub_12fc2(int32_t* arg1 @ ebp, int32_t arg2 @ esi, void* arg3 @ edi)
{
    void* var_4 = arg3;
    int32_t* esp_1 = &var_4;
    void* ecx;
    *ecx[1] = 0xb8;
    int32_t* eax;
    *eax[1] = 0x84;
    void* edi = arg3 + 1;
    eax = *0x96298579;
    *(eax - 0x6cd67987) <<= 1;
    *(eax - 0x6fd67887) <<= 1;
    bool p_1;
    
    do
    {
        *(eax - 0x37b771dd);
        *(eax - 0x37b771dd) = ROLD(*(eax - 0x37b771dd), 1);
        p_1 = /* p_1 = unimplemented  {rol dword [eax-0x37b771dd], sub_0+1} */;
        *esp_1;
        esp_1 += 2;
    } while (p_1);
    void* edx = *esp_1;
    *(arg1 - 0x7fde7eb9) += 1;
    eax &= *(edx - 0x7fb856b9);
    int32_t* ecx_1;
    ecx_1 = *(eax - 0x7b);
    __int1();
    int32_t ebp = *arg1;
    *ecx_1;
    void* eax_1;
    eax_1 = *0x87e18c71;
    void* ecx_2;
    int32_t* ebx;
    ecx_2 = (ecx_1 - 1) + *ebx[1];
    edx = 1;
    *(eax_1 + 0x298779a0) <<= 0x82;
    int32_t temp3 = *(eax_1 + 0x79);
    *(eax_1 + 0x79) <<= 1;
    *0x47a07160 = RRCB(*0x47a07160, 0x7f, temp3 & 0x80000000);
    int32_t esp_3 = 0xb557c66e;
    void* eax_2;
    
    if ((*(ecx_2 - 4) & 0xb8) >= 0)
    {
        *ecx_2 &= 0x80;
        eax_2 = eax_1 & *(edx + 0x71);
        int32_t temp4_1 = *(ecx_2 + 2);
        *(ecx_2 + 2) += arg2;
        
        if (temp4_1 + arg2 >= 0)
            goto label_1306b;
        
        /* undefined */
    }
    
    while (true)
    {
        *(ecx_2 + 0x180bcb0);
        *(esp_3 - 4) = esp_3;
        int16_t es;
        *(esp_3 - 8) = es;
        esp_3 -= 8;
        *ecx_2 &= 0xf0;
        *ecx_2 &= 0x98;
        int32_t edx_3 = (edx ^ edi) - 2;
        *ecx_2 &= 0x90;
        *eax_1[1] = 6;
        ecx_2 = 0x84;
        edi += 1;
        eax_1 = *0x80b81879;
        *(ecx_2 - 0x7d17b2de) &= eax_1;
        *(ecx_2 + (edx_3 << 2) - 0x17b26e7b) ^= eax_1;
        char temp5_1 = *ecx_2 ^ 0x20;
        *ecx_2 = temp5_1;
        
        if (temp5_1 < 0)
            return eax_1 - 1;
        
        *(ecx_2 - 0x81) -= 0x20;
        *ebx &= 0x1381e84d;
        ebp -= 1;
        void* eax_3;
        void* ecx_4;
        eax_3 = 0x478c41df();
        eax_3 = *(edi - 0x80);
        *eax_3;
        void* ecx_5 = *(ecx_4 - 0x7b);
        __int1();
        eax_2 = eax_3 + 1;
        int32_t eflags = __cli(eflags);
        *(ecx_5 - 0x80) = ecx_5;
        label_1306b:
        *(eax_2 + 0x4d238120);
        eax_1 = 0x478c41fd();
        eax_1 = *(edi - 0x80);
        *eax_1;
        *(ecx_2 - 0x7b);
        __int1();
    }
}

int32_t sub_13030() __pure
{
    return;
}

int32_t __convention("regparm") sub_130d9(void* arg1, void* arg2, int32_t arg3, int32_t* arg4 @ ebp, int32_t arg5 @ esi, int32_t arg6 @ edi)
{
    *(arg3 - 0x81) -= 0x20;
    int16_t cs;
    *(arg2 - 0x1c) = cs;
    int32_t ebp = *arg4;
    *(arg2 - 0x77) = arg1;
    *(arg1 - 0x7eb87cdf) = ROLD(*(arg1 - 0x7eb87cdf), 1);
    void* eax = arg1 & *(arg6 - 0x7fc71bb8);
    void* temp0_1 = *(eax - 0x7b);
    *(eax - 0x7b) = eax;
    __int1();
    int32_t eflags;
    __cli(eflags);
    char temp0_2 = *(temp0_1 - 0x80);
    *(temp0_1 - 0x80) = temp0_1;
    void* ecx_3;
    ecx_3 = temp0_2;
    int32_t esp_1 = *(arg3 + 1) * 0x7f47a061;
    char temp0_3 = *(ecx_3 + 0x180bc90);
    *(ecx_3 + 0x180bc90) = *arg2[1];
    *arg2[1] = temp0_3;
    *(esp_1 - 4) = ebp;
    /* undefined */
}

int32_t __convention("fastcall") sub_13116(char* arg1, void* arg2, int32_t arg3 @ esi, void* arg4 @ edi)
{
    *arg1 &= 0x54;
    int16_t es;
    uint32_t var_4 = es;
    *arg1 &= 0xb8;
    void* eax;
    *eax[1] = 0x84;
    void* edi = arg4 + 1;
    
    if (arg4 == 0xffffffff || arg1 == 1)
    {
        *(arg1 - 1) -= 0x2982d186;
        void* ebx;
        *(ebx - 0x7b2e62d7) = ROLD(*(ebx - 0x7b2e62d7), 1);
        *(edi - 0x7e1e5930) -= arg3;
        void* temp3 = *(arg2 + 0x20918071) & &var_4;
        *(arg2 + 0x20918071) = temp3;
        
        if (temp3 >= 0)
        {
            void* eax_1;
            eax_1 = 0x8e;
            int32_t* ebp;
            /* tailcall */
            return sub_130d9(eax_1, eax, arg1 - 1, ebp, arg3, edi);
        }
        
        *(arg1 - 1) += ebx - 1;
        /* undefined */
    }
    
    while (true)
    {
        void* temp2_1 = edi;
        edi += 1;
        
        if (temp2_1 <= 0xffffffff)
            break;
        
        int32_t eflags = __cli(eflags);
        *(arg1 - 0x61) &= edi;
    }
    
    *arg2[1] s>>= 0x80;
    *(arg1 - 1) += 0x55;
    /* undefined */
}

int32_t __convention("fastcall") sub_131ae(char* arg1)
{
    *arg1 &= 0x2c;
    /* undefined */
}

int32_t sub_13249()
{
    /* undefined */
}

void* __convention("fastcall") sub_13278(int32_t* arg1, int32_t arg2, void* arg3 @ ebp, int32_t* arg4 @ esi, void* arg5 @ edi)
{
    bool c;
    *(arg1 + 0x41a0f9d1) = *(arg1 + 0x41a0f9d1) + 0x74;
    void* eax;
    eax = *0x16f67e47;
    int32_t ebx;
    *(eax - 0x1990de71) = *ebx[1];
    arg1[-0x199e679f];
    arg1 ^= 0x7e;
    int32_t temp3 = *(arg4 - 0x7865f6f);
    *(arg4 - 0x7865f6f) += eax;
    bool cond:0 = temp3 + eax >= 0;
    eax = 0xe0;
    
    if (cond:0)
        /* undefined */
    
    char temp2 = *(arg2 + (arg5 << 3) - 0xe78b879);
    eax = 0x21e0 / temp2;
    *eax[1] = 0x21e0 % temp2;
    *arg1 -= 0x66794740;
    eax = *0x84f187b0;
    *(eax + 0x59218ab0) += arg1;
    int32_t eflags;
    __out_immb_al(0x80, eax, eflags);
    *(arg5 - 0x1a) &= arg2;
    *arg1;
    *arg1 &= 0xa0;
    /* undefined */
}

void* __convention("regparm") sub_1331f(void* arg1, int32_t arg2, void* arg3, void* arg4 @ ebp, int32_t* arg5 @ esi, void* arg6 @ edi)
{
    bool z;
    bool s;
    bool o;
    
    do
    {
        char temp0_1 = *(arg6 - 0x5a);
        *(arg6 - 0x5a) = arg1;
        arg1 = temp0_1;
        arg1 = 0x1dcf084;
    } while (z || s != o);
    
    int32_t ebx;
    ebx = 0xf8;
    char temp0_2 = *(arg6 - 0x5a);
    *(arg6 - 0x5a) = 0x84;
    arg1 = temp0_2;
    int32_t eflags;
    char temp0_3;
    temp0_3 = __arpl_gpr16_gpr16(arg1, arg3);
    arg1 = temp0_3;
    void* temp1 = *(arg1 + 0x2071205c) & arg1;
    *(arg1 + 0x2071205c) = temp1;
    int32_t* __return_addr_1;
    
    if (temp1 >= 0)
    {
        __return_addr_1 = __return_addr;
        __out_immb_al(0x80, arg1, eflags);
        *(arg6 - 0x1a) &= arg2;
        *__return_addr_1;
        *__return_addr_1 &= 0xa0;
        /* undefined */
    }
    
    int32_t temp2_1 = *(arg3 + (arg2 << 3) + 0x29827920);
    *(arg3 + (arg2 << 3) + 0x29827920) -= arg1;
    __return_addr_1 = arg3 - 0x19ebde73;
    *(__return_addr_1 - 0x3a);
    *(__return_addr_1 - 0x3a) &= *ebx[1];
    int16_t* esp;
    int16_t ds;
    esp = __lds_gprz_memp(*__return_addr_1);
    *(arg1 - 0x80) = *(arg1 - 0x80) + 0x20;
    *(arg1 - 0x3e771f50) = 0xf8;
    *esp;
    __return_addr_1[-0x1e] = arg1;
    arg1 = 0x8d;
    *arg6 &= arg1;
    __out_immb_al(0x84, 0x8d, eflags);
    /* undefined */
}

int32_t __convention("regparm") sub_13379(char* arg1, int32_t arg2, char* arg3, void* arg4 @ ebp, void* arg5 @ esi, void* arg6 @ edi)
{
    *(arg5 - 0xa) += arg6;
    void* eax;
    eax = arg5 + *(arg6 + 0x3a);
    *arg1 |= 0x84;
    *(eax + (arg1 << 3) - 0x981fe28) = ROLB(*(eax + (arg1 << 3) - 0x981fe28), 1);
    *arg3 = 0x7e;
    arg3[0x3b4703f8];
    *arg1 |= 0x81;
    *(arg4 - 0x74191adf) = RORB(*(arg4 - 0x74191adf), 1);
    /* undefined */
}

int32_t __convention("regparm") sub_133ac(int32_t* arg1, void* arg2, char* arg3, void* arg4 @ ebp, char* arg5 @ esi, char* arg6 @ edi)
{
    int32_t* ecx = arg1;
    char* eax = arg3;
    int32_t temp1 = *(arg2 + 0x2998291);
    bool c;
    *(arg2 + 0x2998291) = temp1 + eax;
    bool c_1 = temp1 + eax < temp1 || (c && temp1 + eax == temp1);
    int32_t ebx;
    void* ebx_1 = ebx - 0x1925de73;
    *(ecx + 0x180ea2a) = *(ecx + 0x180ea2a) + 0x1f;
    bool o = /* bool o = unimplemented  {sbb byte [ecx+0x180ea2a], 0xe1} */;
    
    while (true)
    {
        *eax = *arg2[1];
        int32_t eflags = __cli(eflags);
        
        if (o)
            break;
        
        int32_t* temp4_1 = ecx;
        ecx += &*__return_addr[1];
        o = temp4_1 + &*__return_addr[1];
    }
    
    *arg5 |= 0x81;
    *(arg4 - 0x7f1930df) = RORB(*(arg4 - 0x7f1930df), 1);
    
    while (true)
    {
        eax &= 0xca;
        ecx -= 1;
        *(eax * 5 - 0x27) += eax;
        int32_t temp5_1 = *(arg6 + (ecx << 3)) & 0xfffffff7;
        *(arg6 + (ecx << 3)) = temp5_1;
        
        if (!temp5_1)
            break;
        
        if (temp5_1 > 0)
        {
            __int1();
            *ecx -= 0x157e979f;
            *eax = ROLD(*eax, 0x80);
            /* undefined */
        }
    }
    
    *(eax * 5 - 0x27) += eax;
    char temp6 = *(eax * 9) & 0xf7;
    *(eax * 9) = temp6;
    int32_t var_22;
    char* var_1f;
    void* var_f;
    
    if (temp6)
    {
        char temp7_1 = eax[0x8101d1ea];
        eax[0x8101d1ea] += eax;
        int32_t* eax_4 = *0x8099816b;
        
        if (temp7_1 > -(eax))
        {
            int32_t* var_3_1 = eax_4;
            char* var_7_1 = eax;
            void* var_b_1 = arg2;
            var_f = ebx_1;
            void** var_13_1 = &var_f;
            void* var_17_1 = arg4;
            char* var_1b_1 = arg5;
            var_1f = arg6;
            *eax += *eax_4[1];
            eax_4 = *0xad2c8370;
            eax_4[arg5 * 2 - 0x2607f86];
            eax_4[arg5 * 2 - 0x2607f86] = ROLB(eax_4[arg5 * 2 - 0x2607f86], 1);
            bool c_7 = /* bool c_7 = unimplemented  {rol byte [eax+esi*8-0x981fe18], 0x1} */;
            char* ecx_2;
            ecx_2 = eax + *ebx_1[1];
            *ecx_2 -= 0xf089d0a7;
            *eax_4 -= 0xe7fb860;
            eax_4[-0x12431ee4] &= &*var_22[3];
            *(arg5 - 0xa) &= arg6;
            *ebx_1[1] += ecx_2;
            /* undefined */
        }
    }
    else
    {
        *(eax * 5 - 0x27) += eax;
        *((ecx << 2) + 0xbd218db8) &= 0x82f088e6;
        *(eax + 0x60) += &*__return_addr[1];
        *arg6 = *arg5;
        void* edi = &arg6[1];
        void* esi = &arg5[1];
        char* ecx_1 = eax;
        int32_t eax_1 = *ecx_1;
        *(ebx_1 - 0x7e) &= *eax_1[1];
        void* eax_2;
        int32_t edx;
        edx = HIGHD(eax_1);
        eax_2 = LOWD(eax_1);
        /* unimplemented  {enter sub_a0aa-0x65, 0x62} */
        
        while (true)
        {
            *(ebx_1 + (edx << 2)) -= 0xffffffd0;
            ecx_1 -= 1;
            
            if (ecx_1)
            {
                *(edx - 7);
                eax_2 = 0x8d;
                *(ecx_1 - 0x77775f1a) &= arg4;
                eax_2 = 0x8d;
                break;
            }
            
            if ((eax_2 & *edx[1]) > 0)
            {
                edx -= 1;
                *(eax_2 - 0x1956de73) = *edx[1];
                eax_2 = *0x8db08888;
                break;
            }
        }
        
        *(arg4 - 0x1b0f7b1a) &= &*__return_addr[2];
        *(esi - 0xa) += edi;
        int32_t var_3 = eax_2;
        int32_t var_7 = ecx_1;
        int32_t var_b = edx;
        var_f = ebx_1;
        int32_t var_13 = &*var_f[1];
        int32_t var_17 = arg4;
        int32_t var_1b = esi;
        var_1f = edi ^ ecx_1;
        int32_t eflags_1;
        int16_t temp0;
        temp0 = __arpl_memw_gpr16(*(eax_2 + 0x68), &*var_1f[1]);
        *(eax_2 + 0x68) = temp0;
        char temp10_1 = *ecx_1;
        *ecx_1 += eax_2;
        *(ecx_1 - 0x775f1e6c) = *(ecx_1 - 0x775f1e6c) + 0x218db888;
        int32_t eax_3 = eax_2;
        __out_immb_al(0x20, eax_3, eflags_1);
        *(eax_3 - 0x7d9c9fbb);
        arg5 = *(eax_3 - 0x7d9c9fbb) * 0x2c;
        bool c_4 = /* bool c_4 = unimplemented  {imul esi, dword [eax-0x7d9c9fbb], 0x2c} */;
        eax_3 = eax_3 + 0x60;
        var_22 = 0xe18701c0;
        eax_3 = *0x81f1807e;
        *(ecx_1 + 0x68) += &var_22;
        *ecx_1;
        *ecx_1 = ROLD(*ecx_1, 1);
        bool c_5 = /* bool c_5 = unimplemented  {rol dword [ecx], sub_0+1} */;
        *(ecx_1 - 0x667e945f) = *(ecx_1 - 0x667e945f) + 0x117ff380;
    }
    *arg5;
    *arg5 u>>= 1;
    /* undefined */
}

void __convention("regparm") sub_134c5(int32_t arg1, int32_t, int32_t arg3) __noreturn
{
    void* ebx;
    *(ebx - 0x77) |= (arg1 - 1);
    char var_9818e78[0x9818e78];
    esi;
    char temp0 = ROLB(var_9818e78[esi << 3], 1);
    var_9818e78[esi << 3] = temp0;
    
    if (temp0 && arg3 != 1)
        trap(0xd);
    
    *(arg1 - 0x7d) &= *(arg1 - 1)[1];
    trap(0xd);
}

int32_t __convention("fastcall") sub_13c05(int32_t arg1)
{
    int32_t eax;
    bool c;
    bool p;
    bool a;
    bool z;
    bool s;
    *eax[1] =
        (s ? 1 : 0) << 7 | (z ? 1 : 0) << 6 | (a ? 1 : 0) << 4 | (p ? 1 : 0) << 2 | (c ? 1 : 0);
    return eax + *(arg1 - 0x7dbeeee0);
}

int32_t __convention("regparm") sub_13c13(int32_t* arg1, int16_t arg2, int32_t arg3, void* arg4 @ ebp, uint16_t* arg5 @ esi, void* arg6 @ edi)
{
    bool c;
    arg2 = arg2 + arg1;
    *0x8046f011 = arg1;
    int32_t temp0 = *arg1;
    *arg1 += arg1;
    void* ecx = arg3 - 1;
    int32_t eflags;
    char* ebx;
    
    if (temp0 != -(arg1) && ecx)
    {
        *ebx &= 0x81;
        *(arg4 - 0xa) &= *ecx[1];
        char temp1_1 = *(arg6 + (arg1 << 1) - 0xe30b85f);
        *(arg6 + (arg1 << 1) - 0xe30b85f) += 1;
        
        if (temp1_1 > 0xff)
        {
            *(arg1 - 0x7f06620f) &= arg1;
            *(arg4 - 0x7fde47e0);
            __int1();
        }
        else
        {
            void* esi_5 = __outsb(arg2, *arg5, arg5, eflags);
            arg1 = arg1 * (&__return_addr)[arg6 * 2];
            *ebx &= 0x87;
            *(esi_5 - 0x4e0e7fdf) &= *arg1[1];
            *ebx &= 0x82;
            *(arg4 - 0x530e7fdf) &= *arg1[1];
            *ebx &= 0x82;
            *(arg6 - 0x580e7fdf) &= *arg1[1];
            label_13bd2:
            *ebx &= 0x82;
            *(ecx - 0x65d0e80) &= ebx;
            *ebx &= 0x85;
            *(ecx - 0x620e7fdf) &= ebx;
            *ebx &= 0x85;
            *(arg1 - 0x670e7fdf) &= *ebx[1];
        }
        
        *ebx &= 0x85;
        *(ecx - 0x6c0e7fdf) &= *ebx[1];
        *ebx &= 0x8a;
        *(arg6 - 0x710e7fdf) &= arg2;
        /* undefined */
    }
    
    if (temp0 == -(arg1) || ecx != 1)
    {
        ecx = (ecx - 1) ^ 0xa7;
        goto label_13bd2;
    }
    
    int32_t ecx_1;
    int32_t edx;
    edx = 0x47847c96();
    *0x47202680 &= 0xaa;
    *(ecx_1 - 0x81) -= 0xf5;
    char* var_10 = ebx;
    int32_t* var_14 = &var_10;
    char* ebx_1 = var_10;
    void* eax_1;
    *eax_1[1] = *(arg6 - 0x6a)[1] ^ *edx[1];
    void* var_4_1 = eax_1;
    void* var_8_1 = ecx_1 - 1;
    int32_t var_c_1 = edx;
    var_10 = ebx_1;
    int32_t* var_14_1 = &var_10;
    void* var_18_1 = arg4;
    uint16_t* var_1c_1 = arg5;
    void* var_20_1 = arg6 + 1;
    __outsb(edx, *arg5, arg5, eflags);
    int32_t eax_2;
    eax_2 = 0xe1;
    *(arg6 + 1) = *0x984f1cf;
    uint16_t* esi_2 = 0x984f1d3;
    *(ecx_1 - 0x82) -= 0xf5;
    void* var_28 = ecx_1 - 2;
    int16_t var_2c = edx;
    char* var_30 = ebx_1;
    int32_t* var_34 = &var_30;
    void* var_38 = arg4;
    void* var_40 = arg6 + 5;
    int32_t eax_3;
    *eax_3[1] = *eax_2[1] ^ *var_2c[1];
    __outsb(var_2c, *esi_2, esi_2, eflags);
    /* undefined */
}

int32_t __convention("regparm") sub_13d03(void* arg1, void* arg2, char* arg3, int32_t arg4 @ esi, int32_t arg5 @ edi)
{
    char temp0 = *arg2[1];
    int32_t ebx;
    *arg2[1] += *ebx[1];
    
    if (temp0 <= -(*ebx[1]))
    {
        *arg1[1] = *arg3[1];
        arg3 &= 0x83;
        *(arg1 - 0x60) -= 0xf5;
        arg3[0xffffff80] ^= 0x48;
        *(arg1 - 0x10) = *arg1[1];
        *(arg3 - 1) -= 0x80;
        *(arg2 - 0x7a4b4fbf) &= arg1;
        /* undefined */
    }
    
    *(arg3 - 0xa) &= arg5;
    arg3 <<= 0xa0;
    *(arg1 - 0x779f77b8) += ebx;
    *(arg1 - 0x40) -= 0xf1;
    *arg3 = ROLB(*arg3, 0x88);
    void* var_4 = arg1;
    char* var_8 = arg3;
    int32_t var_c = 0x6880499a;
    int32_t var_10 = ebx;
    int32_t* var_14 = &var_10;
    int32_t var_1c = 0xd44784f8;
    int32_t var_20 = arg5 + 1;
    /* undefined */
}

int32_t __convention("regparm") sub_13d25(void* arg1, int32_t arg2, char* arg3, int32_t arg4 @ edi)
{
    *(arg3 - 0xa) &= arg4;
    arg3 <<= 0xa0;
    int32_t ebx;
    *(arg1 - 0x779f77b8) += ebx;
    *(arg1 - 0x40) -= 0xf1;
    *arg3 = ROLB(*arg3, 0x88);
    void* var_4 = arg1;
    char* var_8 = arg3;
    int32_t var_c = 0x6880499a;
    int32_t var_10 = ebx;
    int32_t* var_14 = &var_10;
    int32_t var_1c = 0xd44784f8;
    int32_t var_20 = arg4 + 1;
    /* undefined */
}

int32_t __convention("regparm") sub_13edf(void* arg1, void* arg2, int32_t arg3 @ ebp, int32_t* arg4 @ esi, void* arg5 @ edi)
{
    int32_t* ecx;
    ecx = (*(arg1 + 0x79) * 0xfc09f672) ^ 0x95;
    *ecx;
    *ecx &= 0xf5cf71a0;
    int32_t eflags;
    int32_t eflags_1 = __cli(eflags);
    *(arg5 - 0x76de7e2f) -= arg1;
    char* ecx_2 = ecx + arg5;
    *arg5;
    int32_t temp3 = *(arg1 - 0x3f707fba);
    *(arg1 - 0x3f707fba) = &ecx_2[*(arg1 - 0x3f707fba)];
    void* eax_2 = arg1 - 1 - 0x498b8788;
    ecx_2[0xffffffa0];
    *ecx_2 &= 0x89;
    void* temp4_1;
    
    do
    {
        temp4_1 = eax_2;
        eax_2 -= 1;
        ecx_2[0xffffff87] = *arg2[1];
        __int1();
    } while (!(temp4_1 - 1));
    *ecx_2 &= 0xffffff8c;
    __int1();
    int32_t eflags_2;
    char temp0_1;
    temp0_1 = __das(eax_2, eflags_1);
    eax_2 = temp0_1;
    __out_immb_al(0x80, eax_2, eflags_2);
    void* var_80;
    void* var_80_1 = var_80 + arg5 + 1;
    *(ecx_2 + 0x7a1014d9) &= eax_2;
    *(eax_2 - 0x7ffe7fdf) += eax_2;
    *(eax_2 + 0x4a) += eax_2;
    *ecx_2 &= 0x18;
    *ecx_2 &= 0x90;
    *eax_2[1] = 0x84;
    /* undefined */
}

int32_t __convention("regparm") sub_13f37(int32_t* arg1, int32_t arg2, void** arg3, int32_t arg4 @ ebp, void* arg5 @ edi)
{
    *(arg5 + 0x49) = RORB(*(arg5 + 0x49), 1);
    *(arg3 - 0x7d);
    *arg1 &= 0xf184494c;
    arg1 |= 0xfd;
    *(arg2 - 0x80) = *(arg1 - 1)[1];
    *arg3 &= arg1 - 1;
    void* eax;
    *eax[1] = 1;
    *0x2d82d186 -= 0x2d83d1de;
    *(arg4 * 2 - 0x1f542f27) = ROLD(*(arg4 * 2 - 0x1f542f27), 1);
    *0x69804948 = eax;
    eax = *0x431dc000;
    void* eax_1;
    eax_1 = *0x80493f00;
    
    if (arg3 < 0)
    {
        *(arg3 * 3) s>>= 1;
        *(arg3 - 0x6f);
        *(arg4 + 1 - arg3);
        *(arg2 - 1) s>>= 1;
        *(arg3 - 0x72);
        int32_t* edx;
        edx = eax_1;
        *(arg3 - 1) &= 0xfd99f67d;
        /* undefined */
    }
    
    *arg3;
    *arg3 &= 0x80;
    *(arg3 - 0x7fb5d7bf) = *(arg3 - 0x7fb5d7bf) + eax_1;
    *(arg4 + 1 + eax_1 + 0x2d804180) &= arg5;
    arg3[-0x1c] -= 0x6fdc7e4c;
    *(arg2 - 0x5a0985b8) &= eax_1;
    arg3[-0x1c] += 0x504784b4;
    *(arg3 - 0x6e);
    /* undefined */
}

int32_t __convention("regparm") sub_13fe6(int32_t arg1, int16_t arg2, void* arg3, int32_t arg4 @ ebp, int32_t* arg5 @ esi, int32_t arg6 @ edi)
{
    int32_t eflags;
    int32_t eflags_3;
    char temp0_1;
    temp0_1 = __daa(arg1, eflags);
    arg1 = temp0_1;
    *(arg3 + 0x48) = arg4;
    void* ebx;
    
    if (arg1 - 1 >= 0)
    {
        *(arg3 - 0x80) = *arg2[1];
        arg5 = 0x4903e1d6;
        int32_t i_1 = arg1 - 2 + 0x60;
        bool cond:1_1 = !i_1;
        ebx = 0x70;
        char temp1_1 = i_1 % *0x4903e1d6;
        i_1 = i_1 / *0x4903e1d6;
        *i_1[1] = temp1_1;
        int32_t eflags_1;
        int32_t eip_1;
        eip_1 = __into(eflags_3);
        
        if (!cond:1_1 && arg3 == 1)
        {
            int32_t i;
            bool c_2;
            
            do
            {
                c_2 = *(arg3 - 0x79) < 0x29;
                i = i_1;
                i_1 = i - 0x60;
                arg6 += 1;
            } while (i - 0x60 < i || (c_2 && i - 0x60 == i));
            /* undefined */
        }
        
        int32_t temp4_1 = *(arg3 - 0x81);
        *(arg3 - 0x81) -= 1;
        
        if (temp4_1 - 1 < 0)
        {
            *(ebx + 0x7247a0d0) -= i_1;
            i_1 = i_1 * arg2;
            __sti(eflags_1);
            /* undefined */
        }
    }
    else
    {
        arg5[-0x1428c01];
        char* eax;
        *eax[1] = *(arg1 - 1);
        int32_t ebx_1 = ebx << 8;
        *(ebx_1 - 0x72063a0f) ^= eax;
        *(arg3 * 3) &= ebx_1;
    }
    *arg5;
    void* const* ecx;
    ecx = *arg2[1];
    trap(0xd);
}

int32_t __convention("regparm") sub_1408b(void* arg1, char* arg2, char* arg3, int32_t arg4 @ ebp, int32_t arg5 @ edi)
{
    void** ebx;
    ebx[0x1f4860b4] -= arg1;
    char temp2 = -(*arg2);
    *arg2 = temp2;
    int32_t eflags;
    int32_t eflags_1 = __cli(eflags);
    
    if (temp2 < 0)
    {
        ebx[0x1d51e834] -= arg1;
        char temp1_1 = arg1 % arg2[0xf3e1b6ff];
        arg1 = arg1 / arg2[0xf3e1b6ff];
        *arg1[1] = temp1_1;
        int32_t i;
        
        do
        {
            arg1 = arg1 - 0x60;
            i = arg5;
            arg5 += 1;
        } while (i == 0xffffffff);
        /* undefined */
    }
    
    while (true)
    {
        arg3 -= 1;
        arg1 = arg1 + 0x73;
        bool cond:1_1 = !arg1;
        bool cond:2_1 = arg1 >= 0;
        bool cond:3_1 = !arg1;
        bool cond:6_1 = !arg1;
        char temp1_2 = arg1 % *0x8049f7dd;
        arg1 = arg1 / *0x8049f7dd;
        *arg1[1] = temp1_2;
        
        while (true)
        {
            arg1 = __in_al_dx(arg2, eflags_1);
            char esp;
            
            if (cond:6_1 || arg3 != 1)
            {
                arg3 -= 2;
                
                if (cond:1_1 || arg3)
                {
                    if (!cond:2_1)
                    {
                        int32_t temp6_1 = *(arg2 + 0x7ef673d0);
                        *(arg2 + 0x7ef673d0) -= arg1;
                        cond:1_1 = temp6_1 == arg1;
                        cond:2_1 = temp6_1 - arg1 >= 0;
                        cond:3_1 = temp6_1 == arg1;
                        cond:6_1 = temp6_1 == arg1;
                        continue;
                    }
                    
                    arg1 ^= 0x48;
                    *(arg3 + 0x48) = arg4;
                    
                    if (arg1 >= 0)
                    {
                        *arg3 += arg2;
                        break;
                    }
                    
                    char temp8 = arg1;
                    char temp9 = *(arg1 + 0x322185fc);
                    arg1 = arg1 * *(arg1 + 0x322185fc);
                    arg3[0xffffffcf] = *arg2[1];
                    __cli(eflags_1);
                    
                    if ((temp8 * temp9) >> 8 ^ 1)
                    {
                        arg3 &= (arg1 - 1);
                        *arg3 |= *arg2[1];
                        void* ecx_5 = arg3 ^ 0xffffffdc;
                        *(ecx_5 - 0x7c) -= ecx_5;
                        __int1();
                        /* undefined */
                    }
                    
                    __bound_gprv_mema32(arg1 - 1, *(arg3 - 0x4b06fedf));
                    *(arg3 - 0x7d2e79d3) += arg1 - 1;
                    *(arg4 * 2 - 0x1f542f27) = ROLD(*(arg4 * 2 - 0x1f542f27), 1);
                    void* var_4_1 = arg1 - 0x2d83d1df;
                    void* eax;
                    eax = *0x431dc000;
                    void* eax_1;
                    eax_1 = *0x80493f00;
                    
                    if (arg3 < 0)
                    {
                        *(arg3 * 3) s>>= 1;
                        arg3[0xffffff91];
                        *(arg4 + 1 - arg3);
                        *arg2 s>>= 1;
                        arg3[0xffffff8e];
                        arg2 = eax_1;
                        *(arg3 - 1) &= 0xfd99f67d;
                        /* undefined */
                    }
                    
                    *arg3;
                    *arg3 &= 0x80;
                    *(arg3 - 0x7fb5d7bf) = *(arg3 - 0x7fb5d7bf) + eax_1;
                    *(arg4 + 1 + eax_1 + 0x2d804180) &= arg5;
                    *(arg3 - 0x70) -= 0x6fdc7e4c;
                    arg2[0xa5f67a49] &= eax_1;
                    *(arg3 - 0x70) += 0x504784b4;
                    arg3[0xffffff92];
                    /* undefined */
                }
            }
            else
            {
                arg3 -= 2;
                arg3[0xffffff8d];
                cond:3_1 = !(arg1 & arg2);
                void* var_4_2 = arg1;
                char* var_8_1 = arg3;
                char* var_c_1 = arg2;
                void** var_10 = ebx;
                void** var_14_1 = &var_10;
                int32_t var_18_1 = arg4;
                int32_t var_1c_1 = 0x8049f7e1;
                int32_t var_20 = arg5;
                esp = &var_20;
                ebx = 0x7d;
                arg1 = arg1 * arg2[0xe4e1e4fe];
            }
            
            void* ecx_8 = arg3 - 1;
            int32_t eax_4;
            
            if (cond:3_1 || ecx_8)
            {
                eax_4 = arg1 - 0x7d;
                *ebx &= ecx_8;
            }
            else
            {
                ecx_8 -= 1;
                *(ecx_8 - 0x7d);
                arg1 = arg2;
                eax_4 = arg1 | 0x81798049;
                ebx[0x2c860f4] -= eax_4;
            }
            
            *(ecx_8 - 0x80) = *arg2[1];
            int32_t i_2 = eax_4 - 1 + 0x60;
            bool cond:4 = !i_2;
            ebx = 0x70;
            char temp1_3 = i_2 % *0x4903e1d6;
            i_2 = i_2 / *0x4903e1d6;
            *i_2[1] = temp1_3;
            int32_t eflags_3;
            int32_t eip_1;
            eip_1 = __into(eflags_1);
            
            if (!cond:4 && ecx_8 == 1)
            {
                int32_t i_1;
                bool c_7;
                
                do
                {
                    c_7 = *(ecx_8 - 0x79) < 0x29;
                    i_1 = i_2;
                    i_2 = i_1 - 0x60;
                    arg5 += 1;
                } while (i_1 - 0x60 < i_1 || (c_7 && i_1 - 0x60 == i_1));
                /* undefined */
            }
            
            int32_t temp12 = *(ecx_8 - 0x81);
            *(ecx_8 - 0x81) -= 1;
            
            if (temp12 - 1 >= 0)
            {
                *0x4903e1d6;
                *arg2[1] = esp;
                trap(0xd);
            }
            
            ebx[0x1c91e834] -= i_2;
            i_2 = i_2 * arg2;
            __sti(eflags_3);
            /* undefined */
        }
    }
}

int32_t __convention("regparm") sub_14140(int32_t* arg1, int32_t* arg2, void* arg3, void* arg4 @ ebp, char* arg5 @ edi, long double arg6 @ st0, long double arg7 @ st1, long double arg8 @ st2)
{
    char* esi = 0x8049cce1;
    bool s;
    int32_t eflags;
    void* ecx;
    int32_t* ebx;
    int32_t* esp;
    void* i_4;
    
    if (!s)
    {
        __out_immb_oeax(0x49, arg1, eflags);
        void* ecx_22;
        
        while (true)
        {
            char* eax_7 = arg1 - 0x60;
            i_4 = &arg5[1];
            arg3 ^= 0x66;
            char temp0_11 = esi;
            esi = eax_7;
            arg1 = temp0_11;
            ecx_22 = arg3 - 1;
            
            if (arg3 && !ecx_22)
                break;
            
            *ecx_22;
            bool c_19 = false;
            
            while (true)
            {
                arg1 = arg1 - 0x60;
                arg5 = i_4 + 1;
                
                if (!TEST_BITB(*arg1[1], 6) && ecx_22 == 1)
                {
                    arg3 = ecx_22 - 2;
                    break;
                }
                
                arg1 = *0x2ef67147;
                bool cond:1_1 = *esi == *arg5;
                esi = &esi[1];
                i_4 = &arg5[1];
                
                if (cond:1_1 || ecx_22 != 2)
                    goto label_140b2;
                
                ecx_22 -= 3;
                c_19 = *(ecx_22 - 0x7b) < 0x29;
            }
        }
        
        void* i_5;
        int32_t* temp8_1;
        bool c_21;
        
        do
        {
            c_21 = *(ecx_22 - 0x76) < 0x29;
            temp8_1 = arg1;
            arg1 = temp8_1 - 0x60;
            i_5 = i_4;
            i_4 += 1;
        } while (i_5 != 0xffffffff && temp8_1 - 0x60 >= temp8_1
            && (!c_21 || temp8_1 - 0x60 != temp8_1));
        int32_t eflags_6;
        int32_t eip_3;
        eip_3 = __into(eflags);
        *(ecx_22 - 0x81) = arg6;
        void* ecx_14;
        bool cond:6_1;
        
        if (i_5 + 1 >= 0)
        {
            ecx_14 = ecx_22 - 2;
            arg1 = arg1 - 0x7e;
            *(arg4 - 0xa);
            *(arg4 - 0xa) &= i_4;
            *ebx[1] = *ebx[1] - arg2;
            cond:6_1 = *ebx[1] >= 0;
            label_14099:
            
            if (!cond:6_1)
            {
                ebx[0x1d51e834] -= arg1;
                char temp1_5 = arg1 % *(arg2 - 0xc1e4901);
                arg1 = arg1 / *(arg2 - 0xc1e4901);
                *arg1[1] = temp1_5;
                ecx = ecx_14 - 1;
                goto label_140a8;
            }
            
            while (true)
            {
                ecx_14 -= 1;
                arg1 = arg1 + 0x73;
                bool cond:7_1 = !arg1;
                bool cond:8_1 = arg1 >= 0;
                bool cond:9_1 = !arg1;
                bool cond:13_1 = !arg1;
                char temp1_3 = arg1 % *0x8049f7dd;
                arg1 = arg1 / *0x8049f7dd;
                *arg1[1] = temp1_3;
                
                while (true)
                {
                    arg1 = __in_al_dx(arg2, eflags_6);
                    
                    if (cond:13_1 || ecx_14 != 1)
                    {
                        ecx_14 -= 2;
                        
                        if (cond:7_1 || ecx_14)
                        {
                            if (!cond:8_1)
                            {
                                int32_t temp25_1 = arg2[0x1fbd9cf4];
                                arg2[0x1fbd9cf4] -= arg1;
                                cond:7_1 = temp25_1 == arg1;
                                cond:8_1 = temp25_1 - arg1 >= 0;
                                cond:9_1 = temp25_1 == arg1;
                                cond:13_1 = temp25_1 == arg1;
                                continue;
                            }
                            
                            arg1 ^= 0x48;
                            *(ecx_14 + 0x48) = arg4;
                            
                            if (arg1 >= 0)
                            {
                                *ecx_14 += arg2;
                                break;
                            }
                            
                            char temp27 = arg1;
                            char temp28 = arg1[0xc88617f];
                            arg1 = arg1 * arg1[0xc88617f];
                            *(ecx_14 - 0x31) = *arg2[1];
                            __cli(eflags_6);
                            
                            if ((temp27 * temp28) >> 8 ^ 1)
                            {
                                ecx_14 &= (arg1 - 1);
                                *ecx_14 |= *arg2[1];
                                void* ecx_15 = ecx_14 ^ 0xffffffdc;
                                *(ecx_15 - 0x7c) -= ecx_15;
                                __int1();
                                /* undefined */
                            }
                            
                            __bound_gprv_mema32(arg1 - 1, *(ecx_14 - 0x4b06fedf));
                            *(ecx_14 - 0x7d2e79d3) += arg1 - 1;
                            *(arg4 * 2 - 0x1f542f27) = ROLD(*(arg4 * 2 - 0x1f542f27), 1);
                            *(esp - 4) = arg1 - 0x2d83d1df;
                            void* eax_1;
                            eax_1 = *0x431dc000;
                            void* eax_2;
                            eax_2 = *0x80493f00;
                            
                            if (ecx_14 < 0)
                            {
                                *(ecx_14 * 3) s>>= 1;
                                *(ecx_14 - 0x6f);
                                *(arg4 + 1 - ecx_14);
                                *arg2 s>>= 1;
                                *(ecx_14 - 0x72);
                                arg2 = eax_2;
                                *(ecx_14 - 1) &= 0xfd99f67d;
                                /* undefined */
                            }
                            
                            *ecx_14;
                            *ecx_14 &= 0x80;
                            *(ecx_14 - 0x7fb5d7bf) = *(ecx_14 - 0x7fb5d7bf) + eax_2;
                            *(arg4 + 1 + eax_2 + 0x2d804180) &= i_4;
                            *(ecx_14 - 0x70) -= 0x6fdc7e4c;
                            *(arg2 - 0x5a0985b7) &= eax_2;
                            *(ecx_14 - 0x70) += 0x504784b4;
                            *(ecx_14 - 0x6e);
                            /* undefined */
                        }
                    }
                    else
                    {
                        ecx_14 -= 2;
                        *(ecx_14 - 0x73);
                        cond:9_1 = !(arg1 & arg2);
                        *(esp - 4) = arg1;
                        *(esp - 8) = ecx_14;
                        *(esp - 0xc) = arg2;
                        *(esp - 0x10) = ebx;
                        *(esp - 0x14) = esp - 0x10;
                        *(esp - 0x18) = arg4;
                        *(esp - 0x1c) = 0x8049f7e1;
                        *(esp - 0x20) = i_4;
                        esp -= 0x20;
                        ebx = 0x7d;
                        arg1 = arg1 * *(arg2 - 0x1b1e1b02);
                    }
                    
                    void* ecx_18 = ecx_14 - 1;
                    int32_t eax_5;
                    
                    if (cond:9_1 || ecx_18)
                    {
                        eax_5 = arg1 - 0x7d;
                        *ebx &= ecx_18;
                    }
                    else
                    {
                        ecx_18 -= 1;
                        *(ecx_18 - 0x7d);
                        arg1 = arg2;
                        eax_5 = arg1 | 0x81798049;
                        ebx[0x2c860f4] -= eax_5;
                    }
                    
                    *(ecx_18 - 0x80) = *arg2[1];
                    int32_t i_3 = eax_5 - 1 + 0x60;
                    bool cond:10 = !i_3;
                    ebx = 0x70;
                    char temp1_4 = i_3 % *0x4903e1d6;
                    i_3 = i_3 / *0x4903e1d6;
                    *i_3[1] = temp1_4;
                    int32_t eflags_4;
                    int32_t eip_2;
                    eip_2 = __into(eflags_6);
                    
                    if (!cond:10 && ecx_18 == 1)
                    {
                        int32_t i;
                        bool c_16;
                        
                        do
                        {
                            c_16 = *(ecx_18 - 0x79) < 0x29;
                            i = i_3;
                            i_3 = i - 0x60;
                            i_4 += 1;
                        } while (i - 0x60 < i || (c_16 && i - 0x60 == i));
                        /* undefined */
                    }
                    
                    int32_t temp34 = *(ecx_18 - 0x81);
                    *(ecx_18 - 0x81) -= 1;
                    
                    if (temp34 - 1 >= 0)
                    {
                        *0x4903e1d6;
                        *arg2[1] = esp;
                        trap(0xd);
                    }
                    
                    ebx[0x1c91e834] -= i_3;
                    i_3 = i_3 * arg2;
                    __sti(eflags_4);
                    /* undefined */
                }
            }
        }
        else
        {
            int32_t temp12_1 = ebx[-0x1dae17cc];
            ebx[-0x1dae17cc] -= arg1;
            bool cond:4_1 = temp12_1 - arg1 >= 0;
            __int1();
            esp = arg1;
            int32_t eflags_7 = __sti(eflags_6);
            ecx_14 = &__return_addr;
            *arg1[1] = (ecx_22 - 1);
            *(ecx_14 - 0x80) = arg7;
            
            if (cond:4_1)
            {
                char temp13_1 = ROLB(*(arg2 + 0x1af67d21), 1);
                *(arg2 + 0x1af67d21) = temp13_1;
                cond:6_1 = temp13_1 >= 0;
                eflags_6 = __cli(eflags_7);
                goto label_14099;
            }
            
            arg2[0x1e11e834] -= arg1;
            char temp1_6 = arg1 % *arg2;
            arg1 = arg1 / *arg2;
            *arg1[1] = temp1_6;
            *(ecx_14 + 0x50);
            arg1 = *esi;
            arg1 *= 2;
            int16_t eax_8;
            eax_8 = *(esi - 1);
            ebx += arg2;
            eax_8 = eax_8 + 0x73;
            *eax_8[1] = -(*eax_8[1]);
        }
    }
    else
    {
        ebx[0x1f4860f4] -= arg1;
        char temp1_1 = arg1 % *(&arg2[arg5 * 2] + 0x49c8e1b6);
        arg1 = arg1 / *(&arg2[arg5 * 2] + 0x49c8e1b6);
        *arg1[1] = temp1_1;
        char temp6_1;
        bool c_2;
        
        while (true)
        {
            arg1 = arg1 - 0x60;
            char* temp4_1 = arg5;
            arg5 = &arg5[1];
            
            if (temp4_1 == 0xffffffff)
            {
                int32_t* esp_1 = *esp;
                temp6_1 = *arg5;
                c_2 = arg1 < temp6_1;
                i_4 = &arg5[1];
                ecx = arg3 - 1;
                
                if (arg1 == temp6_1 || ecx)
                    break;
                
                void* i_1;
                
                do
                {
                    arg1 = arg1 - 0x60;
                    i_1 = i_4;
                    i_4 += 1;
                } while (i_1 == 0xffffffff);
                uint8_t* edi;
                uint8_t temp0_2;
                temp0_2 = __insb(i_4, arg2, eflags);
                *edi = temp0_2;
                bool cond:5_1 = *esi == *edi;
                esi = &esi[1];
                
                if (cond:5_1 || ecx != 2)
                {
                    *(ecx - 0x76);
                    ebx = 0x7d;
                    *esi;
                    /* undefined */
                }
                
                arg1 = arg1 - 0x60;
                arg5 = &edi[1 * 2];
                void* ecx_3;
                ecx_3 = (ecx - 3) ^ 0x18;
                
                if (TEST_BITB(*arg1[1], 6) || ecx_3 != 1)
                    /* undefined */
                
                int32_t* temp31_1;
                char* temp32_1;
                bool c_5;
                
                do
                {
                    c_5 = *(ecx_3 - 0x77) < 0x29;
                    temp31_1 = arg1;
                    arg1 = temp31_1 - 0x60;
                    temp32_1 = arg5;
                    arg5 = &arg5[1];
                } while (temp32_1 != 0xffffffff && temp31_1 - 0x60 >= temp31_1
                    && (!c_5 || temp31_1 - 0x60 != temp31_1));
                
                if (*(ecx_3 - 2)[1] != 0x96 && ecx_3 == 3)
                {
                    int32_t* i_2;
                    bool c_7;
                    
                    do
                    {
                        c_7 = *(ecx_3 - 0x7b) < 0x29;
                        i_2 = arg1;
                        arg1 = i_2 - 0x60;
                        arg5 = &arg5[1];
                    } while (i_2 - 0x60 < i_2 || (c_7 && i_2 - 0x60 == i_2));
                    int32_t esp_2 = *esp_1;
                    *arg1[1] = 0x49;
                    void* edi_2 = &arg5[1];
                    char* ecx_8;
                    ecx_8 = *(arg1 - 0x60)[1];
                    void* eax;
                    *eax[1] = esi;
                    eax = 0x49;
                    void* temp42_1;
                    
                    do
                    {
                        eax = eax - 0x60;
                        temp42_1 = edi_2;
                        edi_2 += 1;
                    } while (temp42_1 + 1 < 0);
                    eax = __in_al_immb(0xf8, eflags);
                    int32_t eflags_1;
                    char temp0_5;
                    char temp1_2;
                    temp0_5 = __aad_immb(0xe1, eax, *eax[1]);
                    eax = temp0_5;
                    *eax[1] = temp1_2;
                    *edi_2;
                    *(esp_2 - 4) = eax;
                    *0xf94148ad = RRCB(*0xf94148ad, 0xa8, false);
                    *(eax - 0x7e867fb7) += *(ecx_8 - 1)[1];
                    arg2[0x4bd9cf4] -= eax;
                    __sti(eflags_1);
                    /* undefined */
                }
                
                *(arg4 - 0xa) &= arg5;
                esp = 0xc8e1b6fa;
                arg3 = ecx_3 - 4;
            }
        }
        
        if (arg1 - temp6_1 >= 0)
        {
            *ecx;
            
            while (true)
            {
                arg1 = arg1 - 0x60;
                void* i_6 = i_4;
                i_4 += 1;
                
                if (i_6 != 0xffffffff)
                {
                    label_140b2:
                    /* undefined */
                }
                
                label_140a8:
                c_2 = *(ecx - 0x72) < 0x29;
            }
        }
        else
            arg2[-0x8c2630c] -= arg1;
    }
    /* undefined */
}

int32_t __convention("regparm") sub_141ec(void* arg1, char* arg2, void* arg3, void* arg4 @ ebp, char* arg5 @ edi)
{
    void* i_4 = 0x8049a1e1;
    int32_t eflags;
    void* ecx_3;
    void* esp;
    void* edi;
    bool s;
    void* ebx;
    bool c_3;
    
    if (!s)
    {
        *(ebx + 0x7747a0d0) -= arg1;
        *(arg1 - 0x471e6903);
        void* i;
        bool c_10;
        
        do
        {
            c_10 = *(arg3 - 0x77) < 0x29;
            i = arg1;
            arg1 = i - 0x60;
            arg5 = &arg5[1];
        } while (i - 0x60 < i || (c_10 && i - 0x60 == i));
        esp = *0x8b798049;
        *arg1[1] = 0x49;
        c_3 = *(arg3 - 0x74) < 0x29;
        label_141ab:
        edi = &arg5[1];
        ecx_3 = *(arg1 - 0x60)[1];
        *arg1[1] = i_4;
        arg1 = 0x49;
    }
    else
    {
        *(ebx + 0x7d2184d0) -= arg1;
        arg1 = arg1 * *0x8049a1dc;
        
        while (true)
        {
            *arg2[1] = 0xe1;
            char* i_1;
            
            do
            {
                arg1 = arg1 - 0x60;
                i_1 = arg5;
                arg5 = &arg5[1];
            } while (i_1 != 0xffffffff);
            int16_t es;
            *esp = es;
            char temp7_1 = *arg5;
            c_3 = arg1 < temp7_1;
            arg5 = &arg5[1];
            
            if (arg1 == temp7_1 || arg3 != 2)
                goto label_141ab;
            
            char* i_2;
            
            do
            {
                arg1 = arg1 - 0x60;
                i_2 = arg5;
                arg5 = &arg5[1];
            } while (i_2 == 0xffffffff);
            int16_t ss;
            *(esp - 4) = ss;
            esp -= 4;
            void* esi = i_4 + 1;
            edi = &arg5[1];
            ecx_3 = arg3 - 4;
            
            if (*i_4 == *arg5 || ecx_3)
                break;
            
            arg1 = arg1 - 0x60;
            edi += 1;
            void* ecx_4;
            ecx_4 = (ecx_3 - 1) ^ 0xc2;
            ecx_3 = ecx_4 - 1;
            
            if (TEST_BITB(*arg1[1], 6) || ecx_3)
                goto label_141c0;
            
            void* temp14_1;
            void* temp15_1;
            bool c_6;
            
            do
            {
                c_6 = *(ecx_3 - 0x76) < 0x29;
                temp14_1 = arg1;
                arg1 = temp14_1 - 0x60;
                temp15_1 = edi;
                edi += 1;
            } while (temp15_1 != 0xffffffff && temp14_1 - 0x60 >= temp14_1
                && (!c_6 || temp14_1 - 0x60 != temp14_1));
            char temp16_1 = *ebx[1];
            *ebx[1] -= arg2;
            i_4 = arg1;
            
            if (temp16_1 == arg2 || ecx_3 != 2)
            {
                void* eax;
                eax = esi + 0x73;
                *arg2 = ~*arg2;
                goto label_141db;
            }
            
            void* i_3 = ecx_3 - 3;
            arg5 = edi + 1;
            void* eax_2 = esi - 0x60 + 1;
            char temp19_1 = *(i_4 - 0x7fb6761f);
            *(i_4 - 0x7fb6761f) -= 1;
            
            if (temp19_1 - 1 >= 0)
                /* undefined */
            
            *(ebx + 0x7247a0d0) -= eax_2;
            char temp1_1 = eax_2 % 0xe1;
            eax_2 = eax_2 / 0xe1;
            *eax_2[1] = temp1_1;
            
            while (true)
            {
                char temp0_3 = i_3;
                i_3 = *eax_2[1];
                *eax_2[1] = temp0_3;
                
                if ((*(i_3 - 0x80) & i_3) >= 0)
                {
                    arg3 = i_3 - 1;
                    arg1 = eax_2 - 0x7c;
                    *(arg4 - 0xa) &= arg5;
                    eflags = __sti(eflags);
                    break;
                }
                
                int32_t temp21_1 = *(arg2 - 0x76b85f30);
                *(arg2 - 0x76b85f30) -= eax_2;
                bool c_9 = temp21_1 < eax_2;
                bool z_4 = temp21_1 == eax_2;
                __int1();
                
                while (!z_4 && i_3 != 1)
                {
                    char temp22_1 = eax_2;
                    eax_2 = temp22_1 - 0x60;
                    c_9 = temp22_1 - 0x60 < temp22_1 || (c_9 && temp22_1 - 0x60 == temp22_1);
                    char* temp23_1 = arg5;
                    arg5 = &arg5[1];
                    z_4 = temp23_1 == 0xffffffff;
                    i_3 = i_4;
                }
                
                *(i_4 - 0x417f4180);
                __out_immb_oeax(0xda, eax_2, eflags);
                *(eax_2 - 0x7fb6b3df) += eax_2;
                *(i_4 + eax_2 - 0x80) &= arg2;
                *(eax_2 + 0x4a) &= eax_2;
                *(i_3 - 1) &= 0x28;
                *(i_3 - 1) &= 0xc4;
                char* fsbase;
                *(fsbase + i_3 - 1) &= 0xfc;
                *(i_3 - 1) &= 0xb8;
                void* eax_3;
                *eax_3[1] = 0x84;
                *0x2d82d186 -= 0x2d83d195;
                *i_4 - *(arg5 + 1);
                i_4 += 4;
                *(arg4 * 2 - 0x1e5a2f59) = ROLD(*(arg4 * 2 - 0x1e5a2f59), 1);
                void* temp0_4 = esp;
                esp = eax_3;
                *(i_3 - 0x7f);
                void* temp0_5 = ebx;
                ebx = temp0_4;
                *(i_3 - 0x72);
                *temp0_4;
                *temp0_4 &= 0x479a2280;
                void* eax_6;
                arg2 = HIGHD(temp0_5);
                eax_6 = LOWD(temp0_5);
                arg5 = &arg5[5 + 1];
                char temp25_1 = *(temp0_4 - 0xe7bb671) + 0x61;
                *(temp0_4 - 0xe7bb671) = temp25_1;
                eflags = __sti(eflags);
                void* temp0_6 = arg4;
                arg4 = eax_6;
                eax_2 = temp0_6;
                i_3 = temp0_4 - 1;
                
                if (temp25_1 && !i_3)
                {
                    bool cond:5 = *(i_3 - 0x7e) - 0x29 >= 0;
                    int16_t cs;
                    *(i_3 - 0x81) = cs;
                    
                    if (cond:5)
                        /* undefined */
                    
                    *(i_3 - 0x3fb67531) -= i_3 - 1;
                    int32_t edi_3 = *esp;
                    *(esp + 8);
                    *(esp + 0x10);
                    int16_t edx_2 = *(esp + 0x14);
                    char* ecx_12 = *(esp + 0x18);
                    char temp0_7 = *ecx_12;
                    *ecx_12 = *(*(esp + 0x1c))[1];
                    void* eax_7;
                    *eax_7[1] = temp0_7;
                    ecx_12[0xffffff80] = *edx_2[1];
                    ecx_12 &= 0x80;
                    *(ecx_12 - 1) &= 0xda;
                    *(eax_7 - 0x7f9b83df) += eax_7;
                    *(ecx_12 - 1) &= 0x54;
                    *(((esp + 0x1f) & edi_3) - 4) = es;
                    *(ecx_12 - 1) &= 0xb8;
                    void* eax_8;
                    *eax_8[1] = 0x84;
                    *0x2d82d186 -= 0x2d83d1f5;
                    trap(0xd);
                }
                
                *(eax_2 - 0x1098db9) <<= 1;
            }
        }
    }
    void* temp9_1;
    
    do
    {
        arg1 = arg1 - 0x60;
        temp9_1 = edi;
        edi += 1;
    } while (temp9_1 + 1 < 0);
    arg1 = __in_al_immb(0xf8, eflags);
    label_141c0:
    char temp0_10;
    char temp1_2;
    temp0_10 = __aad_immb(0xe1, arg1, *arg1[1]);
    arg1 = temp0_10;
    *arg1[1] = temp1_2;
    *edi;
    *(esp - 4) = arg1;
    *0xf94148ad = RRCB(*0xf94148ad, 0xa8, false);
    *(arg1 - 0x7e867fb7) += *(ecx_3 - 1)[1];
    *(arg2 + 0x12f673d0) -= arg1;
    label_141db:
    __sti(eflags);
    /* undefined */
}

int32_t __convention("regparm") sub_14b32(void* arg1, int32_t arg2, int32_t arg3, int32_t arg4 @ edi, int32_t arg5)
{
    arg3 &= 0x8b;
    
    if (!arg3 || arg3 != 1)
    {
        int16_t es;
        uint32_t var_4 = es;
        *(arg3 - 1 + (arg4 << 3) - 0xe7cfe76);
        /* undefined */
    }
    
    *(arg1 - 0x80) -= 0x7e;
    arg2 = arg2;
    *(arg1 + 0x1d) += arg1;
    *(arg3 - 0x1e63d882) ^= 0x80;
    char temp1 = *(arg3 - 0x3e6f06af);
    *(arg3 - 0x3e6f06af) = temp1 - 0x65;
    bool o = /* bool o = unimplemented  {adc byte [ecx-0x3e6f06ad], 0x9b} */;
    
    if (temp1 - 0x65 && temp1 - 0x65 < 0 == o)
        /* undefined */
    
    *0xd06ea86;
    /* undefined */
}

int32_t sub_14b66()
{
    /* undefined */
}

int32_t __convention("regparm") sub_14b89(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4 @ esi, void* arg5 @ edi)
{
    bool c;
    int32_t* eax = arg1 - 0x49c1b346;
    bool cond:0 = *(arg4 + 0x30) <= 0x43;
    bool c0;
    bool c1;
    bool c2;
    bool c3;
    *(arg5 - 0x7f977eb7) =
        (c0 ? 1 : 0) << 8 | (c1 ? 1 : 0) << 9 | (c2 ? 1 : 0) << 0xa | (c3 ? 1 : 0) << 0xe;
    
    if (!cond:0)
        /* undefined */
    
    int32_t ebx;
    ebx = 0xdd;
    *(__return_addr + 0x30);
    eax[-0x20] -= 0xea807e;
    int32_t temp0 = *eax;
    *eax += eax;
    void* eax_2;
    eax_2 = *(ebx + eax + 0x1e7fa277);
    *(eax_2 - 0x80) -= 0x7e;
    int32_t edx_1;
    edx_1 = (arg2 - 1);
    *(eax_2 + 0x1d) += eax_2;
    *(arg3 - 2);
    *(arg3 - 0x1e63d883) ^= 0x80;
    char temp2 = *(arg3 - 0x3e6f06b0);
    *(arg3 - 0x3e6f06b0) = temp2 - 0x65;
    bool o = /* bool o = unimplemented  {adc byte [ecx-0x3e6f06ad], 0x9b} */;
    
    if (temp2 - 0x65 && temp2 - 0x65 < 0 == o)
        /* undefined */
    
    *(arg3 + 2);
    *0xd06ea86;
    /* undefined */
}

int32_t __convention("regparm") sub_14ba2(void* arg1, void* arg2, int32_t arg3, int32_t arg4 @ ebp, void* arg5 @ esi, char* arg6 @ edi)
{
    bool z;
    bool s;
    bool o;
    
    if (!z && s == o)
        /* undefined */
    
    if (!z && s == o)
        /* undefined */
    
    if (s)
    {
        int32_t ebp = *0x80688149;
        *arg6 &= arg2;
        *arg5;
        char temp1 = *arg6;
        *arg6 &= 0x9d;
        
        if (!(temp1 & 0x9d) || arg3 != 1)
        {
            char temp0_1 = arg2;
            arg2 = *(arg3 - 1)[1];
            void* ecx;
            *ecx[1] = temp0_1;
            *(arg1 - 2) = 0xc9;
        }
        else
        {
            *0x80688149 = arg3 - 1;
            *(arg3 - 0x3e157e83) = RORD(*(arg3 - 0x3e157e83), 0);
            *0x113181f5 = arg3 - 1;
            *(arg5 - 0x36ff3916) = ROLD(*(arg5 - 0x36ff3916), 0x1d);
            *(arg1 - 0x7f) = ebp;
        }
        
        /* undefined */
    }
    
    arg1 s>>= 1;
    char temp2_1;
    
    do
    {
        *(arg2 + 0x70) s>>= 0xb2;
        temp2_1 = *arg6 & 0xb0;
        *arg6 = temp2_1;
        arg3 -= 2;
    } while (!temp2_1 || arg3);
    int32_t temp3 = *(arg1 - 0x7a);
    *(arg1 - 0x7a) -= 0x800106ea;
    arg1 = arg1 + 0x78;
    int32_t ebp_2 = *0x80688149;
    void* edi = *0x8068814d;
    *(arg1 - 0x6f06a36f) = ROLB(*(arg1 - 0x6f06a36f), 0xa1);
    char temp0_2 = arg2;
    arg2 = *(arg3 - 1)[1];
    int16_t ecx_2;
    *ecx_2[1] = temp0_2;
    int16_t es;
    *0x8068814c = es;
    char eax_8;
    int32_t ecx_3;
    int32_t edx;
    eax_8 = 0x5f32d7d8();
    *(ecx_3 + (edi << 3) - 0x70) = RRCB(*(ecx_3 + (edi << 3) - 0x70), 0xa1, false);
    bool c_1 = /* bool c_1 = unimplemented  {rcr byte [ecx+edi*8-0x70], 0xa1} */;
    bool c_2 = /* bool c_2 = unimplemented  {sbb al, 0xf9} */;
    bool p = /* bool p = unimplemented  {sbb al, 0xf9} */;
    bool a = /* bool a = unimplemented  {sbb al, 0xf9} */;
    bool o_1 = /* bool o_1 = unimplemented  {sbb al, 0xf9} */;
    bool d;
    *0x80688148 = (o_1 ? 1 : 0) << 0xb | (d ? 1 : 0) << 0xa | (eax_8 + 7 < 0 ? 1 : 0) << 7
        | (!(eax_8 + 7) ? 1 : 0) << 6 | (a ? 1 : 0) << 4 | (p ? 1 : 0) << 2 | (c_2 ? 1 : 0);
    *(edx + (ebp_2 << 3) - 0x645f2f4) = RORD(*(edx + (ebp_2 << 3) - 0x645f2f4), 0x8c);
    int32_t ebx;
    *(edi - 7) &= ebx;
    *0x80688148;
    *0xd06ea86;
    /* undefined */
}

int32_t sub_14bb0() __pure
{
    return;
}

void __convention("fastcall") sub_14c8c(char* arg1, int32_t arg2, int32_t arg3 @ esi) __noreturn
{
    int32_t* eax = 0x78e93d47;
    *0xf9333148;
    int32_t ebx;
    int32_t edx = arg2 & ebx;
    *0xf950f168 += 0x47;
    
    while (true)
    {
        *(arg3 + eax - 0x80) &= edx;
        *eax &= edx;
        edx -= 1;
        *arg1 &= 0xf9;
        eax = *0x267fb557;
    }
}

int32_t __convention("regparm") sub_14ccb(void* arg1, int32_t arg2, char* arg3, int32_t arg4 @ ebp, void* arg5 @ esi, char* arg6 @ edi)
{
    *arg3 -= 0x9b;
    *(arg3 * 3 + 0x29818900) u>>= 1;
    char temp0 = arg1;
    arg1 = arg2;
    arg2 = temp0;
    *arg6 = arg1;
    void* edi = arg6 - 1;
    arg3[0x48a91dbf] += (arg3 - 1);
    arg3[0x81c8217f] |= arg1;
    *arg5 - *edi;
    void* edi_1 = edi - 4;
    arg3[0xd1b7297f] += (arg3 - 2);
    *edi_1 = *(arg5 - 4);
    void* edi_2 = edi_1 - 4;
    void* ecx_2 = arg3 - 3;
    *(ecx_2 + 0x48a31dc0) = RORB(*(ecx_2 + 0x48a31dc0), 0xc8);
    *(arg1 - 0x71763fb9) |= 0x81dcae29;
    
    while (true)
    {
        int32_t* eax = arg1 & ecx_2;
        *eax |= 0x78e1aa81;
        eax = eax * *(arg2 + (edi_2 << 3) - 0x7d);
        void* ebx;
        int32_t temp1_1 = *(ebx + 0x40499cd0);
        *(ebx + 0x40499cd0) -= ebx;
        *(ecx_2 - 0x652f79d7) = eax;
        arg1 = eax + 1 + 0x7eb7b767;
        *(ecx_2 - 1);
        *(ecx_2 - 1) &= 0xc8;
        *(edi_2 - 0x7e76bfb7) = *(edi_2 - 0x7e76bfb7) - 0x6a2e68d7;
        void* ecx_4 = ecx_2 - 2;
        *(ecx_4 + 0x48931dc0) = RORB(*(ecx_4 + 0x48931dc0), 0xc8);
        *(arg1 - 0x71763fb9) |= 0x81dc8e29;
        void* eax_3 = arg1 & ecx_4;
        *(eax_3 - 0x7f) |= 0x498ee18a;
        *(ecx_4 + 0x488d1dc0) = RORB(*(ecx_4 + 0x488d1dc0), 0xc8);
        *(eax_3 - 0x71763fb9) |= 0x81dc8129;
        arg1 = eax_3 & ecx_4;
        *(ecx_4 - 0x77b777df) -= 0x781e748f;
        ecx_2 = ecx_4 - 1;
        *(ecx_2 - 0x40);
        *(arg1 - 0x78);
        /* unimplemented  {enter 0x8881, 0x47} */
        *(ecx_2 - 0x2351d672) = RORB(*(ecx_2 - 0x2351d672), 0x81);
    }
}

int32_t __convention("regparm") sub_14fd9(int32_t* arg1, void* arg2, int32_t arg3, void** arg4 @ ebp, char* arg5 @ esi, char* arg6 @ edi, long double arg7 @ st0)
{
    int32_t* ecx_1 = arg3 - 1;
    int32_t eflags;
    int32_t* eax;
    void* ebx;
    void* esp;
    bool c_1;
    bool c_2;
    bool z;
    bool s_2;
    bool o_1;
    
    if (z || ecx_1)
    {
        *(ecx_1 - 0x5f8e5fdf);
        bool s;
        
        if (!s)
        {
            arg6 += ebx;
            goto label_14fde;
        }
        
        int32_t temp1_1 = *(ecx_1 - 0x5f861f25);
        *(ecx_1 - 0x5f861f25) -= arg1;
        c_1 = temp1_1 < arg1;
        
        if (!(temp1_1 + -(arg1)))
        {
            *(ecx_1 + 0x60d0ac29) = arg1;
            int32_t ecx;
            int16_t es_1;
            ecx = __les_gprz_memp(*(arg1 - 0x78));
            arg4 = __return_addr;
            void arg_6;
            esp = &arg_6;
            ecx_1 = ecx - 1;
        }
        
        if (!(temp1_1 + -(arg1)) && (temp1_1 == arg1 || !ecx_1))
        {
            arg1 = *0x879e179;
            label_14ff7:
            ebx += 1;
            void* temp7_1 = esp;
            esp = temp7_1 - 0x71a02181;
            c_2 = /* c_2 = unimplemented  {sbb esp, 0x71a02181} */;
            s_2 = temp7_1 - 0x71a02181 < 0;
            o_1 = /* o_1 = unimplemented  {sbb esp, 0x71a02181} */;
            arg1 = *0x81298179;
            
            if (!s_2)
                goto label_14fa7;
            
            goto label_15007;
        }
        
        *(ecx_1 - 0x7d17b2dd) &= arg1;
        void* eax_1 = arg1 + *(&ecx_1[arg2] - 0x17b26e7b);
        *ecx_1 &= 0xe0;
        eax_1 &= ecx_1;
        arg2 += 1;
        *arg6 = *arg5;
        eax = eax_1 - 1;
        int32_t temp8_1 = *ecx_1;
        *ecx_1 = RRCD(temp8_1, 0xa0, false);
        /* unimplemented  {rcr dword [ecx], 0xa0} */
        
        if (RRCD(temp8_1, 0xa0, false) >= 0)
        {
            *ebx &= 0x382e84d;
            *(ecx_1 - 0x17b26e7b);
            label_15016:
            *ecx_1 &= 0x60;
        }
        else
        {
            __int1();
            eax = __in_al_immb(0, eflags);
            __int1();
            eax = *0xa019c148;
            
            if (arg2 + 0x7f < 0)
            {
                *(arg2 - 0x7cb66ab8) = *(arg2 - 0x7cb66ab8) - ebx;
                __int1();
                *ecx_1 = *(arg5 + 1);
                /* undefined */
            }
        }
        
        eax &= ecx_1;
        
        if (arg2 + 1 < 0)
        {
            *(eax - 0x77) = *(eax - 0x77) - esp;
            /* undefined */
        }
        
        *0xe2e1e22c &= 0x48;
        goto label_14fb6;
    }
    
    *ebx;
    label_14fde:
    *ecx_1 -= 0xffffffaf;
    *(arg1 - 0x77) <<= 1;
    int32_t temp2_1 = *ecx_1;
    *ecx_1 -= 0x8960d0ac;
    *arg6 = RRCB(*arg6, 0xc4, temp2_1 < 0x8960d0ac);
    c_1 = /* c_1 = unimplemented  {rcr byte [edi], 0xc4} */;
    int32_t* temp4_1 = arg1;
    arg1 -= 1;
    bool s_1 = temp4_1 - 1 < 0;
    arg4[-8] = ebx;
    bool o_7;
    bool c_8;
    
    if (!(temp4_1 - 1))
    {
        *(arg1 - 0x7e865f8f) &= &__return_addr;
        label_14f99:
        int32_t temp6_1 = *(ecx_1 - 0x5f861f25);
        *(ecx_1 - 0x5f861f25) -= arg1;
        c_8 = temp6_1 < arg1;
        o_7 = temp6_1 + -(arg1);
    }
    else
    {
        if (!s_1)
        {
            int16_t es;
            uint32_t var_4 = es;
            /* undefined */
        }
        
        if (s_1)
            goto label_14ff7;
        
        if (!s_1)
        {
            *arg6 = RRCB(*arg6, 0xdb, c_1);
            c_2 = /* c_2 = unimplemented  {rcr byte [edi], 0xdb} */;
            int32_t* temp10_1 = arg1;
            arg1 -= 1;
            s_2 = temp10_1 - 1 < 0;
            o_1 = temp10_1 - 1;
            arg4[-8] = ebx;
        }
        else
        {
            label_15001:
            int32_t temp11_1 = *(ecx_1 - 0x5f861f25);
            *(ecx_1 - 0x5f861f25) -= arg1;
            c_2 = temp11_1 < arg1;
            s_2 = temp11_1 - arg1 < 0;
            o_1 = temp11_1 + -(arg1);
            label_15007:
            
            if (o_1)
            {
                *(ecx_1 - 0x7d17b2dd) &= arg1;
                eax = arg1 + *(&ecx_1[arg2] - 0x17b26e7b);
                goto label_15016;
            }
        }
        
        if (!o_1)
            goto label_14f2b;
        
        if (!s_2)
        {
            *ecx_1 -= 0x11;
            label_14f71:
            *(arg1 - 0xa) s>>= 1;
            int32_t eflags_1;
            char temp0_11;
            char temp1_3;
            temp0_11 = __aaa(arg1, *arg1[1], eflags);
            arg1 = temp0_11;
            *arg1[1] = temp1_3;
            eflags = __sti(eflags_1);
            *ecx_1 -= 0xaf;
            goto label_14f79;
        }
        
        bool c_15;
        bool d;
        
        if (!s_2)
        {
            if (s_2)
                goto label_14f99;
            
            *ecx_1 -= 0x79e0db81;
            arg1 = *0x81218071;
            arg1 &= *(arg1 + 0x4de19be1);
            label_14f2b:
            void* ecx_8;
            arg1 = 0x918580b2();
            c_8 = false;
            ecx_1 = ecx_8 - 1;
            
            if (!(*(ecx_8 + 0x3180e84d) & arg2) || !ecx_1)
            {
                arg1 = __in_al_immb(0x20, eflags);
                /* unimplemented  {enter 0xef42, 0x48} */
                void** esp_4 = arg4;
                arg4 = *esp_4;
                esp = &esp_4[1];
                goto label_14f3f;
            }
            
            void* esp_3;
            bool c_9;
            bool c_11;
            bool z_4;
            bool s_5;
            bool o_6;
            
            while (true)
            {
                label_14ec1:
                int32_t temp18_1 = *(ecx_1 - 0x5f861f25);
                *(ecx_1 - 0x5f861f25) -= arg1;
                c_9 = temp18_1 < arg1;
                s_5 = temp18_1 - arg1 < 0;
                o_6 = temp18_1 + -(arg1);
                label_14ec7:
                
                if (!o_6)
                    break;
                
                *(ecx_1 - 0x7d17b2de) &= arg1;
                *(&ecx_1[arg2] - 0x17b26e7b) ^= arg1;
                label_14ed6:
                *ecx_1 ^= 0x60;
                arg1 &= ecx_1;
                arg2 += 1;
                *(arg1 - 0x3f);
                *(arg1 - 0x3f) |= ecx_1;
                c_15 = false;
                label_14ee1:
                *(arg1 + 0x60198b79) = *(arg1 + 0x60198b79) - esp;
                arg6 = ecx_1;
                __int1();
                arg1 = __in_al_immb(0, eflags);
                __int1();
                char temp26_1 = arg1;
                arg1 += 0x48;
                bool c_16 = temp26_1 >= 0xb8;
                int32_t temp27_1 = *ecx_1;
                *ecx_1 = RRCD(temp27_1, 0xa0, c_16);
                bool c_17 = /* bool c_17 = unimplemented  {rcr dword [ecx], 0xa0} */;
                
                if (RRCD(temp27_1, 0xa0, c_16) >= 0)
                {
                    char temp33_1 = *(arg1 + 0x1cf181fa);
                    *(arg1 + 0x1cf181fa) += arg1;
                    c_11 = temp33_1 + arg1 < temp33_1;
                    arg1 -= 1;
                    goto label_14e88;
                }
                
                *arg1 = *arg1 - arg1;
                d = true;
                void* temp35_1 = ebx;
                ebx -= 1;
                ecx_1 = ((ecx_1 - 1) ^ 0x72) - 1;
                
                if (temp35_1 == 1 || ecx_1)
                {
                    if (temp35_1 - 1 < 0)
                    {
                        arg1[-0x1e] = arg1[-0x1e] - esp;
                        /* undefined */
                    }
                    
                    arg1 = __in_al_immb(0x20, eflags);
                    /* unimplemented  {enter 0x2042, 0x48} */
                    int32_t temp45_1 = *ecx_1;
                    *ecx_1 = RRCD(temp45_1, 0xa0, false);
                    bool c_10 = /* bool c_10 = unimplemented  {rcr dword [ecx], 0xa0} */;
                    
                    if (RRCD(temp45_1, 0xa0, false) < 0)
                    {
                        *arg1 = *arg1 - esp;
                        goto label_14e7d;
                    }
                    
                    *ecx_1 &= 0xf8f2f182;
                    label_14e0c:
                    *(esp - 4) = arg1;
                    *(esp - 8) = ecx_1;
                    *(esp - 0xc) = arg2;
                    *(esp - 0x10) = ebx;
                    *(esp - 0x14) = esp - 0x10;
                    *(esp - 0x18) = arg4;
                    *(esp - 0x1c) = arg5;
                    *(esp - 0x20) = arg6;
                    arg1[0xd185ebd];
                    label_14e1a:
                    /* undefined */
                }
                
                arg1 -= 1;
                *esp;
                char temp43_1 = arg1[-0x1e];
                arg1[-0x1e] += ecx_1;
                bool c_18 = temp43_1 + ecx_1 < temp43_1;
                bool z_2 = temp43_1 == -(ecx_1);
                arg4 = *(esp + 2);
                esp_3 = esp + 6;
                ecx_1 -= 1;
                
                if (!z_2 && ecx_1)
                {
                    int32_t temp46_1 = arg1[arg2 * 2 + 0x7f02248];
                    arg1[arg2 * 2 + 0x7f02248] -= arg4;
                    c_2 = temp46_1 < arg4;
                    z_4 = temp46_1 == arg4;
                    goto label_14f84;
                }
                
                arg1 = *0x879e179;
                ebx += 1;
                esp = esp_3 - 0x71a02181;
                c_8 = /* c_8 = unimplemented  {sbb esp, 0x71a02181} */;
                o_7 = /* o_7 = unimplemented  {sbb esp, 0x71a02181} */;
                arg1 = *0x81298179;
                
                if (esp_3 - 0x71a02181 < 0)
                    goto label_14f21;
            }
            
            while (true)
            {
                if (!s_5)
                {
                    *ecx_1;
                    *ecx_1 &= 0xa0;
                    c_8 = false;
                    goto label_14eab;
                }
                
                bool c_6;
                bool o_4;
                
                if (!s_5)
                {
                    label_14e55:
                    
                    if (!s_5)
                    {
                        *arg2 &= 0x3182e84d;
                        *(ecx_1 - 0x17b26e7b);
                        *ecx_1 ^= 0x40;
                        goto label_14de8;
                    }
                    
                    int32_t temp30_1 = *(ecx_1 - 0x5f861f25);
                    *(ecx_1 - 0x5f861f25) -= arg1;
                    o_4 = temp30_1 + -(arg1);
                }
                else
                {
                    ebx += 1;
                    void* temp32_1 = esp;
                    esp = temp32_1 - 0x71a02181;
                    c_6 = /* c_6 = unimplemented  {sbb esp, 0x71a02181} */;
                    o_4 = /* o_4 = unimplemented  {sbb esp, 0x71a02181} */;
                    arg1 = *0x81298179;
                    
                    if (temp32_1 - 0x71a02181 >= 0)
                        goto label_14dfe;
                }
                
                if (!o_4)
                {
                    *(arg1 + 0x3180e84d);
                    goto label_14de8;
                }
                
                *(ecx_1 - 0x7d17b2de) &= arg1;
                *(&ecx_1[arg2] - 0x17b26e7b) ^= arg1;
                *ecx_1 ^= 0x20;
                arg1 &= ecx_1;
                arg2 += 1;
                bool c_5;
                
                while (true)
                {
                    *(arg1 - 0x3f);
                    *(arg1 - 0x3f) &= ecx_1;
                    *(arg1 + 0x20198b79) = *(arg1 + 0x20198b79) - esp;
                    label_14e7d:
                    arg6 = ecx_1;
                    __int1();
                    arg1 = __in_al_immb(0, eflags);
                    __int1();
                    arg1 = arg1 - 0x48;
                    c_11 = /* c_11 = unimplemented  {sbb al, 0x48} */;
                    label_14e88:
                    int32_t temp42_1 = *ecx_1;
                    *ecx_1 = RRCD(temp42_1, 0xa0, c_11);
                    bool c_13 = /* bool c_13 = unimplemented  {rcr dword [ecx], 0xa0} */;
                    
                    if (RRCD(temp42_1, 0xa0, c_11) >= 0)
                        goto label_14e1a;
                    
                    *ebx = *ebx - ebx;
                    arg1 -= 1;
                    int16_t ss;
                    *(esp - 4) = ss;
                    esp -= 4;
                    ecx_1 = (ecx_1 - 1) ^ 0xffffffa7;
                    d = false;
                    
                    do
                    {
                        arg1 &= 0x9d;
                        ecx_1 -= 1;
                        bool o_5;
                        
                        if (arg1 && ecx_1)
                        {
                            /* unimplemented  {fadd qword [ecx-0x5f8e5fdf]} */
                            
                            if (arg1 >= 0)
                            {
                                *0xaf2983fa = arg1;
                                goto label_14ea1;
                            }
                            
                            int32_t temp37_1 = *(ecx_1 - 0x5f861f25);
                            *(ecx_1 - 0x5f861f25) -= arg1;
                            c_8 = temp37_1 < arg1;
                            o_7 = temp37_1 + -(arg1);
                            label_14f21:
                            
                            if (o_7)
                            {
                                void* temp15_1 = *(ecx_1 - 0x641e7fde) & arg1;
                                *(ecx_1 - 0x641e7fde) = temp15_1;
                                ecx_1 -= 1;
                                
                                if (temp15_1 && !ecx_1)
                                    goto label_14f2b;
                                
                                *arg6;
                                
                                if (d)
                                    arg6 -= 4;
                                else
                                    arg6 = &arg6[4];
                                
                                label_14f79:
                                char temp22_1 = *arg1;
                                *arg1 <<= 1;
                                c_2 = temp22_1 & 0x80;
                                z_4 = !(temp22_1 & 0x7f);
                                *(ecx_1 + 0x20d0ac29) = arg1;
                                *esp;
                                esp_3 = esp + 2;
                                label_14f84:
                                arg1[-0x1e] = /* arg1[-0x1e] =
                                    unimplemented  {fisttp dword [eax-0x78], st0} */;
                                /* unimplemented  {fisttp dword [eax-0x78], st0} */
                                int16_t top = top + 1;
                                arg4 = *esp_3;
                                esp = esp_3 + 4;
                                ecx_1 -= 1;
                                
                                if (!z_4 && ecx_1)
                                {
                                    *(arg1 - 0x7e865f8f) &= esp;
                                    goto label_15001;
                                }
                                
                                arg1 = *0x879e179;
                                goto label_14f8f;
                            }
                            
                            *(ecx_1 + 0x60d0ac29) = arg1;
                            label_14eab:
                            *esp;
                            esp += 2;
                            char temp17_1 = arg1;
                            arg1 = temp17_1 + 0x48;
                            c_5 =
                                temp17_1 + 0x48 < temp17_1 || (c_8 && temp17_1 + 0x48 == temp17_1);
                            s_5 = temp17_1 + 0x48 < 0;
                            o_5 = /* o_5 = unimplemented  {adc al, 0x48} */;
                        }
                        else
                        {
                            arg1 = arg1 * *(ebx - 0x50d67c06);
                            label_14ea1:
                            *(arg1 - 0x77) <<= 1;
                            int32_t temp38_1 = *ecx_1;
                            *ecx_1 -= 0x8960d0ac;
                            *arg6 = RRCB(*arg6, 0x14, temp38_1 < 0x8960d0ac);
                            c_5 = /* c_5 = unimplemented  {rcr byte [edi], 0x14} */;
                            int32_t* temp40_1 = arg1;
                            arg1 -= 1;
                            s_5 = temp40_1 - 1 < 0;
                            o_5 = temp40_1 - 1;
                        }
                        
                        arg4[-8] = ebx;
                        
                        if (!o_5)
                        {
                            if (!o_5)
                                goto label_14df5;
                            
                            goto label_14e55;
                        }
                    } while (!s_5);
                    
                    if (!s_5)
                        break;
                    
                    ebx += 1;
                    void* temp31_1 = esp;
                    esp = temp31_1 - 0x71a02181;
                    c_9 = /* c_9 = unimplemented  {sbb esp, 0x71a02181} */;
                    s_5 = temp31_1 - 0x71a02181 < 0;
                    o_6 = /* o_6 = unimplemented  {sbb esp, 0x71a02181} */;
                    arg1 = *0x81298179;
                    
                    if (s_5)
                        goto label_14ec7;
                    
                    char temp0_4 = ecx_1;
                    ecx_1 = arg1;
                    arg1 = temp0_4;
                    *(ecx_1 + 0x3180e84d);
                    ecx_1[0x10b20839] &= ecx_1;
                }
                
                if (s_5)
                    goto label_14ec1;
                
                char temp41_1 = arg1;
                arg1 -= 0x48;
                c_9 = temp41_1 < 0x48;
                s_5 = temp41_1 - 0x48 < 0;
                arg4[-8] = ebx;
                
                if (!(temp41_1 - 0x48))
                {
                    arg6 = &arg6[1];
                    char temp0_3;
                    char temp1_2;
                    temp0_3 = __aas((arg1 - 1), *(arg1 - 1)[1], eflags);
                    arg1 = temp0_3;
                    *arg1[1] = temp1_2;
                    ecx_1 ^= 0xfffffff9;
                    
                    while (true)
                    {
                        ebx <<= 0x5c;
                        c_5 = /* c_5 = unimplemented  {shl bl, 0x5c} */;
                        label_14df5:
                        *(esp - 4) = ecx_1;
                        esp -= 4;
                        char temp23_1 = *(ecx_1 - 0x6e7d6e7f);
                        *(ecx_1 - 0x6e7d6e7f) = temp23_1 - 0x31;
                        c_6 = temp23_1 - 0x31 < temp23_1 || (c_5 && temp23_1 - 0x31 == temp23_1);
                        label_14dfe:
                        eflags = __cli(eflags);
                        
                        if (!(c_6 ^ 1))
                            break;
                        
                        *(arg1 + 0x4a) ^= arg1;
                        label_14de8:
                        arg1 = 0x3f498f36();
                        __int1();
                    }
                    
                    ebx &= ecx_1;
                    *(ebx - 0x7dde7e6f) += arg1;
                    __int1();
                    break;
                }
            }
            
            goto label_14e0c;
        }
        
        label_14f8f:
        ebx += 1;
        void* temp20_1 = esp;
        esp = temp20_1 - 0x71a02181;
        c_8 = /* c_8 = unimplemented  {sbb esp, 0x71a02181} */;
        o_7 = /* o_7 = unimplemented  {sbb esp, 0x71a02181} */;
        arg1 = *0x81298179;
        
        if (temp20_1 - 0x71a02181 >= 0)
        {
            label_14f3f:
            *esp;
            esp += 2;
            int32_t temp19_1 = *ecx_1;
            *ecx_1 = RRCD(temp19_1, 0xa0, c_8);
            /* unimplemented  {rcr dword [ecx], 0xa0} */
            
            if (RRCD(temp19_1, 0xa0, c_8) >= 0)
            {
                *(ecx_1 - 0x17b26e7b);
                goto label_14ed6;
            }
            
            arg6 = ecx_1;
            __int1();
            int32_t eax_5;
            eax_5 = __in_al_immb(0, eflags);
            bool c_20 = arg2 < 0x81;
            __int1();
            __out_dx_al(arg2, eax_5, eflags);
            arg1 = eax_5 - 1;
            int32_t temp21_1 = *ecx_1;
            *ecx_1 = RRCD(temp21_1, 0xa0, c_20);
            c_15 = /* c_15 = unimplemented  {rcr dword [ecx], 0xa0} */;
            
            if (RRCD(temp21_1, 0xa0, c_20) >= 0)
                goto label_14ee1;
            
            arg1 = __in_al_immb(0x49, eflags);
            int32_t ecx_9 = ecx_1 ^ 0x42;
            d = true;
            esp = esp - ecx_9;
            bool c_21 = /* bool c_21 = unimplemented  {sbb esp, ecx} */;
            
            if (ecx_9 == 1)
            {
                ecx_1 = (ecx_9 - 1) + *ebx[1];
                arg2 = 1;
                *ecx_1 -= 0x14;
                *(arg1 + 0x1129807b) <<= 1;
                goto label_14f71;
            }
            
            eax = 0x89217132();
            eax = __in_al_immb(0x20, eflags);
            /* unimplemented  {enter 0xd042, 0x48} */
            int32_t temp36_1 = *ecx_1;
            *ecx_1 = RRCD(temp36_1, 0xa0, c_21);
            bool c_23 = /* bool c_23 = unimplemented  {rcr dword [ecx], 0xa0} */;
            
            if (RRCD(temp36_1, 0xa0, c_21) >= 0)
                /* undefined */
            
            *eax = *eax - esp;
            goto label_14fc1;
        }
    }
    
    if (!o_7)
        goto label_14f21;
    
    *(ecx_1 - 0x7d17b2dd) &= arg1;
    label_14fa7:
    eax = arg1 + *(&ecx_1[arg2] - 0x17b26e7b);
    *ecx_1 &= 0x20;
    eax &= ecx_1;
    label_14fb6:
    *(eax - 0x3f);
    *(eax - 0x3f) = RORB(*(eax - 0x3f), 1);
    bool c_22 = /* bool c_22 = unimplemented  {ror byte [eax-0x3f], 0x1} */;
    *(eax + 0x20198b79) = *(eax + 0x20198b79) - esp;
    label_14fc1:
    __int1();
    eax = __in_al_immb(0, eflags);
    __int1();
    /* undefined */
}

int32_t __convention("fastcall") sub_150a9(int32_t arg1, int32_t arg2 @ edi)
{
    if (!(arg1 - 1))
        /* undefined */
    
    /* undefined */
}

int32_t __convention("regparm") sub_15167(int32_t arg1, int32_t arg2, char* arg3, void* arg4 @ ebp, void* arg5 @ esi, void* arg6 @ edi, int80_t arg7 @ st0)
{
    bool c;
    int32_t* eax_2 = arg1 - 0x298cb348;
    bool c_2 = /* bool c_2 = unimplemented  {sbb eax, 0x298cb348} */;
    void* ecx;
    
    if (c_2)
    {
        char temp1_1 = *arg3 & 0x87;
        *arg3 = temp1_1;
        ecx = arg3 - 1;
        
        if (!temp1_1 || ecx)
            goto label_15119;
        
        *(arg4 - 0x57);
        /* undefined */
    }
    
    if (arg3 != 1)
    {
        *(arg5 - 0x56dd7f1f) &= eax_2;
        /* undefined */
    }
    
    char* ebx;
    *ebx;
    *ebx &= 0x1ded47a9;
    ecx = arg3 - 2;
    
    if (ecx)
    {
        bool c_1 = /* bool c_1 = unimplemented  {sbb eax, 0x55e3b315} */;
        *0x2984b348 = RRCD(*0x2984b348, 0x76, c_1);
        arg7 - *(arg6 - 0x57867db7);
        /* jump -> 0xa2b45edc */
    }
    
    while (true)
    {
        char temp6_1 = *ecx & 0x89;
        *ecx = temp6_1;
        ecx -= 1;
        
        if (temp6_1 && !ecx)
        {
            *(arg4 + 0x11) -= 0x56c99707;
            /* undefined */
        }
        
        *(arg5 - 0x7ffce34c) |= arg2;
        *(eax_2 - 0x7f4b6a45);
        int32_t esp;
        *(eax_2 - 0x7f4b6a45) &= esp;
        *(ecx - 0x7fcb3fbf) = *(ecx - 0x7fcb3fbf) + eax_2;
        eax_2 &= esp;
        label_15119:
        eax_2 ^= 0x80;
        *eax_2 &= eax_2;
        int16_t es;
        *(arg6 - 0x7f) = es;
        arg4 &= *(ecx - 0x1de212b9);
        *(esp - 4) = arg4;
        *(esp - 8) = arg4;
        *(esp - 0xc) = arg4;
        *ebx;
        *ebx &= 0xa9;
        arg6 += 2;
        int32_t eflags;
        __in_oeax_dx(arg2, eflags);
        bool c_3 = /* bool c_3 = unimplemented  {sbb eax, 0x47a955e2} */;
        eax_2 = __in_oeax_dx(arg2, eflags) - 0x238155e2;
        *(esp - 0x10) = arg4;
        esp -= 0x10;
    }
}

int32_t __convention("fastcall") sub_155e5(char* arg1, void* arg2, int32_t arg3 @ esi, int32_t arg4 @ edi)
{
    /* unimplemented  {sbb esp, dword [ecx+0x61]} */
    void* eax = *0x8696069;
    int32_t eflags;
    int16_t* edi;
    int16_t temp0;
    temp0 = __insd(arg4, arg2, eflags);
    *edi = temp0;
    arg1[0xffffffc1];
    arg1[0xffffffc1] &= *arg1[1];
    arg1[eax << 2] -= 0xd0;
    char temp0_1 = *(eax + 0x1df01ff6);
    *(eax + 0x1df01ff6) = *arg2[1];
    *arg2[1] = temp0_1;
    *(arg2 - 0x40) &= *eax[1];
    *eax[1] = 0x84;
    eax = *0x5ef18a6a;
    eax = *0x5bf18a47;
    *0x926a8ab0 = eax;
    *(arg2 - 0x10);
    *arg1 &= 0xf0;
    int32_t eax_1;
    eax_1 = 0xb4;
    /* undefined */
}

void __convention("regparm") sub_15633(int32_t arg1, char* arg2, int16_t arg3, int32_t arg4, void* arg5, int32_t arg6, char* arg7, int32_t arg8, int32_t arg9, int32_t arg10, int32_t arg11, int32_t arg12, int32_t arg13, int32_t arg14, int32_t arg15, uint64_t* arg16, int32_t arg17, int32_t arg18, int32_t arg19) __noreturn
{
    arg1 = *0x80499752;
    __int1();
    *0x1c40b0ac = arg1;
    *arg2;
    *0x61ec4c91;
    *0x61ec4c91 &= 0x50;
    *(arg5 - 0x780e5fc7) = *(arg5 - 0x780e5fc7) - arg4;
    *(__return_addr - 0x7f9e5fb3) += arg4;
    int32_t eflags;
    void* eax_1;
    eax_1 = __in_al_dx(arg3, eflags);
    int16_t cs;
    *(arg8 * 5 + 0x69) = cs;
    int32_t eax_2;
    eax_2 = *arg7;
    int32_t ebx_2;
    int16_t es;
    ebx_2 = __les_gprz_memp(*arg16);
    breakpoint();
}

void sub_15675(int32_t arg1, void* arg2, int32_t arg3, int32_t arg4, void* arg5, int32_t arg6) __noreturn
{
    *(arg2 - 0x5c) = arg5;
    *(arg5 + 0x69cc4c88);
    breakpoint();
}

int32_t sub_159d9(int32_t arg1 @ edi)
{
    *(arg1 - 0x73);
    /* undefined */
}

int32_t __convention("regparm") sub_159e5(char* arg1, void* arg2, int32_t arg3, void* arg4 @ ebp, int32_t arg5 @ edi, long double arg6 @ st0)
{
    __int1();
    *arg1 |= 0x82;
    arg1 -= 0xf4;
    arg1[0x68] <<= arg3;
    void* ebx;
    *(ebx - 0xf) -= arg1;
    *(arg1 - 0x7bd67e87);
    *(arg2 - 0x7c2e36d7) = ROLD(*(arg2 - 0x7c2e36d7), 1);
    *(arg4 - 0x501e2130) -= arg3;
    arg1 = *(ebx + arg1);
    int16_t es;
    uint32_t var_4 = es;
    *(ebx - 0x80) &= *arg3[1];
    /* undefined */
}

int32_t __convention("regparm") sub_15a12(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4 @ ebp, char* arg5 @ esi, void* arg6 @ edi)
{
    *(arg6 + 0x39) += arg1;
    *arg5 |= 0x80;
    int32_t ebp = arg4 << 1;
    
    if (!ebp || arg3 != 1)
    {
        int32_t eflags;
        __cli(eflags);
        /* undefined */
    }
    
    char* ecx_1 = (*0x88f240)();
    *(ebp - 0x57fe7e0f) |= 0x80ea8101;
    void* eax;
    eax = 0x71;
    void* ebx;
    ebx = 0x18;
    char temp0 = *ecx_1;
    *ecx_1 -= 0x1f;
    bool c = temp0 >= 0x1f;
    bool p = /* bool p = unimplemented  {add byte [ecx], 0xe1} */;
    bool a = /* bool a = unimplemented  {add byte [ecx], 0xe1} */;
    *eax[1] = (temp0 - 0x1f < 0 ? 1 : 0) << 7 | (temp0 == 0x1f ? 1 : 0) << 6 | (a ? 1 : 0) << 4
        | (p ? 1 : 0) << 2 | (c ? 1 : 0);
    *(eax + 0x847b0e1) = *(eax + 0x847b0e1) + eax;
    *ecx_1 -= 0x7f;
    *(eax + 0x71) &= &__return_addr;
    *(ebx - 0x80) &= *ecx_1[1];
    /* undefined */
}

int32_t __convention("regparm") sub_15a55(char* arg1, void* arg2, int32_t arg3, void* arg4 @ ebp, char* arg5 @ esi, void* arg6 @ edi)
{
    *(arg6 + 0x39) = &arg1[*(arg6 + 0x39)];
    *arg5;
    *arg5 |= 0x80;
    int32_t esp = RLCD(&__return_addr, 1, false);
    int16_t ebx;
    
    if (!esp || arg3 != 1)
    {
        ebx <<= 0x7f;
        /* unimplemented  {shl bl, 0x7f} */
        *(arg2 - 0x7bfd3a15);
        /* undefined */
    }
    
    *arg1 = arg1;
    *(arg4 - 0x6ffe7e0f);
    *(arg4 - 0x6ffe7e0f) |= 0x80ea8101;
    int32_t* eax;
    eax = 0x46;
    *(arg3 - 1);
    *(arg3 - 1) = arg2;
    void** ecx;
    ecx = 0x81;
    *eax[1] = (arg3 - 1);
    ecx = 0x81 - *ebx[1];
    *ecx;
    *ecx -= 0x80;
    __int1();
    *eax &= 0xffffff88;
    ecx |= *ebx[1];
    *ecx -= 0x7f;
    *(eax + 0x71) &= esp;
    /* undefined */
}

int32_t __convention("fastcall") sub_15a9a(int32_t* arg1, int16_t arg2, char* arg3 @ esi)
{
    *arg3 |= 0x80;
    int32_t temp1 = *(arg1 - 0x3f4cce1f);
    *(arg1 - 0x3f4cce1f) <<= 1;
    bool z = !(temp1 & 0x7fffffff);
    bool s = temp1 << 1 < 0;
    bool o = /* bool o = unimplemented  {shl dword [ecx-0x3f4cce1f], sub_0+1} */;
    void* const __return_addr_1;
    int32_t eflags;
    
    if (!z && s == o)
    {
        arg1 -= 1;
        
        if (z || arg1)
            /* undefined */
        
        *0xd95757e6;
        *0xd95757e6;
        bool o_1 = /* bool o_1 = unimplemented  {imul eax, dword [eax-0x5fefaa16], 0x47} */;
        
        if (s != o_1)
        {
            int32_t eax_1;
            eax_1 = *0x394701fc;
            *arg3;
            *arg3 |= 0x81;
            int32_t temp4 = *(arg1 - 0x3f1e661f);
            *(arg1 - 0x3f1e661f) = temp4 >> 1;
            bool o_2 = /* bool o_2 = unimplemented  {rcr dword [ecx-0x3f1e661f], sub_0+1} */;
            
            if (!(temp4 >> 1) || temp4 >> 1 < 0 != o_2)
            {
                *eax_1[1] = 0x2f;
                __out_immb_al(0xf2, 0, eflags);
            }
            
            int32_t temp5 = *(arg3 + 0x7ff3c047);
            *(arg3 + 0x7ff3c047) += eax_1;
            *(arg1 - 0x7bfcfa15) = *(arg1 - 0x7bfcfa15) + eax_1;
            /* undefined */
        }
    }
    else
    {
        int32_t eax;
        eax = 0xfc + *((arg3 << 3) + 0x525f05b4);
        char temp0_1 = arg1;
        arg1 = *arg2[1];
        *arg2[1] = temp0_1;
        __return_addr_1 = __return_addr;
        __cli(eflags);
        *arg1 &= 0xe1a47160;
    }
    *(__return_addr_1 - 0x80) &= *arg1[1];
    /* undefined */
}

int32_t __convention("regparm") sub_15c0a(int32_t arg1, int16_t arg2, char* arg3, int32_t arg4 @ ebp, int32_t* arg5 @ edi)
{
    *arg3 = arg1;
    *(arg4 - 0x7c);
    __int1();
    void* temp0 = *arg3;
    *arg3 = arg1;
    int16_t ebx;
    *(temp0 - 0x1e7fde7f) = *ebx[1];
    *arg3 &= 0xd0;
    arg2 += *arg2[1];
    *arg5 = arg5;
    /* undefined */
}

int32_t __convention("regparm") sub_15d6b(int32_t arg1, int32_t arg2, char* arg3, int32_t arg4 @ ebp, int32_t arg5 @ edi)
{
    bool c_1 = /* bool c_1 = unimplemented  {sbb eax, 0x29e4b370} */;
    int32_t eflags;
    bool c;
    
    if (arg1 - 0x29e4b370 >= 0)
    {
        int32_t eax;
        eax = __in_al_immb(0x21, eflags);
        eax ^= 0xfa;
        /* undefined */
    }
    
    int32_t* eax_2 = *0x903190f9;
    
    while (true)
    {
        int32_t* temp3_1 = eax_2;
        bool cond:2_1 = c_1;
        eax_2 = temp3_1 + 0x5efd81c;
        c_1 = /* c_1 = unimplemented  {sbb eax, 0xfa1027e4} */;
        bool z_1 = !(temp3_1 + 0x5efd81c);
        
        while (!z_1 && !c_1)
        {
            char temp0_3 = arg2;
            int16_t ebx;
            arg2 = *ebx[1];
            *ebx[1] = temp0_3;
            void* eax_4 = arg5;
            int32_t temp4_1 = *(eax_4 - 0x7bde7f7f);
            *(eax_4 - 0x7bde7f7f) += arg2;
            int32_t* esp;
            
            if (temp4_1 != -(arg2) && arg3 == 1)
            {
                *esp;
                esp[1];
                esp[2];
                esp[4];
                esp[5];
                esp[6];
                esp[7];
                int32_t eax_5;
                *eax_5[1] = 0x45;
                /* undefined */
            }
            
            *(arg3 - 1) &= 0x64;
            *(arg3 - 1) &= 0x74;
            *(arg3 - 1) &= 0x78;
            *(arg3 - 1) &= 0x86;
            arg3[0xffffffae] -= 0xb0;
            *(eax_4 - 0x77);
            int32_t edi = *(esp + 6);
            *(esp + 0xa);
            int32_t ebp = *(esp + 0xe);
            ebx = *(esp + 0x16);
            arg2 = *(esp + 0x1a);
            arg3 = *(esp + 0x1e);
            eax_2 = *(esp + 0x22);
            *(arg3 - 0x80) |= 0x8046f069;
            *eax_2 += ebp;
            *(esp + 0x26);
            esp = &esp[0xa];
            *arg3 &= 0x70;
            *eax_2[1] = 0x83;
            arg5 = edi + 1;
            *0xf9a18990 &= 0x90;
            *(eax_2 - 0x1be23f77);
            *(eax_2 - 0x1be23f77) ^= arg2;
            char temp0_2;
            temp0_2 = __daa(eax_2, eflags);
            eax_2 = temp0_2;
            char temp6_1 = arg2;
            arg2 = temp6_1 + *ebx[1];
            c_1 = temp6_1 + *ebx[1] < temp6_1;
            z_1 = !(temp6_1 + *ebx[1]);
        }
    }
}

int32_t __convention("regparm") sub_15f50(void* arg1, void* arg2, char* arg3, void* arg4 @ ebp, int32_t arg5 @ edi)
{
    *arg3 -= 0x80;
    *(arg1 - 0x7efe7fff) += arg1;
    label_15f59:
    void* ebx;
    arg1 += *(ebx - 0x77f979fb);
    *(arg1 - 0x7fbe7def);
    *(arg1 - 0x7fbe7def) |= arg1;
    
    while (true)
    {
        *(arg1 - 0x7ffca393) += arg1;
        *(arg4 - 0x78b87eff) |= *ebx[1];
        char temp2_1 = arg2;
        arg2 -= 0x11;
        *(arg1 - 0x600e7e97) = *(arg1 - 0x600e7e97) + arg1;
        arg1 += arg3[0x90411a23];
        
        while (true)
        {
            *(arg1 + 0x46f02181) = *arg2[1];
            arg3[1] &= 0x7c;
            int32_t eflags;
            __out_immb_al(0x80, arg1, eflags);
            *(arg1 - 0x6fbe7def) += arg1;
            void* esp;
            char eax = *(esp + 0x1c);
            int32_t* ecx_2;
            ecx_2 = (*(esp + 0x18)) ^ 0xdb;
            *(*(esp + 4) + 0x6190f5cf);
            __int1();
            __out_immb_al(0xf9, eax, eflags);
            *ecx_2 -= 0xf3c0d079;
            ecx_2[-0x20] &= 0xf1;
            *(esp + 0x1c) = 0x83f3c0f9;
            *(esp + 0x7c);
            *(esp + 0x80);
            arg4 = *(esp + 0x84);
            arg2 = *(esp + 0x90);
            arg1 = *(esp + 0x98);
            esp += 0x9c;
            arg3 = (*(esp + 0x94)) ^ 0x58;
            ebx = (*(esp + 0x8c)) << 0x91;
            bool o_1 = /* bool o_1 = unimplemented  {shl bl, 0x91} */;
            
            if (!o_1)
                goto label_15f59;
            
            __int1();
            *(esp - 4) = esp;
            esp -= 4;
            ebx <<= 0x92;
            bool c_2 = /* bool c_2 = unimplemented  {shl bl, 0x92} */;
            bool o_2 = /* bool o_2 = unimplemented  {shl bl, 0x92} */;
            
            if (!o_2)
            {
                *(arg2 - 0x5ec7fbf) = *(arg2 - 0x5ec7fbf) + arg1;
                break;
            }
            
            __int1();
            *(esp - 4) = arg1;
            *(esp - 4);
            *esp;
            *(esp + 4);
            void* ebx_2 = *(esp + 0xc);
            arg2 = *(esp + 0x10);
            arg3 = *(esp + 0x14);
            *(esp + 0x18);
            esp += 0x1c;
            arg3 ^= 0x4c;
            ebx_2 <<= 0x8e;
            bool o_3 = /* bool o_3 = unimplemented  {shl bl, 0x8e} */;
            
            if (!o_3)
            {
                *(ebx_2 - 0x7e);
                *(ebx_2 - 0x7e) = arg3;
                /* undefined */
            }
            
            __int1();
            ebx_2 <<= 0x8f;
            bool o_4 = /* bool o_4 = unimplemented  {shl bl, 0x8f} */;
            
            if (o_4)
            {
                __int1();
                /* undefined */
            }
            
            arg1 = *(arg3 - 0x7efd600f) * 0x90411a23;
        }
    }
}

int32_t sub_16023(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, char arg5, int32_t arg6)
{
    /* undefined */
}

int32_t __convention("regparm") sub_16080(int32_t arg1, int32_t arg2, void* arg3, int32_t arg4 @ esi, void* arg5 @ edi, long double arg6 @ st0)
{
    *(arg4 - 0x61) -= 0xd1;
    int16_t es;
    uint32_t var_4 = es;
    
    while (true)
    {
        int32_t eflags;
        int32_t eflags_1;
        char temp0_1;
        temp0_1 = __das(arg1, eflags);
        arg1 = temp0_1;
        char temp0_2;
        temp0_2 = __das(arg1, eflags_1);
        arg1 = temp0_2;
        arg1 <<= 1;
        arg3 -= 1;
        
        if (arg1 && !arg3)
            break;
        
        *(arg5 - 0xa) += arg5;
        arg4 s>>= 1;
        *(arg5 - 0x1c);
        
        while (true)
        {
            int32_t eax_1 = arg1 + 0xe104763;
            char temp2_1 = eax_1;
            eax_1 += 0x43;
            
            if (temp2_1 != 0xbd)
            {
                int16_t ebx;
                *ebx[1] <<= 0x81;
                *(arg5 - 0xa) += arg5;
                /* undefined */
            }
            
            *(arg5 - 0x1c);
            *(arg4 + 0x76) -= 0xd0;
            arg1 = arg3 + 1;
            *(arg5 - 0xa) &= arg5;
            long double st0_1;
            bool c2_1;
            st0_1 = __fsin(arg6);
            arg6 = st0_1;
            char temp4_1 = *(arg1 - 0x1e26d97f) ^ 0x85;
            *(arg1 - 0x1e26d97f) = temp4_1;
            arg3 = eax_1 + 0xbcb476b - 1;
            
            if (!temp4_1 || arg3)
                break;
            
            *(arg3 - 0x2e0980ff);
        }
    }
    
    trap(0xd);
}

char* __convention("regparm") sub_160e3(char* arg1, int16_t arg2, int32_t arg3, void* arg4 @ ebp, int32_t arg5 @ esi, void* arg6 @ edi, long double arg7 @ st0)
{
    char temp1 = arg1[0xc62681b0];
    arg1[0xc62681b0] += 1;
    char* ecx = arg3 - 1;
    int32_t eflags;
    bool c;
    bool c_1;
    
    if (temp1 != 0xff && !ecx)
    {
        __out_immb_al(0x84, arg1, eflags);
        ecx -= 1;
        
        if (temp1 == 0xff || ecx)
        {
            *ecx = *ecx - 0x7e;
            
            if (ecx + 1)
                /* undefined */
            
            char temp0_4 = *(arg6 - 0x80);
            *(arg6 - 0x80) = arg1;
            arg1 = temp0_4;
            trap(0xd);
        }
        
        *(arg6 - 0xa);
        *(arg6 - 0xa) &= arg6;
        c_1 = false;
        goto label_160f2;
    }
    
    void* ebx;
    
    if (temp1 > 0xff)
    {
        char* temp0_2 = *(ecx + 4);
        *(ecx + 4) = ecx;
        ecx = temp0_2;
        void* temp2_1 = ebx;
        ebx += 1;
        
        if (temp2_1 == 0xffffffff || c)
        {
            char temp6_1 = *(arg4 - 0x6ae21bb9);
            *(arg4 - 0x6ae21bb9) += 1;
            void* ecx_2;
            
            if (temp6_1 != 0xff)
            {
                *(arg6 - 0x1c);
                arg1 = 0x4304498f - 0x4998b895;
                char temp8_1 = arg1;
                arg1 += 0x43;
                c_1 = temp8_1 >= 0xbd;
                bool z_1 = temp8_1 == 0xbd;
                
                while (true)
                {
                    if (z_1)
                        return arg1;
                    
                    label_160f2:
                    arg5 = 0xe44785fe;
                    char* eax = arg1 + 0xbcb476b;
                    *0xe4478674 &= *ecx[1];
                    ecx[0xb5f67f21] = ROLB(ecx[0xb5f67f21], 1);
                    char temp5_1 = eax[0xb52681b0];
                    eax[0xb52681b0] += 1;
                    
                    if (temp5_1 == 0xff || ecx != 1)
                        trap(0xd);
                    
                    ecx_2 = ecx - 2;
                    
                    if (temp5_1 == 0xff || ecx_2)
                        break;
                    
                    ecx = eax;
                    int32_t temp12_1 = *(arg6 - 0xa);
                    *(arg6 - 0xa) += arg6;
                    c_1 = temp12_1 + arg6 < temp12_1;
                    *0xe44785fe;
                    char temp17_1 = *(arg4 - 0x6ae21bb9);
                    *(arg4 - 0x6ae21bb9) += 1;
                    z_1 = temp17_1 == 0xff;
                    arg1 = 0x43044998;
                }
                
                arg1 = 0x41fcf1ef;
                goto label_160d8;
            }
            
            *ebx[1] <<= 0x81;
            bool c_2 = /* bool c_2 = unimplemented  {shl bh, 0x81} */;
            *(arg6 - 0xa) = *(arg6 - 0xa) + arg6;
            arg1 = ecx;
            arg1[0x912681b0];
            arg1[0x912681b0] += 1;
            ecx_2 = 0x4304498e;
            void* temp13_1 = ebx;
            ebx += 1;
            char temp14_1;
            
            for (bool cond:8_1 = temp13_1 == 0xffffffff; cond:8_1; cond:8_1 = temp14_1 == 0xbd)
            {
                *(arg6 - 0x1c);
                *(arg5 + 0x76) -= 0xd0;
                void* eax_4 = ecx_2;
                *(arg6 - 0xa) &= arg6;
                long double st0_1;
                bool c2_1;
                st0_1 = __fsin(arg7);
                arg7 = st0_1;
                char temp19_1 = *(eax_4 - 0x1e26d97f) ^ 0x85;
                *(eax_4 - 0x1e26d97f) = temp19_1;
                void* ecx_5 = arg1 + 0xbcb476b - 1;
                
                if (!temp19_1 || ecx_5)
                {
                    int32_t eflags_1;
                    char temp0_5;
                    temp0_5 = __das(eax_4, eflags);
                    eax_4 = temp0_5;
                    char temp0_6;
                    temp0_6 = __das(eax_4, eflags_1);
                    eax_4 = temp0_6;
                    eax_4 <<= 1;
                    ecx_5 -= 1;
                    
                    if (eax_4 && !ecx_5)
                        trap(0xd);
                    
                    *(arg6 - 0xa) += arg6;
                    arg5 s>>= 1;
                    *(arg6 - 0x1c);
                }
                else
                    *(ecx_5 - 0x2e0980ff);
                
                arg1 = eax_4 + 0xe104763;
                ecx_2 = ecx_5 + 1;
                label_160d8:
                temp14_1 = arg1;
                arg1 += 0x43;
            }
            
            *ebx[1] <<= 0x81;
            *(arg6 - 0xa) += arg6;
            /* undefined */
        }
        
        *(arg6 - 0xa) &= arg6;
    }
    
    void* ecx_3 = ecx & 0xbe80e67f;
    *(arg5 - 0x438fb848);
    *(arg6 - 2) += arg6;
    *ecx_3 = __return_addr;
    char temp0_3 = *(ebx - 0x7e);
    *(ebx - 0x7e) = ecx_3;
    ecx_3 = temp0_3;
    /* undefined */
}

void* const __convention("regparm") sub_16123(void* arg1, int16_t arg2, int32_t arg3, void* arg4 @ ebp, int32_t arg5 @ esi, void* arg6 @ edi, long double arg7 @ st0)
{
    void* result_1 = arg1;
    *(arg6 - 0xa) += arg6;
    *0x81b080fe = arg3;
    void* es;
    *(es - 0x3f1e7a1f) = arg3;
    *(result_1 - 0x640980ef);
    int32_t eax = arg3 - 0x498fb895;
    char temp2 = eax;
    eax += 0x43;
    bool cond:8 = temp2 != 0xbd;
    void* const result;
    void* ecx_1;
    void* ebx;
    char temp7_1;
    bool c_2;
    bool z_2;
    bool cond:6_1;
    
    while (true)
    {
        if (cond:8)
        {
            *(arg6 - 0x1c);
            result = eax - 0x4998b895;
            char temp4_1 = result;
            result += 0x43;
            c_2 = temp4_1 >= 0xbd;
            z_2 = temp4_1 == 0xbd;
            goto label_16120;
        }
        
        *ebx[1] <<= 0x81;
        bool c_1 = /* bool c_1 = unimplemented  {shl bh, 0x81} */;
        int32_t temp6_1 = *(arg6 - 0xa);
        *(arg6 - 0xa) = temp6_1 + arg6;
        c_2 = temp6_1 + arg6 < temp6_1 || (c_1 && temp6_1 + arg6 == temp6_1);
        result = result_1;
        temp7_1 = *(result - 0x6ed97e50);
        *(result - 0x6ed97e50) += 1;
        ecx_1 = eax - 1;
        
        if (temp7_1 == 0xff || ecx_1)
        {
            void* temp8_1 = ebx;
            ebx += 1;
            cond:6_1 = temp8_1 == 0xffffffff;
            goto label_160da;
        }
        
        result_1 = ecx_1 - 1;
        
        if (temp7_1 == 0xff || result_1)
            break;
        
        *(arg6 - 0xa) &= arg6;
        *ebx[1] = *arg2[1];
        *(arg6 - 0x1c);
        int32_t eax_1 = result - 0x4987b895;
        char temp11_1 = eax_1;
        eax_1 += 0x43;
        
        if (temp11_1 != 0xbd && temp11_1 < 0xbd)
        {
            *(arg6 - 0xa) &= arg6;
            void* ecx_2 = result_1 & 0xbe80e67f;
            *(arg5 - 0x438fb848);
            *(arg6 - 2) += arg6;
            *ecx_2 = __return_addr;
            char temp0_1 = *(ebx - 0x7e);
            *(ebx - 0x7e) = ecx_2;
            ecx_2 = temp0_1;
            /* undefined */
        }
        
        char temp14_1 = *(arg4 - 0x6ae21bb9);
        *(arg4 - 0x6ae21bb9) += 1;
        cond:8 = temp14_1 != 0xff;
        eax = 0x4304498f;
    }
    
    if (temp7_1 > 0xff)
        /* undefined */
    
    while (true)
    {
        arg5 = 0xe44785fe;
        void* result_2 = result + 0xbcb476b;
        *0xe4478674 &= *result_1[1];
        *(result_1 - 0x4a0980df) = ROLB(*(result_1 - 0x4a0980df), 1);
        char temp9_1 = *(result_2 - 0x4ad97e50);
        *(result_2 - 0x4ad97e50) += 1;
        
        if (temp9_1 == 0xff || result_1 != 1)
            trap(0xd);
        
        ecx_1 = result_1 - 2;
        
        if (temp9_1 == 0xff || ecx_1)
        {
            result = 0x41fcf1ef;
            
            while (true)
            {
                char temp17_1 = result;
                result += 0x43;
                cond:6_1 = temp17_1 == 0xbd;
                label_160da:
                
                if (!cond:6_1)
                    break;
                
                *(arg6 - 0x1c);
                *(arg5 + 0x76) -= 0xd0;
                void* eax_4 = ecx_1;
                *(arg6 - 0xa) &= arg6;
                long double st0_1;
                bool c2_1;
                st0_1 = __fsin(arg7);
                arg7 = st0_1;
                char temp13_1 = *(eax_4 - 0x1e26d97f) ^ 0x85;
                *(eax_4 - 0x1e26d97f) = temp13_1;
                void* ecx_3 = result + 0xbcb476b - 1;
                
                if (!temp13_1 || ecx_3)
                {
                    int32_t eflags;
                    int32_t eflags_1;
                    char temp0_3;
                    temp0_3 = __das(eax_4, eflags);
                    eax_4 = temp0_3;
                    char temp0_4;
                    temp0_4 = __das(eax_4, eflags_1);
                    eax_4 = temp0_4;
                    eax_4 <<= 1;
                    ecx_3 -= 1;
                    
                    if (eax_4 && !ecx_3)
                        trap(0xd);
                    
                    *(arg6 - 0xa) += arg6;
                    arg5 s>>= 1;
                    *(arg6 - 0x1c);
                }
                else
                    *(ecx_3 - 0x2e0980ff);
                
                result = eax_4 + 0xe104763;
                ecx_1 = ecx_3 + 1;
            }
            
            *ebx[1] <<= 0x81;
            *(arg6 - 0xa) += arg6;
            /* undefined */
        }
        
        result_1 = result_2;
        int32_t temp15_1 = *(arg6 - 0xa);
        *(arg6 - 0xa) += arg6;
        c_2 = temp15_1 + arg6 < temp15_1;
        *0xe44785fe;
        char temp19_1 = *(arg4 - 0x6ae21bb9);
        *(arg4 - 0x6ae21bb9) += 1;
        z_2 = temp19_1 == 0xff;
        result = 0x43044998;
        label_16120:
        
        if (z_2)
            return result;
    }
}

int32_t __convention("fastcall") sub_1619f(char* arg1, int32_t arg2 @ esi)
{
    bool c;
    *arg1 = *arg1 - 0x7e;
    void* ebx;
    *(ebx - 0x7e);
    *(ebx - 0x7e) = arg1 + 1;
    /* undefined */
}

int32_t __convention("fastcall") sub_161bf(char* arg1, int32_t arg2 @ esi)
{
    bool c;
    *arg1 = *arg1 - 0x7e;
    void* ebx;
    *(ebx - 0x7e);
    *(ebx - 0x7e) = arg1 + 1;
    /* undefined */
}

long double __convention("fastcall") sub_16241(uint16_t* arg1, void* arg2 @ ebp, void* arg3 @ edi, long double arg4 @ st0)
{
    bool c = true;
    uint16_t* esi_1 = arg1;
    int32_t eax_1;
    char* ecx_1;
    void* ecx_2;
    void* edx_1;
    char* ebx;
    
    while (true)
    {
        bool z;
        
        if (!z && !c)
            __int1();
        else
        {
            eax_1 = 0x84b4a768();
            eax_1 -= 0x63;
            arg4 = *(esi_1 - 0x44) / arg4;
            int32_t esp;
            *(esp - 4) = eax_1;
            *(esp - 8) = ecx_1;
            *(esp - 0xc) = edx_1;
            *(esp - 0x10) = ebx;
            *(esp - 0x14) = esp - 0x10;
            *(esp - 0x18) = arg2;
            *(esp - 0x1c) = esi_1;
            *(esp - 0x20) = arg3;
            esp -= 0x20;
            *ecx_1 &= 0x80;
            *(edx_1 - 0x7b4b6fbf) += eax_1 - 1;
            arg3 += 1;
            char temp1_1 = *ecx_1;
            *ecx_1 &= 0x85;
            
            if (!(temp1_1 & 0x85) || ecx_1 != 1)
                break;
            
            *(arg2 - 0x5e) = RRCD(*(arg2 - 0x5e), 0x69, false);
            bool c_1 = /* bool c_1 = unimplemented  {rcr dword [ebp-0x5e], 0x69} */;
            
            while (true)
            {
                *(esp - 4) = arg2;
                esp -= 4;
                int32_t temp5_1 = *0xf430b308;
                *0xf430b308 = RRCD(temp5_1, 0x80, c_1);
                c = /* c = unimplemented  {rcr dword [0xfffffffff430b308], 0x80} */;
                z = !RRCD(temp5_1, 0x80, c_1);
                int32_t eflags;
                esi_1 = __outsb(edx_1, *esi_1, esi_1, eflags);
                
                if (z || c)
                    break;
                
                void* eax_3;
                eax_3 = *0xc4f67b69;
                *(eax_3 - 0x1e78de80);
                *(eax_3 - 0x1e78de80) &= *ebx[1];
                void* ecx_3;
                ecx_3 = *(eax_3 - 0x7f);
                arg2 += 1;
                ecx_2 = ecx_3 + arg3;
                bool c_2 = ecx_3 + arg3 < ecx_3;
                char temp8_1 = *ecx_2;
                *ecx_2 = temp8_1 + 0x5e;
                bool p_1 = /* bool p_1 = unimplemented  {sbb byte [ecx], 0xa2} */;
                *(ecx_2 + 0x81dc155);
                edx_1 = *(ecx_2 + 0x81dc155) * 0x80f430b3;
                c_1 = /* c_1 = unimplemented  {imul edx, dword [ecx+0x81dc155], 0x80f430b3} */;
                esi_1 = __outsb(edx_1, *esi_1, esi_1, eflags);
                
                if (temp8_1 + 0x5e)
                {
                    while (p_1)
                        ebx = 0xf8;
                    
                    *ebx[1] += *edx_1[1];
                    *ecx_2 |= 0xffffffb0;
                    *0xb9298001 = arg3 + 0x15;
                    ebx[0x89692048] <<= 1;
                    *(arg3 + 0x869e130);
                    return arg4;
                }
            }
        }
    }
    
    *(ecx_1 - 0x11);
    char temp2 = *(ecx_1 - 1);
    *(ecx_1 - 1) -= 0x80;
    *(edx_1 - 0x7b4b81bf) = *(edx_1 - 0x7b4b81bf) + eax_1 - 1;
    *(ecx_1 - 1);
    *(ecx_1 - 1) &= 0x2db39182;
    ecx_2 = (ecx_1 - 1) - 0x65;
    *ecx_2 &= 0x82;
    *(eax_1 + 0x47732e7f + (ebx << 2)) &= 0x822181e1;
    *0x80e84d47 = ecx_2;
    *(edx_1 + 0x6c47a81f) = *(edx_1 + 0x6c47a81f) + ecx_2;
    void* eax_6;
    eax_6 = ecx_2 * *(arg2 - 7);
    char temp0_3 = *(arg3 - 0x77);
    *(arg3 - 0x77) = eax_6;
    eax_6 = temp0_3;
    __int1();
    *(arg3 + 1) = *(esi_1 + 1);
    void* edi_2 = arg3 + 2;
    ebx = 0x47;
    *ebx &= 0x86;
    *(edi_2 - 0x15098db7) &= eax_6;
    *(eax_1 + 0x47732e7f) &= 0x8a;
    __int1();
    /* undefined */
}

void sub_16441() __pure
{
    int32_t eax;
    int32_t var_4 = eax;
    int32_t ecx;
    int32_t var_8 = ecx;
    int32_t edx;
    int32_t var_c = edx;
    int32_t ebx;
    int32_t var_10 = ebx;
    int32_t* var_14 = &var_10;
    int32_t ebp;
    int32_t var_18 = ebp;
    int32_t esi;
    int32_t var_1c = esi;
    int32_t edi;
    int32_t var_20 = edi;
}

int32_t sub_16443()
{
    int32_t var_4 = 0xdc812ae4;
    int32_t eflags;
    int32_t result;
    result = __in_al_immb(0x22, eflags);
    return result;
}

int32_t __convention("regparm") sub_1646f(void* arg1, int32_t arg2, int32_t arg3, void* arg4 @ ebp, uint16_t* arg5 @ esi, long double arg6 @ st0, long double arg7 @ st4)
{
    int32_t eflags;
    int32_t eflags_1 = __cli(eflags);
    void* ebx;
    *ebx[1] = *ebx[1];
    void* var_4 = arg1;
    int32_t var_8 = arg3;
    int32_t var_c = arg2;
    void* var_10 = ebx;
    int32_t* var_14 = &var_10;
    void* var_18 = arg4;
    uint16_t* var_1c = arg5;
    int32_t edi;
    int32_t var_20 = edi;
    int32_t* esp_1 = &var_20;
    *(arg1 - 0x6f8e500c);
    bool c = /* bool c = unimplemented  {imul eax, dword [eax-0x6f8e500c], 0x8698948} */;
    int32_t* ebx_1 = ebx + 1;
    int32_t* eax_1 = *(arg1 - 0x6f8e500c) * 0x8698948 + 0x430fde80;
    
    if (eax_1 && arg3 != 1)
    {
        *(arg3 - 1) ^= 0x84;
        *(eax_1 + 0x3180e84d);
    }
    else
    {
        *eax_1[1] = ebx_1;
        *eax_1;
        arg5 = eax_1[1];
        arg4 = eax_1[2];
        ebx_1 = eax_1[4];
        arg2 = eax_1[5];
        char* ecx_1 = eax_1[6];
        int32_t eax_2 = eax_1[7];
        esp_1 = &eax_1[8];
        int32_t temp2_1;
        
        do
        {
            temp2_1 = *ebx_1 & 0x498a2090;
            *ebx_1 = temp2_1;
            
            if (temp2_1 <= 0)
                /* undefined */
            
            ecx_1 -= 1;
        } while (!temp2_1 || !ecx_1);
        *(ecx_1 + (arg2 << 2) - 0x17b26e7b) ^= eax_2;
        *ecx_1 ^= 0x97;
    }
    
    void* eax_3;
    int32_t* ecx_2;
    void* edx;
    eax_3 = 0x9749fc4a();
    __int1();
    __outsd(edx, *arg5, arg5, eflags_1);
    eax_3 = *0x81b0a079;
    int32_t temp3_1;
    
    while (true)
    {
        temp3_1 = *(&ecx_2[edx * 2] - 0x2f67d67e);
        *(&ecx_2[edx * 2] - 0x2f67d67e) -= ecx_2;
        
        if (temp3_1 != ecx_2 && ecx_2 == 1)
            break;
        
        *esp_1;
        void* esi = esp_1[1];
        arg4 = esp_1[2];
        ebx_1 = esp_1[4];
        edx = esp_1[5];
        ecx_2 = esp_1[6];
        eax_3 = esp_1[7];
        esp_1 = &esp_1[8];
        int32_t temp6_1;
        
        do
        {
            temp6_1 = *ebx_1 & 0x49842090;
            *ebx_1 = temp6_1;
            
            if (temp6_1 <= 0)
            {
                *ecx_2 &= 0x2180e666;
                __out_immb_al(0x80, eax_3, eflags_1);
                *(esi + eax_3 - 0x80) += edx;
                *(eax_3 - 0x4fbe7ef3) &= eax_3;
                *eax_3[1] = 7;
                ecx_2 = 0x84;
                /* undefined */
            }
            
            ecx_2 -= 1;
        } while (!temp6_1 || !ecx_2);
        eax_3 = 0x81;
    }
    
    void* ecx_5;
    ecx_5 = (ecx_2 - 2) + *ebx_1[1];
    edx = 1;
    void* eax_6;
    eax_6 = *0x89219eb0;
    __int1();
    *(eax_6 - 0x721e728f);
    *(eax_6 - 0x721e728f) &= esp_1;
    void* ecx_6;
    ecx_6 = (ecx_5 - 1) + *ebx_1[1];
    edx = 1;
    char* eax_7;
    eax_7 = 0xb0 & *(edx - 0x7fb774b9);
    *(eax_7 - 0x7e) = eax_7;
    __int1();
    void* eax_8;
    eax_8 = ecx_6 & 0xf8;
    char* ecx_7;
    ecx_7 = eax_7 & 0x80;
    uint16_t* esi_2 = 0xb187be80;
    eax_8 = 0xbc;
    char temp5 = *ecx_7;
    *ecx_7 -= 0x80;
    *(ecx_7 - 0x7fcb3fbf) = *(ecx_7 - 0x7fcb3fbf) + eax_8;
    void* edx_2 = edx & ebx_1;
    *(eax_8 - 0x1afa3cdf) -= 0x44;
    void* esp_5 = esp_1 + arg4;
    char* fsbase;
    *(fsbase + ecx_7) &= 0x7f;
    
    while (true)
    {
        ebx_1 &= eax_8;
        bool cond:3_1 = eax_8 < 0xfccfc31b;
        eax_8 = __in_oeax_immb(0x3c, eflags_1);
        
        if (cond:3_1)
            break;
        
        *ecx_7 &= 0x7f;
    }
    
    *(esp_5 - 4) = 0xa0f984fa;
    int16_t cs;
    *(esp_5 - 8) = cs;
    *ecx_7;
    *ecx_7 &= 0x20;
    
    while (true)
    {
        ecx_7[0xffffffd6] = *(eax_8 - 1)[1];
        ecx_7[0xffffff81] = *(eax_8 - 2)[1];
        esi_2 &= edx_2;
        ecx_7[0xffffff80] = *edx_2[1];
        eax_8 = (eax_8 - 3) & *(edx_2 + 0x77479020);
        eax_8 = eax_8 * *(eax_8 - 6);
        eax_8 = *0x2021800e;
    }
}

int32_t __convention("regparm") sub_1649f(void* arg1, void* arg2, void* arg3 @ ebp, void* arg4 @ esi, int32_t arg5 @ edi, long double arg6 @ st0, long double arg7 @ st4)
{
    int32_t* ecx = arg1 * 0xc069e0b0;
    void* esp = &*__return_addr[2];
    int32_t eflags;
    int32_t i;
    
    do
    {
        ecx -= 1;
        int32_t* ebx;
        bool cond:1;
        
        if (cond:1 && ecx)
        {
            arg1 = 0x81;
            int32_t temp1_1 = *(&ecx[arg2 * 2] - 0x2f67d67e);
            *(&ecx[arg2 * 2] - 0x2f67d67e) -= ecx;
            
            if (temp1_1 == ecx || ecx != 1)
            {
                *esp;
                arg4 = *(esp + 4);
                arg3 = *(esp + 8);
                ebx = *(esp + 0x10);
                arg2 = *(esp + 0x14);
                ecx = *(esp + 0x18);
                arg1 = *(esp + 0x1c);
                esp += 0x20;
            }
            else
            {
                void* ecx_2;
                ecx_2 = (ecx - 2) + *ebx[1];
                arg2 = 1;
                void* eax;
                eax = *0x89219eb0;
                __int1();
                *(eax - 0x721e728f);
                *(eax - 0x721e728f) &= esp;
                void* ecx_3;
                ecx_3 = (ecx_2 - 1) + *ebx[1];
                arg2 = 1;
                char* eax_1;
                eax_1 = 0xb0 & *(arg2 - 0x7fb774b9);
                *(eax_1 - 0x7e) = eax_1;
                __int1();
                void* eax_2;
                eax_2 = ecx_3 & 0xf8;
                char* ecx_4;
                ecx_4 = eax_1 & 0x80;
                uint16_t* esi_1 = 0xb187be80;
                eax_2 = 0xbc;
                char temp4 = *ecx_4;
                *ecx_4 -= 0x80;
                *(ecx_4 - 0x7fcb3fbf) = *(ecx_4 - 0x7fcb3fbf) + eax_2;
                void* edx = arg2 & ebx;
                *(eax_2 - 0x1afa3cdf) -= 0x44;
                void* esp_2 = esp + arg3;
                char* fsbase;
                *(fsbase + ecx_4) &= 0x7f;
                
                while (true)
                {
                    ebx &= eax_2;
                    bool cond:2_1 = eax_2 < 0xfccfc31b;
                    eax_2 = __in_oeax_immb(0x3c, eflags);
                    
                    if (cond:2_1)
                        break;
                    
                    *ecx_4 &= 0x7f;
                }
                
                *(esp_2 - 4) = 0xa0f984fa;
                int16_t cs;
                *(esp_2 - 8) = cs;
                *ecx_4;
                *ecx_4 &= 0x20;
                
                while (true)
                {
                    ecx_4[0xffffffd6] = *(eax_2 - 1)[1];
                    ecx_4[0xffffff81] = *(eax_2 - 2)[1];
                    esi_1 &= edx;
                    ecx_4[0xffffff80] = *edx[1];
                    eax_2 = (eax_2 - 3) & *(edx + 0x77479020);
                    eax_2 = eax_2 * *(eax_2 - 6);
                    eax_2 = *0x2021800e;
                }
            }
        }
        
        i = *ebx & 0x49842090;
        *ebx = i;
        cond:1 = i;
    } while (i > 0);
    *ecx &= 0x2180e666;
    __out_immb_al(0x80, arg1, eflags);
    *(arg4 + arg1 - 0x80) += arg2;
    *(arg1 - 0x4fbe7ef3) &= arg1;
    *arg1[1] = 7;
    ecx = 0x84;
    /* undefined */
}

int32_t sub_1663a()
{
    __int1();
    int32_t eflags;
    __sti(eflags);
    /* undefined */
}

int32_t __convention("regparm") sub_166d3(int32_t arg1, uint16_t arg2, uint16_t arg3, void* arg4 @ esi)
{
    *(arg1 - 0x81);
    int32_t eflags;
    uint16_t temp0_1;
    temp0_1 = __arpl_gpr16_gpr16(arg3, arg2);
    int32_t ebx;
    *(arg1 - 0x61) &= *ebx[1];
    uint16_t eax;
    eax = 0x94;
    void* ecx_2 = arg1 - 2;
    *(arg4 - 0x40);
    *(arg4 - 0x40) u>>= 0x1d;
    bool c = /* bool c = unimplemented  {shr byte [esi-0x40], 0x1d} */;
    bool cond:0 = ebx == 1;
    /* unimplemented  {enter 0x8666, 0x49} */
    void* temp4_1;
    
    for (; cond:0; cond:0 = temp4_1 == 1)
    {
        *0x66c84893 = RRCB(*0x66c84893, 0x86, c);
        c = /* c = unimplemented  {rcr byte [0x66c84893], 0x86} */;
        temp4_1 = ecx_2;
        ecx_2 -= 1;
    }
    
    uint16_t ebx_1;
    *ebx_1[1] = *eax[1] & (ebx - 1);
    /* undefined */
}

int32_t __convention("regparm") sub_168c1(void* arg1, int32_t arg2, int32_t arg3, int32_t arg4 @ ebp, int32_t arg5 @ esi, void* arg6 @ edi, long double arg7 @ st0)
{
    int32_t* ebx;
    bool z;
    
    if (z || arg3 != 1)
    {
        bool c;
        *(arg1 + 0x1182e84d) = *(arg1 + 0x1182e84d) + 0x228049ad;
        *ebx &= 0xf1826981;
        *arg6;
        void* edi_4 = arg6 + 1;
        void* eax_5;
        int32_t ecx_10;
        
        while (true)
        {
            int16_t fs;
            char* ecx_15 = fs;
            *ecx_15 &= 0x81;
            *(arg1 + 0x4d908190) &= arg1;
            int32_t eax_11;
            int32_t ecx_16;
            char* edx_5;
            eax_11 = 0x49a779e8();
            *edx_5 &= 0x81;
            int32_t eax_12 = eax_11 & *(ecx_16 - 0x5e0e7d97);
            *(arg5 - 0x6eb4180);
            char eax_14 = eax_12 * 2 - 0x1a1f904;
            bool c_6 = /* bool c_6 = unimplemented  {sbb eax, 0x1a1f904} */;
            int32_t* eax_15 = *0xa2f91401;
            *eax_15 = *eax_15 + ecx_16;
            ebx += 1;
            *0xa1f90401 = 0xda;
            *(edx_5 - 0x5f06eb1f) += arg5;
            *0x944b028a += &__return_addr;
            int32_t temp6_1 = ROLD(*(edx_5 - 0x642f55d7), 1);
            *(edx_5 - 0x642f55d7) = temp6_1;
            
            if (temp6_1 && ecx_16 == 1)
            {
                *(ecx_16 - 0x7e6f7fe1) &= 0x42180da;
                *(edi_4 - 0x76) += 0x47;
                int32_t ecx_18 = 0x48947a3a();
                int32_t var_4_1 = ecx_18;
                *(ecx_18 + 0x79f18149);
                /* undefined */
            }
            
            int32_t ebp_3 = arg4 - 1;
            
            while (true)
            {
                int32_t eax_9;
                char* edx_3;
                eax_9 = 0x49b579b0();
                *edx_3 &= 0x81;
                eax_5 = eax_9 & *(ecx_10 - 0x420e7d97);
                
                if (!eax_5 || ecx_10 != 1)
                {
                    char temp0_2 = *(edi_4 - 0x80);
                    *(edi_4 - 0x80) = eax_5;
                    eax_5 = temp0_2;
                    *(ecx_10 - 0x7e6f7fe1) &= eax_5;
                    *(edi_4 - 0x76) += 0x47;
                    ebp_3 -= 1;
                }
                else
                {
                    if (eax_5 && ecx_10 == 2)
                        break;
                    
                    *(ecx_10 - 2) &= 0x81;
                    *(eax_5 - 0x7c6f7e70) &= eax_5;
                    edi_4 += 1;
                    eax_5 = *(edi_4 + 0x4d);
                }
                
                int32_t eax_6;
                void* ecx_9;
                int32_t edx_2;
                eax_6 = 0x47b2797c();
                *(ecx_9 - 0x7e) = RORD(*(ecx_9 - 0x7e), 0xf1);
                __fyl2xp1(/* __fyl2xp1(unimplemented  {fyl2xp1 }, unimplemented  {fyl2xp1 }) */, 
                    /* __fyl2xp1(unimplemented  {fyl2xp1 }, unimplemented  {fyl2xp1 }) */);
                /* unimplemented  {fyl2xp1 } */
                /* unimplemented  {fyl2xp1 } */
                int16_t top = top + 1;
                *(arg5 - 0x6eb4180);
                bool c_3 = /* bool c_3 = unimplemented  {sbb eax, 0x1a1f904} */;
                *edx_2[1] = 0xe1;
                void* eax_8;
                eax_8 = (eax_6 * 2 - 0x1a1f904) - 7;
                eax_8 = *0x81b0a001;
                int32_t temp13_1 = *(ecx_9 - 0x56d67d2f);
                *(ecx_9 - 0x56d67d2f) -= edx_2;
                *(ebx - 0x7ede7f1f) = RRCB(*(ebx - 0x7ede7f1f), 1, temp13_1 < edx_2);
                *(eax_8 + 0x4d908190) &= eax_8;
            }
            
            if (!eax_5 || ecx_10 != 3)
                break;
            
            *(ecx_10 - 0x7e6f7fe3) &= eax_5;
            arg4 = ebp_3 - 1;
            int32_t eax_10;
            int32_t ecx_14;
            char* edx_4;
            eax_10 = 0x49ae79ce();
            *edx_4 &= 0x81;
            arg1 = eax_10 & *(ecx_14 - 0x510e7d97);
        }
        
        *(ecx_10 - 0x7e6f7fe3) &= eax_5;
        *(edi_4 - 0x76) += 0x47;
        0x47b27952();
        /* undefined */
    }
    
    *(arg3 - 0x7e6f7fe1) &= arg1;
    *(arg6 - 0x76) += 0x47;
    void* eax;
    int32_t edx;
    eax = 0x488d7a56();
    void* var_4 = eax;
    *(edx + 0x6bf18149);
    *(arg4 - 0x7ede7f20) -= 1;
    *(eax - 0x7c6f7e70) &= eax;
    eax = *(arg6 + 0x4e);
    void* eax_1;
    char* ecx;
    eax_1 = 0x48867a72(var_4);
    *(ebx + 0x5df18149);
    *(eax_1 - 0x417f42) += 1;
    int32_t* esp = 0x647c0180;
    *ecx &= 0x66;
    *0xb4ffb557;
    *(arg6 - 0x80);
    
    while (true)
    {
        *esp;
        esp[1];
        esp[2];
        esp[4];
        esp[5];
        esp[7];
        void* eax_4;
        eax_4 = *0x20218160;
        esp[7] = *(&esp[8 + eax_4] - 0x1fde7fb9);
        esp = &esp[7];
    }
}

int32_t __convention("regparm") sub_16943(int32_t arg1, int32_t arg2, char* arg3, int32_t arg4 @ ebp, int32_t arg5 @ edi, long double arg6 @ st0)
{
    char* ebx;
    ebx[0xffffffe8] += *arg1[1];
    label_16948:
    int16_t eax;
    eax = *0xbff67f47;
    bool d_1 = false;
    eax ^= 0xf8;
    arg1 = eax;
    arg5 = arg5 + arg3;
    ebx[0xffffffe4] += *arg1[1];
    arg3 = (arg3 - 1) ^ 0x2180fee2;
    bool cond:0_1 = !arg3;
    bool cond:1_1 = arg3 >= 0;
    bool cond:2_1 = arg3 > 0;
    
    if (arg3)
    {
        while (true)
        {
            arg3[0x1d] = *arg2[1];
            arg3 -= 1;
            
            if (cond:0_1 || arg3)
            {
                int32_t eflags;
                char temp0_1;
                temp0_1 = __arpl_gpr16_gpr16(arg1, arg4);
                arg1 = temp0_1;
                goto label_16948;
            }
            
            if (cond:1_1)
            {
                arg1 = 0xd2;
                goto label_169b2;
            }
            
            while (cond:2_1)
                /* nop */
            
            arg3 &= 0x82;
            void* temp2_1 = *(arg3 + 0x20fd41f1) & arg3;
            *(arg3 + 0x20fd41f1) = temp2_1;
            
            if (temp2_1 < 0)
            {
                while (true)
                {
                    arg1 = 0xdd;
                    void* ecx_1 = arg3 - 1;
                    arg1 = arg2;
                    arg6 = arg6 * *(ecx_1 - 0x80);
                    
                    if (*(ecx_1 - 0x7d) - 0x29 >= 0)
                    {
                        while (true)
                        {
                            int32_t* esp;
                            *esp;
                            esp[1];
                            esp[2];
                            esp[4];
                            esp[5];
                            esp[7];
                            int32_t eax_2;
                            eax_2 = *0x20218160;
                            esp[7] = *(&esp[8 + eax_2] - 0x1fde7fb9);
                            esp = &esp[7];
                        }
                    }
                    else
                    {
                        *(arg1 + (arg2 << 3) - 0x6efb625) -= arg1;
                        *arg5;
                        
                        if (d_1)
                            arg5 -= 1;
                        else
                            arg5 += 1;
                        
                        *(arg1 - 0x7f2e92d7) += arg1;
                        arg4 &= arg2;
                        *(ecx_1 - 2) = *arg2[1];
                        
                        if (arg1 != 1 && ecx_1 == 1)
                        {
                            *(ecx_1 - 0x82);
                            *(ecx_1 - 2) += 0x48d0b038;
                            break;
                        }
                        
                        *(ecx_1 - 1) &= 0x89;
                        __int1();
                        arg3 = ecx_1;
                        d_1 = true;
                        arg3[0xffffffe0] &= *ebx[1];
                    }
                }
                
                break;
            }
            
            __int1();
            
            do
                arg3 -= 1;
             while (arg3);
            
            *arg3 &= 0xe3;
            arg1 = 0xf180479f;
            cond:0_1 = false;
            cond:1_1 = false;
            cond:2_1 = false;
        }
    }
    
    arg1 = *0xd1f67f47;
    /* unimplemented  {enter 0xd2b0, 0x4a} */
    label_169b2:
    /* undefined */
}

int32_t __convention("regparm") sub_17046(int32_t arg1, int32_t arg2, void* arg3, int32_t arg4 @ ebp, void* arg5 @ esi, int32_t* arg6 @ edi, int80_t arg7 @ st0)
{
    *(arg1 - 4) = arg4;
    arg3 &= 0x94;
    int32_t ebp = *(arg1 - 4);
    int16_t es;
    *(arg3 - 0x6c) = es;
    *(arg1 - 4) = ebp;
    void* ebx;
    int16_t es_1;
    ebx = __les_gprz_memp(*0xf430b320);
    *(arg5 + 0x6d) += *arg3[1];
    char temp1_1;
    
    while (true)
    {
        arg7 - *(arg2 - 0x7b1e711f);
        temp1_1 = arg2;
        arg2 -= 0x54;
        
        if (temp1_1 != 0x54)
            break;
        
        *(ebx + 0x6e00f430) &= *arg2[1];
        int32_t eflags;
        int32_t temp0_1;
        temp0_1 = __insd(arg6 + 1, arg2, eflags);
        *arg6 = temp0_1;
    }
    
    __return_addr = __return_addr + arg1 - 4;
    /* undefined */
}

int32_t __convention("regparm") sub_1706e(void* arg1, int32_t, void* arg3, void* arg4 @ esi, int32_t arg5 @ edi, long double arg6 @ st0)
{
    int16_t es;
    *(arg3 - 0x6c) = es;
    void* ecx = arg3 & 0x55942580;
    char ebx;
    int16_t es_1;
    ebx = __les_gprz_memp(*0xf430b320);
    *(arg4 + 0x6d) += *ecx[1];
    *(arg1 - 0x7f9b8344);
    void* var_8 = ecx;
    /* undefined */
}

int32_t __convention("regparm") sub_17095(void* arg1, void* arg2, int32_t* arg3, void* arg4 @ ebp, char arg5 @ esi, char* arg6 @ edi, int80_t arg7 @ st0)
{
    int32_t* ebx;
    bool c;
    
    if (c ^ 1)
    {
        *(arg4 - 0x18) += arg3;
        *arg3 &= 0x91839280;
        ebx = 0x47;
        *arg6 = arg5;
        arg6 = &arg6[1 * 2];
        *0x80218147;
        __int1();
    }
    
    *0x90bcfff9;
    int32_t eax_2;
    *eax_2[1] = 0x8c;
    *(ebx - 0x7b) s>>= 0x29;
    *(arg2 - 0x3d96bfb7);
    *(arg2 - 0x3d96bfb7) = RORB(*(arg2 - 0x3d96bfb7), 1);
    bool o = /* bool o = unimplemented  {ror byte [edx-0x3d96bfb7], 0x1} */;
    
    if (!o)
    {
        *(ebx - 0x77) = (arg3 - 1);
        *ebx;
        int32_t* var_4 = ebx;
        *ebx;
        *ebx = ROLB(*ebx, 0xc0);
        bool c_1 = /* bool c_1 = unimplemented  {rol byte [eax], 0xc0} */;
        char* eax_4 = ebx + 0x6beb77b;
        *eax_4 = ROLB(*eax_4, 0x7a);
        *arg6 = -(*arg6);
        /* undefined */
    }
    
    void* const __return_addr_1 = __return_addr;
    int16_t es;
    *(arg3 - 0x6d) = es;
    __return_addr = __return_addr_1;
    void* ebx_2;
    int16_t es_1;
    ebx_2 = __les_gprz_memp(*0xf430b320);
    *(arg1 + 0x6d) += *(arg3 - 1)[1];
    char temp3_1;
    
    while (true)
    {
        arg7 - *(arg2 - 0x7b1e711f);
        temp3_1 = arg2;
        arg2 -= 0x54;
        
        if (temp3_1 != 0x54)
            break;
        
        *(ebx_2 + 0x6e00f430) &= *arg2[1];
        int32_t eflags;
        int32_t temp0_2;
        temp0_2 = __insd(&arg6[1], arg2, eflags);
        *arg6 = temp0_2;
    }
    
    *ebx = *ebx + &__return_addr;
    /* undefined */
}

int32_t __convention("fastcall") sub_171c7(void* arg1, void* arg2, void* arg3 @ ebp, void* arg4 @ esi, int32_t arg5 @ edi, long double arg6 @ st0)
{
    void* esi = arg4 + 1;
    bool c;
    *(arg3 - 0x80) = RRCB(*(arg3 - 0x80), 0x41, c);
    int32_t eax;
    *eax[1] = 0xe5;
    void* ecx_1;
    char* ebx;
    
    while (true)
    {
        *(arg1 - 0x7b);
        ecx_1 = arg2;
        arg2 = arg1 - 1;
        
        if (ecx_1)
            break;
        
        __int1();
        eax = 0xf8;
        *0x83a1dee1 = 0xf8;
        __int1();
        
        while (true)
        {
            eax = *esi;
            esi += 1;
            arg1 = ecx_1 - 1;
            
            if (arg1)
                break;
            
            ecx_1 = arg1 ^ 0xffffffa9;
            
            if (!ecx_1)
            {
                int32_t eflags;
                uint16_t temp0_3;
                temp0_3 = __arpl_gpr16_gpr16(arg5, arg5);
                arg5 = temp0_3;
                ebx <<= 0x85;
                *(arg3 - 0xa) ^= esi;
                /* undefined */
            }
        }
    }
    
    void* ecx_3 = ecx_1 - 0x1f - 1;
    *(ecx_3 - 0x78);
    *(esi - 0x77b721df);
    *(esi - 0x77b721df) = ROLB(*(esi - 0x77b721df), 1);
    bool o = /* bool o = unimplemented  {rol byte [esi-0x77b721df], 0x1} */;
    
    if (!o)
    {
        *(ecx_3 + 0x4dfee5f1);
        0x958cc701();
        int32_t ecx_4 = 0xe84ec703();
        *(ebx + 0x4d);
        *(ebx + 0x4d) = ecx_4;
    }
    else
    {
        __int1();
        *ebx[1] &= arg2;
        char temp3_1 = *ebx & 0xdd;
        *ebx = temp3_1;
        eax = *0xf6744790;
        *(ecx_3 - 0x80);
        
        if (temp3_1 < 0)
        {
            *(ecx_3 + (arg2 << 3) + 0x48d72187) -= esi;
            *(ecx_3 - 0x27) = *arg2[1];
            *0xf8bbf183;
            /* undefined */
        }
    }
    
    *0xb847a947 = 0x47a4c707();
    int32_t* eax_4;
    void* ecx_6;
    eax_4 = 0xf94eba15();
    *(ecx_6 - 0xe50e7f) -= 0x4e;
    *eax_4 &= 0xf18147d8;
    ecx_6 = 0x3d;
    /* jump -> 0x6001a */
}

int32_t __convention("regparm") sub_17253(int32_t arg1, void* arg2)
{
    arg1 *= 2;
    int16_t ebx;
    *(arg2 - 0xa) += *ebx[1];
    /* undefined */
}

int32_t __convention("regparm") sub_17276(int32_t arg1, uint16_t arg2, int32_t** arg3, int16_t* arg4 @ edi, long double arg5 @ st0, long double arg6 @ st1)
{
    int32_t var_4 = arg1;
    *0xf883f183;
    *(arg3 - 0x80);
    bool s;
    
    if (!s)
        /* undefined */
    
    while (true)
    {
        *(arg3 - 0x26) = *arg2[1];
        *0xf97af183;
        int32_t eflags;
        int16_t temp0_1;
        temp0_1 = __insd(arg4, arg2, eflags);
        *arg4 = temp0_1;
        arg4[-2] = ~arg4[-2];
        void* eax_2;
        eax_2 = __in_al_immb(0xe1, eflags);
        *arg3 = *eax_2[1];
        arg2 = 0x48;
        arg3[-0xb] = *arg2[1];
        *(arg3 - 0x41);
        *(eax_2 - 0x78);
        *(eax_2 - 0x78) = RORD(*(eax_2 - 0x78), (arg3 - 1));
        bool o_1 = /* bool o_1 = unimplemented  {ror dword [eax-0x78], cl} */;
        
        if (o_1)
            break;
        
        arg3 -= 2;
        arg3[-0x10];
        *arg3 = &var_4;
        int32_t ebx;
        *ebx[1] = 0x48;
    }
    
    *0xf96cf183;
    /* undefined */
}

int32_t sub_172c3()
{
    *0xf95ef183;
    /* undefined */
}

int32_t __convention("regparm") sub_17317(int32_t arg1, void* arg2)
{
    arg1 *= 2;
    int16_t ebx;
    *(arg2 - 0xa) += *ebx[1];
    /* undefined */
}

int32_t __convention("fastcall") sub_1732c(char* arg1, void* arg2, int32_t arg3 @ esi, void* arg4 @ edi, long double arg5 @ st0)
{
    bool o = /* bool o = unimplemented  {imul esi, esi, 0xffffff82} */;
    int32_t eflags;
    __sti(eflags);
    *(arg1 - 0x80);
    bool z;
    bool s;
    
    if (!z && s == o)
        *(arg2 - 0x7fb62505);
    
    void* temp1 = *(arg2 - 0x278e77b8) & arg1;
    *(arg2 - 0x278e77b8) = temp1;
    *(*0xf921f183 - 0x78);
    
    if (temp1 >= 0)
    {
        *(arg4 - 5) = -(*(arg4 - 5));
        /* undefined */
    }
    
    *arg1 <<= 1;
    /* undefined */
}

int32_t __convention("regparm") sub_17391(char* arg1, int32_t* arg2, int32_t arg3, void* arg4 @ ebp, uint16_t* arg5 @ esi, int32_t arg6 @ edi, int80_t arg7 @ st0)
{
    int32_t eflags;
    uint16_t* esi_1 = __outsb(arg2, *arg5, arg5, eflags);
    int32_t ecx;
    uint8_t* edi;
    uint8_t temp0;
    temp0 = __rep_insb(arg6, arg2, arg3, eflags);
    *edi = temp0;
    void* ecx_2;
    void* ebx;
    int16_t* esp;
    void* ebp;
    bool z;
    bool z_1;
    bool o_4;
    bool cond:1_1;
    bool cond:2_1;
    
    if (z || ecx != 1)
    {
        esp = &__return_addr & arg2;
        
        if (esp >= 0)
        {
            *(ecx - 0x11) <<= 0x21;
            char temp0_3;
            char temp1_1;
            temp0_3 = __aam_immb(0x73, arg1);
            arg1 = temp0_3;
            *arg1[1] = temp1_1;
        }
        
        z_1 = !((ecx - 1) & esp);
        ecx_2 = ((ecx - 1) & esp) - 1;
        
        if (!z_1 && !ecx_2)
        {
            __out_dx_al(arg2, arg1, eflags);
            *(arg1 - 0xf8e3eff) = &arg1[*(arg1 - 0xf8e3eff)];
            ebx &= arg2;
            ebp = arg4 + 1;
            arg1 = *0xe473e162;
            label_17423:
            ebx &= esi_1;
            cond:1_1 = ebx >= 0;
            cond:2_1 = !ebx;
            *(esp - 4) = 0x64a064fa;
            esp -= 4;
            
            if (ebx >= 0)
            {
                *(ebp - 0x60) = ROLD(*(ebp - 0x60), ecx_2);
                /* undefined */
            }
            
            goto label_1742d;
        }
        
        __in_oeax_immb(0x2c, eflags);
        label_17465:
        __outsb(arg2, *esi_1, esi_1, eflags);
        int32_t ecx_5;
        uint8_t* edi_2;
        uint8_t temp0_7;
        temp0_7 = __rep_insb(edi, arg2, ecx_2, eflags);
        *edi_2 = temp0_7;
        
        if (!z_1 && ecx_5 == 1)
            trap(0xd);
        
        void* ebx_1;
        
        while (true)
        {
            void* temp2_1 = ebx;
            ebx += 1;
            o_4 = temp2_1 + 1;
            ecx_2 = arg2;
            arg1 = *0xc26d4069;
            label_174e9:
            
            if (o_4)
            {
                *0x80b07801 = arg1;
                *ecx_2 &= arg1;
                bool o_5;
                
                do
                {
                    *0xa0e1a501 = arg1;
                    *(arg1 + 0x6d);
                    arg1 = *(arg1 + 0x6d) * 0xfa3020e4;
                    o_5 = /* o_5 = unimplemented  {imul eax, dword [eax+0x6d], 0xfa3020e4} */;
                } while (!o_5);
                ecx_2 -= arg1[8];
                ebx_1 = ebx + 1;
                arg1 = *0xe46d4069;
                
                while (true)
                {
                    *arg1;
                    *arg1 &= *ecx_2[1];
                    eflags = __cli(eflags);
                    arg1 -= 1;
                    *(ebx_1 - 0x79) |= arg1;
                    *(arg1 - 0x1b92bf97) <<= 1;
                }
            }
            else
            {
                eflags = __cli(eflags);
                
                if (o_4)
                    break;
            }
        }
        
        arg1[0xffffff8a];
        *arg1 ^= ecx_2;
        ebx += 1;
        int32_t eax_1 = arg1;
        *(eax_1 - 0x5f6e7fdf) = ROLB(*(eax_1 - 0x5f6e7fdf), 1);
        *(eax_1 + 0x41238122);
        __int1();
        *ecx_2 &= 0xf9014832;
        label_17545:
        *ecx_2;
        *ecx_2 &= 0xf9014822;
        void* eax_4;
        *eax_4[1] = 1;
        *(ecx_2 + 0x228069a0) = *(ecx_2 + 0x228069a0) - 0x7f;
        void* eax_5 = eax_4 & *(ecx_2 + 0x6d);
        int16_t ds;
        *(esp - 4) = ds;
        int32_t* ecx_8 = (ecx_2 - 1) ^ 0xe188f814;
        *ecx_8 &= 0x69a09180;
        *arg2 &= 0x81;
        *(ecx_8 + 0x6d);
        void* eax_6 = eax_5 & *(ecx_8 + 0x6d);
        *(ecx_8 - 0x7f) = *(ecx_8 - 0x7f) - ecx_8;
        __int1();
        *ebx_1[1] = *(ebx + 1)[1] | eax_6;
        int16_t ss_1 = *(esp - 4);
        char temp12 = *(ecx_8 - 0x81);
        *(ecx_8 - 0x81) -= 0x20;
        void* ecx_9;
        ecx_9 = (ecx_8 - 1) - arg2[0x10];
        bool c_3 = /* bool c_3 = unimplemented  {sbb cl, byte [edx+0x40]} */;
        void* ecx_10 = ecx_9 - *ecx_9;
        arg7 - *(ecx_10 * 3);
        *(ecx_10 - 0x80) -= 0x23;
        *(esp - 6) = ss_1;
        /* undefined */
    }
    
    arg1 = *0xef73f264;
    bool c;
    
    if (!c)
    {
        *(arg2 - 0xa) += *ebx[1];
        /* undefined */
    }
    
    *(arg1 - 0x2fae3eff) = &arg1[*(arg1 - 0x2fae3eff)];
    ebx &= arg2;
    ebp = arg4 + 1;
    arg1 = *0xe473e162;
    void* esi = esi_1 & &__return_addr;
    cond:1_1 = esi >= 0;
    cond:2_1 = !esi;
    esi_1 = __outsb(arg2, *esi, esi, eflags);
    uint8_t temp0_1;
    temp0_1 = __rep_insb(edi, arg2, ecx - 1, eflags);
    *edi = temp0_1;
    
    while (true)
    {
        ecx_2 -= 1;
        
        if (!cond:2_1 && !ecx_2)
            trap(0xd);
        
        void* fsbase;
        arg1 = *(fsbase - 0x108c0d9c);
        label_1742d:
        
        if (!cond:1_1)
            break;
        
        uint8_t temp0_2;
        temp0_2 = __insb(edi, arg2, eflags);
        *edi = temp0_2;
    }
    
    void* temp3_1 = ecx_2;
    ecx_2 += arg1;
    
    if (!(temp3_1 + arg1))
        goto label_17423;
    
    void* esi_4 = esi_1 & arg1;
    bool z_2 = !(esi_1 & arg1);
    uint16_t* esi_5 = __outsb(arg2, *esi_4, esi_4, eflags);
    uint8_t* edi_1;
    uint8_t temp0_4;
    temp0_4 = __rep_insb(edi, arg2, ecx_2, eflags);
    *edi_1 = temp0_4;
    
    while (true)
    {
        ecx_2 -= 1;
        
        if (z_2 || ecx_2)
        {
            *(arg2 + 0x28018001) &= esi_5;
            arg2 -= 1;
            *ecx_2 &= 0xb0;
            *arg1[1] = 7;
            ecx_2 = 0x84;
            edi = &edi_1[1];
            arg1 = *0xb8f91069;
            goto label_174c3;
        }
        
        arg1 = *0xe321c452;
        *(esp - 4) = arg1;
        *(esp - 8) = ecx_2;
        *(esp - 0xc) = arg2;
        *(esp - 0x10) = ebx;
        *(esp - 0x14) = esp - 0x10;
        *(esp - 0x18) = ebp;
        *(esp - 0x1c) = esi_5;
        *(esp - 0x20) = edi_1;
        esp -= 0x20;
        char* gsbase;
        char temp6_1 = *(gsbase + ecx_2);
        *(gsbase + ecx_2) -= 0x3f;
        z_2 = temp6_1 == 0x3f;
        
        if (temp6_1 - 0x3f)
            break;
        
        uint8_t temp0_5;
        temp0_5 = __insb(edi_1, arg2, eflags);
        *edi_1 = temp0_5;
    }
    
    void* esi_6 = esi_5 & arg1;
    esi_5 = __outsb(arg2, *esi_6, esi_6, eflags);
    int32_t ecx_4;
    uint8_t temp0_6;
    temp0_6 = __rep_insb(edi_1, arg2, ecx_2, eflags);
    *edi = temp0_6;
    ecx_2 = ecx_4 - 1;
    
    if (esi_6 && !ecx_2)
    {
        arg1 = *0xef73f264;
        
        if (esi_6 >= 0)
        {
            while (true)
            {
                *ecx_2 &= 0xb0;
                *(edi - 0x7ff98fff);
                ecx_2 &= arg1;
                *(arg1 + 0x4a) |= arg1;
            }
        }
        else
        {
            *(arg1 - 0xf8e3eff) = &arg1[*(arg1 - 0xf8e3eff)];
            ebx &= arg2;
            arg1 = *0xe473e162;
            esi_1 = esi_5 & esp;
            z_1 = !(esi_5 & esp);
        }
        
        goto label_17465;
    }
    
    label_174c3:
    *(arg1 - 0x7f2e0cd7) = &arg1[*(arg1 - 0x7f2e0cd7)];
    *(ecx_2 - 0x4706fe97) &= esp;
    int32_t temp8_1 = *(arg1 - 0x3d92bf97);
    *(arg1 - 0x3d92bf97) += esp;
    bool o_3 = temp8_1 + esp;
    
    if (o_3)
    {
        *arg2 &= esi_5;
        ecx_2 += edi;
        goto label_17545;
    }
    
    eflags = __cli(eflags);
    
    if (!o_3)
    {
        int16_t* edi_3;
        int16_t temp0_8;
        temp0_8 = __insd(edi, arg2, eflags);
        *edi_3 = temp0_8;
        return 0x4069a001;
    }
    
    *(ebx - 0x77) |= arg1;
    *(arg1 - 0x3d92bf97);
    *(arg1 - 0x3d92bf97) <<= 1;
    o_4 = /* o_4 = unimplemented  {shl dword [eax-0x3d92bf97], sub_0+1} */;
    goto label_174e9;
}

int32_t __convention("fastcall") sub_17645(int32_t arg1, int32_t arg2, void* arg3 @ ebp, int32_t arg4 @ edi, long double arg5 @ st0)
{
    bool z;
    
    if (!z && arg1 != 1)
    {
        *(arg1 - 0x82) -= 0x23;
        /* undefined */
    }
    
    int32_t* ecx;
    void* ebx;
    ecx = (arg1 - 1) + *ebx[1];
    *0xc8936122 = ROLD(*0xc8936122, 1);
    int32_t eflags;
    int16_t* edi;
    int16_t temp0;
    temp0 = __insd(arg4, arg2, eflags);
    *edi = temp0;
    void* eax_1;
    eax_1 = __in_al_immb(0x20, eflags);
    arg2 ^= *ebx[1];
    bool c = false;
    
    for (bool o = false; !o; o = /* o = unimplemented  {imul eax, dword [eax+0x6d], 0xfa3020e4} */)
    {
        void* eax = *ecx * 0xe001b8f9;
        *(eax + 0x6d);
        eax_1 = *(eax + 0x6d) * 0xfa3020e4;
        c = /* c = unimplemented  {imul eax, dword [eax+0x6d], 0xfa3020e4} */;
    }
    
    long double x87_r0 = arg5 * *(eax_1 + 8);
    char* edx = ecx;
    
    if (ebx == 0xffffffff || arg2 == 1)
    {
        int16_t* edi_1;
        int16_t temp0_3;
        temp0_3 = __insd(edi, edx, eflags);
        *edi_1 = temp0_3;
        void* eax_4;
        eax_4 = __in_al_immb(0x20, eflags);
        edx ^= *(ebx + 1)[1];
        
        for (bool o_1 = false; !o_1; 
            o_1 = /* o_1 = unimplemented  {imul eax, dword [eax+0x6d], 0xfa3020e4} */)
        {
            *(ebx - 0x78) |= (eax_4 - 1);
            int32_t eax_3 = (eax_4 - 1) << 1;
            *(eax_3 + 0x6d);
            eax_4 = *(eax_3 + 0x6d) * 0xfa3020e4;
        }
        
        *(eax_4 + 8) = x87_r0;
        *(arg2 - 1);
        *(arg2 - 1) &= 0xf90148d6;
        int32_t eax_5;
        *eax_5[1] = 1;
        *(arg2 + 0x228069df) = *(arg2 + 0x228069df) - 0x7f;
        int32_t eax_6 = eax_5 & *(arg2 + 0x6c);
        
        while (true)
        {
            char temp11_1 = *(arg2 - 0x80);
            *(arg2 - 0x80) = RORB(*(arg2 - 0x80), (arg2 - 1));
            bool o_2 = /* bool o_2 = unimplemented  {ror byte [ecx-0x7f], cl} */;
            __int1();
            
            if (RORB(temp11_1, (arg2 - 1)) < 0 == o_2)
                break;
            
            int16_t temp0_5;
            temp0_5 = __insd(edi_1, edx, eflags);
            *edi_1 = temp0_5;
        }
        
        int32_t* ecx_2;
        ecx_2 = *eax_6[1];
        *ecx_2 &= 0x69e09180;
        *edx &= 0x81;
        *(ecx_2 + 0x6d);
        trap(0x49);
    }
    
    void* eax_8 = eax_1 + *(arg3 - 0x66b8656f);
    void* edi_2 = edi + 1;
    void* const esi = 0x82f18149;
    void* ecx_4 = arg2 - 2;
    
    if (edi != 0xffffffff && ecx_4)
    {
        int32_t var_4_1 = 0xffffffe4;
        *eax_8;
        *eax_8 &= *edx[1];
        __cli(eflags);
        *(ebx - 0x78) |= (eax_8 - 1);
        *(ebx - 0x73) |= (*(((eax_8 - 1) << 1) + 0x3020e46a) * 0xa3f171fa - 1);
        *(ecx_4 + 0x1489e21) = ROLB(*(ecx_4 + 0x1489e21), 1);
        *eax_8[1] = 1;
        *(ecx_4 + 0x228069e0) = *(ecx_4 + 0x228069e0) - 0x7f;
        void* eax_15 = eax_8 & *(ecx_4 - 0x7eb66596);
        __int1();
        eax_15 |= 0xf9;
        ecx_4 = *eax_15[1];
        *ecx_4 &= 0x69e09180;
        *edx &= 0x81;
        *(ecx_4 - 0x7eb66a96);
        __int1();
        void* ebx_1;
        *ebx_1[1] = *(ebx + 1)[1] + ecx_4;
        *(esi + (edx << 2)) &= 0x4b;
        *(ecx_4 + 8) -= 0x85eaf51b;
        *(esi - 0x7fb67026) = &edx[*(esi - 0x7fb67026)];
        *(ebx_1 - 0x73b56ddd);
        /* undefined */
    }
    
    bool o_4;
    
    do
    {
        *0x82f180c9;
        eax_8 = __in_al_dx(edx, eflags);
        int32_t temp7_1 = *(eax_8 - 0x77961edf);
        *(eax_8 - 0x77961edf) = ROLD(*(eax_8 - 0x77961edf), 1);
        bool c_1 = /* bool c_1 = unimplemented  {rol dword [eax-0x77961edf], sub_0+1} */;
        
        if (!ROLD(temp7_1, 1) || c_1)
        {
            arg3 -= 1;
            0x91868a56();
            void* eax_9;
            eax_9 = 0xbe491024();
            __int1();
            eax_8 = *(eax_9 - 0x13d67f82) * 0xe12180d1;
            
            while (true)
            {
                *(eax_8 - 0x7f961f8a);
                ecx_4 = *(eax_8 - 0x7f961f8a) * 0x90f3c26a;
                bool o_3 = /* bool o_3 =
                    unimplemented  {imul ecx, dword [eax-0x7f961f8a], 0x90f3c26a} */;
                
                if (o_3)
                {
                    *(edx - 0x5606feb8) &= arg3;
                    void* temp12_1 = edi_2;
                    edi_2 += ecx_4;
                    o_4 = temp12_1 + ecx_4;
                    eflags = __cli(eflags);
                    break;
                }
                
                eflags = __cli(eflags);
                
                if (o_3)
                    goto label_176fa;
            }
        }
        else
        {
            eax_8 = *(eax_8 - 0x6f0c3d96) * 0x71fa3070;
            __int1();
            label_176fa:
            *ecx_4[1] = 0x48;
            *(ebx - 0x76) |= eax_8;
            *((eax_8 << 1) - 0x6f0c3d96);
            __int1();
            char* eax_11;
            eax_11 = 0x48;
            *edx[1] = *eax_11;
            *(ebx - 0x6e) |= 0x48;
            eax_11[0xe0918021] = ROLB(eax_11[0xe0918021], 1);
            eax_8 = *(eax_11 - 0x7edc7ede) * 0x8149ac6a;
            __int1();
            ecx_4 ^= edi_2;
            *ecx_4 &= 0xf90148aa;
            o_4 = false;
        }
    } while (!o_4);
    
    while (true)
    {
        eax_8 -= 1;
        *0xecd262ee |= eax_8;
        edx[0xffffffe4] -= 0x20;
        edx ^= *(ebx + 1)[1];
    }
}

int32_t sub_1789b(int32_t arg1 @ edi)
{
    int32_t eax;
    *eax[1] = 0x84;
    /* undefined */
}

int32_t __convention("fastcall") sub_178c7(char* arg1, int32_t arg2 @ esi)
{
    int32_t eax;
    eax = 0x80;
    *(arg1 + (arg2 << 2) - 0x6e24310) &= eax;
    *arg1 -= 0x80;
    __int1();
    *(arg1 - 0x7606e230) -= arg1;
    int32_t ebx;
    *0x801188f9 += ebx;
    /* undefined */
}

int32_t __convention("fastcall") sub_178ea(int32_t arg1)
{
    *arg1;
    arg1 ^= 0x8f;
    int32_t ebx;
    *0x80118af9 += ebx;
    /* undefined */
}

int32_t __convention("regparm") sub_17902(int32_t arg1, char arg2, int32_t arg3)
{
    int32_t* ecx = arg3 ^ 0xea800083;
    *ecx;
    *ecx = ROLD(*ecx, 6);
    bool c = /* bool c = unimplemented  {rol dword [ecx], sub_0+6} */;
    char* eax = arg1 - 0x188f91d;
    *eax;
    *eax += arg2;
    /* undefined */
}

int32_t __convention("regparm") sub_1791e(void* arg1, int16_t arg2, int32_t arg3, void* arg4 @ ebp, void* arg5 @ esi, int32_t arg6 @ edi)
{
    void** ecx_4 = arg3 ^ 0xea800083;
    *ecx_4 += &__return_addr;
    int32_t* ebx;
    int16_t es;
    ebx = __les_gprz_memp(*0x189f026);
    *arg1[1] ^= 0xa8;
    uint32_t edi = arg6 + 1;
    int32_t eflags;
    __out_immb_al(0x78, arg1, eflags);
    *arg1[1] = 0x80;
    *(arg1 - 0x7f07a30f) &= arg1;
    arg1 &= 0x84;
    void* ecx = ecx_4 - 1;
    
    if (arg1 && !ecx)
    {
        *(arg1 - 0x1706900f);
        *(arg1 - 0x1706900f) &= arg1;
        
        if (arg1 - 0x2c8ab305 < 0)
            /* undefined */
        
        int32_t eflags_1;
        char temp0_1;
        temp0_1 = __daa(&__return_addr, eflags);
        void* const* eax_1;
        eax_1 = temp0_1;
        *(arg5 + 0x20802315);
        ecx ^= 0xbb;
        *(edi - 0x7e);
        *(es + eax_1 - 0x1fb0d184) -= 0x2f8d4cf2;
        *ecx &= 0xce;
        *(ecx - 0x7f) = *(arg2 - 1)[1];
        /* undefined */
    }
    
    int16_t cs;
    uint32_t var_4 = cs;
    uint32_t* esp_3 = &var_4;
    ebx = 0x6e;
    *(arg1 - 0x7e2e20d1) = ROLB(*(arg1 - 0x7e2e20d1), 1);
    void* eax_5 = arg1 & *(arg1 - 0x7fde45e0);
    __int1();
    
    while (true)
    {
        void* eax_7 = eax_5 - ebx;
        label_179d5:
        *(eax_7 + 0x7fe18624) = ROLB(*(eax_7 + 0x7fe18624), 1);
        *(eax_7 - 0x7206dd0f) &= eax_7;
        *ecx;
        int32_t edx_2;
        eax_5 = 0x8ab47f06();
        eax_5 -= 0x76;
        /* unimplemented  {ficomp st0, dword [0xffffffff800180f9]} f- *0x800180f9 */ - *0x800180f9;
        /* unimplemented  {ficomp st0, dword [0xffffffff800180f9]} */
        int16_t top = top + 1;
        __int1();
        *ecx = ROLB(*ecx, 0x98);
        eax_5 = 0x86;
        void* temp3_1 = ebx[-0xee39dee] & arg4;
        ebx[-0xee39dee] = temp3_1;
        bool cond:4_1 = !temp3_1;
        
        while (true)
        {
            if (cond:4_1 || ecx != 1)
            {
                int32_t temp4_1 = *(edi - 0x79db7f30);
                *(edi - 0x79db7f30) -= edi;
                
                if (temp4_1 != edi && ecx == 2)
                {
                    *(eax_5 - 0x7206b50f) &= eax_5;
                    *(ecx - 2);
                    int32_t eax_6;
                    int32_t edx_1;
                    eax_6 = 0x8ab47eb6();
                    char temp6_1 = eax_6;
                    eax_6 -= 0x76;
                    
                    if (temp6_1 == 0x76)
                        /* unimplemented  {fcmove st0, st7} */
                    
                    eax_5 = COMBINE(edx_1, eax_6) / *(arg5 + 0x77);
                    *(arg5 + 0x77);
                    *(arg5 + 0x20802381);
                    *(eax_5 - 0x7e076c0f) &= eax_5;
                    label_179ad:
                    *ecx;
                    *(esp_3 - 4) = es;
                    *(edi - 0x5c);
                    eax_5 = 0xb0;
                    *(esp_3 - 4);
                    esp_3 -= 2;
                    *(es + eax_5) -= 0x2f914cf2;
                    *edi -= 0xdf;
                    *(ecx - 0x45df7fdd) = ROLD(*(ecx - 0x45df7fdd), 1);
                    *(eax_5 - 0x7f077f0f) &= eax_5;
                    break;
                }
                
                *ebx[1] = 0x21;
                ecx = (ecx - 2) ^ 0x61;
            }
            else
            {
                void* temp5_1 = *(ecx - 0x3f8e77b9) & arg4;
                *(ecx - 0x3f8e77b9) = temp5_1;
                
                if (!temp5_1 || ecx != 2)
                {
                    char temp0_2 = (ecx - 2);
                    ecx = *eax_5[1];
                    *eax_5[1] = temp0_2;
                    
                    if (temp5_1 > 0)
                        goto label_179ad;
                    
                    ecx ^= 0x4a;
                    /* undefined */
                }
                
                __int1();
                edi = *esp_3;
                arg5 = esp_3[1];
                arg4 = esp_3[2];
                ebx = esp_3[4];
                edx_2 = esp_3[5];
                ecx = esp_3[6];
                esp_3 = &esp_3[8];
            }
            
            *ebx &= 0x21a92080;
            ecx ^= 0x5c;
            *(edi - 0x7f);
            int32_t eax_8 = *0xcf718848;
            int32_t temp0_5 = COMBINE(edx_2, eax_8) / *(arg5 + 0x77);
            int32_t temp1_2 = COMBINE(edx_2, eax_8) % *(arg5 + 0x77);
            *(arg5 + 0x20802381);
            *(temp0_5 - 0x7e06b10f) &= temp0_5;
            *(temp0_5 - 0x7fde56e0);
            __int1();
            *(edi + 0x3c);
            int32_t eax_10;
            eax_10 = 0xb0;
            *esp_3;
            esp_3 += 2;
            int32_t temp7_1 = *(es + eax_10);
            *(es + eax_10) -= 0x2f914cf2;
            eax_7 = ecx - 1;
            ecx = eax_10 - 1;
            
            if (temp7_1 == 0x2f914cf2 || ecx)
            {
                *ecx -= 0xd8;
                goto label_179d5;
            }
            
            *(arg4 - 0x308e77b8) &= temp1_2;
            *(arg5 + 0x77);
            int32_t temp1_3 = COMBINE(temp1_2, eax_7) % *(arg5 + 0x77);
            *(arg5 + 0x20802381);
            ecx ^= 0x36;
            *(edi - 0x5b);
            eax_8 = 0xb0;
            *esp_3;
            esp_3 += 2;
            *(es + eax_8) -= 0x2f8c4cf2;
            *(edi + 1);
            edi += 2;
            eax_8 = 0x81;
            edx_2 = (temp1_3 & ecx) + *(eax_8 + 0x29f18021);
            eax_8 = 0x80;
            *(eax_8 + 0x7f718848) &= ecx;
            eax_8 = 0x80 * *(arg5 - 1);
            *ecx &= 0xf8b1f180;
            
            if ((*(ecx - 0x80) & ecx) < 0)
            {
                eax_8 = 0x80;
                *(eax_8 - 0x44) &= edi;
                /* undefined */
            }
            
            top -= 1;
            /* unimplemented  {fild st0, dword [edx-0x77b75edf]} */
            char temp0_4 = *ecx;
            *ecx = *eax_8[1];
            *eax_8[1] = temp0_4;
            *edi = eax_8;
            edi += 4;
            eax_5 = eax_8 - 1;
            cond:4_1 = eax_8 == 1;
            *(ecx - 0x3c) = *edx_2[1];
        }
    }
}

int32_t __convention("regparm") sub_17afa(void* arg1, int32_t, int32_t arg3, void* arg4 @ edi)
{
    *(arg4 - 0x18);
    *(arg4 - 0x18) ^= 0x1f;
    int32_t* ebx;
    ebx = 0x85;
    *ebx &= 0x218c2080;
    *(arg4 + 0x7f);
    char* eax;
    eax = (arg1 + 1) * *(arg1 + 1);
    /* jump -> *(eax + 0x70e93d47) */
}

int32_t __convention("regparm") sub_18a2c(int32_t arg1, char arg2, int32_t arg3 @ ebp)
{
    *((arg3 << 2) + 0x8b431d8d) = 0xd1;
    /* undefined */
}

int32_t __convention("regparm") sub_18a44(char arg1, int32_t, int32_t arg3, int32_t arg4 @ ebp)
{
    int32_t ebx;
    *(ebx + (arg4 << 2)) = 0x85;
    *((arg3 << 2) + 0xb53f8e4f) &= 0xc0ea8073;
    /* undefined */
}

int32_t __convention("regparm") sub_18a5c(char arg1, char arg2, int32_t arg3 @ ebp)
{
    *((arg3 << 3) + 0x8b43258a) = 0xd1;
    /* undefined */
}

int32_t __convention("regparm") sub_18af3(int32_t* arg1, int32_t arg2, int32_t arg3, char* arg4 @ esi, char* arg5 @ edi)
{
    arg2 -= 0xc1;
    *arg1 += arg2;
    *arg5 = *arg4;
    int32_t ebx;
    ebx = 0xe0;
    arg2 -= 0xc0;
    int32_t* eax_1 = arg1 * 2 + *(arg2 - 0x5aec7f16);
    arg2 -= 0xc2;
    *eax_1 += eax_1;
    arg5[1] = arg4[1];
    *(eax_1 - 0x7fe01f1f) = *(eax_1 - 0x7fe01f1f) + arg3 - 1;
    /* undefined */
}

int32_t __convention("fastcall") sub_18b20(int32_t arg1, char arg2, void* arg3 @ ebp)
{
    int32_t eax;
    bool c;
    bool p;
    bool a;
    bool z;
    bool s;
    *eax[1] =
        (s ? 1 : 0) << 7 | (z ? 1 : 0) << 6 | (a ? 1 : 0) << 4 | (p ? 1 : 0) << 2 | (c ? 1 : 0);
    *(arg3 - 0x7ce01c7d) += eax;
    /* undefined */
}

int32_t __convention("regparm") sub_18b33(int32_t arg1, int32_t arg2, void* arg3, void* arg4 @ esi, int32_t* arg5 @ edi)
{
    void* ebx;
    ebx += *(arg2 + 0x33);
    ebx = *arg1[1];
    void* esp_1 = &*__return_addr[2];
    void* esi = arg1 | 0x1d83ea8c;
    void* eax_1 = arg4;
    void* edx_3 = arg2 + 0xa3;
    char temp1 = ebx;
    ebx += *(arg3 - 0x78);
    
    if (!arg3)
    {
        *(arg3 * 3 + 0x1c1ea80) = *(arg3 * 3 + 0x1c1ea80) + arg3;
        *(ebx - 0x157fe020) = 0xc0;
        goto label_18b7b;
    }
    
    void* edx_4 = edx_3 + 0x3d;
    edx_3 = (eax_1 | 0x1d83ea8c) + 0x33;
    eax_1 = edx_4 + *(ebx + 0x6d0190f0);
    *(eax_1 - 2);
    void arg_4;
    esp_1 = &arg_4;
    edx_3 -= 0xc0;
    int32_t i;
    
    do
    {
        *(arg3 - 0x73ef7f16) += eax_1;
        arg3 -= 1;
        edx_3 -= 0xc1;
        esi += eax_1;
        eax_1 &= 0x1f;
        edx_3 -= 0xc0;
        label_18b7b:
        *(arg3 - 0x78ef7f16) += eax_1;
        arg3 -= 1;
        edx_3 -= 0xc1;
        i = *arg5;
        *arg5 += eax_1;
    } while (i == -(eax_1));
    *esp_1;
    edx_3 -= 0xc0;
    *(arg3 - 0x7cef7f16) += eax_1;
    edx_3 -= 0xc1;
    *eax_1 += eax_1;
    bool c_1 = *0x128070e9 < 0xad218000;
    void* ecx_1;
    int32_t edx_7;
    edx_7 = 0x4785cc1a();
    bool p = /* bool p = unimplemented  {inc edi} */;
    bool a = /* bool a = unimplemented  {inc edi} */;
    int16_t eax_4;
    *eax_4[1] = (eax_1 + 1 < 0 ? 1 : 0) << 7 | (eax_1 == 0xffffffff ? 1 : 0) << 6 | (a ? 1 : 0) << 4
        | (p ? 1 : 0) << 2 | (c_1 ? 1 : 0);
    *(esp_1 + 2);
    int32_t* eax_6 = eax_4 & 0xc0ea801f;
    *(ecx_1 - 0x44ef7f16) += eax_6;
    edx_7 -= 0xc1;
    *eax_6 += edx_7;
    *(eax_1 + 2) = *esi;
    void* eax_7 = eax_6 + edx_7;
    edx_7 = 0xe0;
    edx_7 = 0x20;
    *(ecx_1 - 0x4aef7f17) += eax_7;
    edx_7 = 0x5f;
    *(esp_1 + 8);
    edx_7 = 0x9f;
    int32_t eax_9 = eax_7 * 2 + *(edx_7 - 0x4fec7f16);
    edx_7 = 0xdd;
    *(ecx_1 - 0x7fe01f80) += eax_9;
    /* undefined */
}

int32_t __convention("regparm") sub_18bfd(int32_t* arg1, int32_t arg2, int32_t arg3, char* arg4 @ esi, char* arg5 @ edi)
{
    arg2 -= 0xc1;
    *arg1 += arg2;
    *arg5 = *arg4;
    int32_t ebx;
    ebx = 0xe0;
    arg2 -= 0xc0;
    int32_t* eax_1 = arg1 * 2 + *(arg2 - 0x5aec7f16);
    arg2 -= 0xc2;
    *eax_1 += eax_1;
    arg5[1] = arg4[1];
    *(eax_1 - 0x7fe01f1f) = *(eax_1 - 0x7fe01f1f) + arg3 - 1;
    /* undefined */
}

int32_t sub_18c2a(void* arg1 @ ebp)
{
    int32_t eax;
    eax = *0xc1ea8049;
    *(arg1 - 0x7ce01c7d) += eax;
    /* undefined */
}

int32_t __convention("regparm") sub_18c3d(int32_t arg1, int32_t arg2, void* arg3, void* arg4 @ ebp, void* arg5 @ esi, void* arg6 @ edi)
{
    void* ebx;
    ebx += *(arg2 + 0x33);
    ebx = *arg1[1];
    int32_t* eax = arg1 | 0x1d83ea8c;
    void* eax_1 = arg6;
    void* edx_3 = arg2 + 0xa3;
    char temp1 = ebx;
    ebx += *(arg3 - 0x78);
    
    if (!arg3)
    {
        *(arg3 * 3 + 0x1c1ea80) = *(arg3 * 3 + 0x1c1ea80) + arg3;
        *(ebx - 0x157fe020) = 0xc0;
        goto label_18c85;
    }
    
    void* edx_4 = edx_3 + 0x3d;
    edx_3 = (eax_1 | 0x1d83ea8c) + 0x33;
    eax_1 = edx_4 + *(ebx + 0x6d0190f0);
    void* ecx = arg3 - 1;
    
    if (!(ebx & 0xfe) || !ecx)
    {
        edx_3 -= 0xc0;
        goto label_18c73;
    }
    
    while (true)
    {
        int32_t temp3_1 = *eax;
        *eax += eax_1;
        
        if (temp3_1 != -(eax_1))
        {
            void arg_4;
            void* esp = &arg_4;
            edx_3 -= 0xc0;
            *(ecx - 0x7cef7f16) += eax_1;
            edx_3 -= 0xc1;
            *eax_1 += eax_1;
            *0x808070e9;
            *(arg4 - 0x7bbf8f18);
            *(arg4 - 0x7bbf8f18) &= arg4;
            *(eax_1 - 0x6a);
            bool p = /* bool p = unimplemented  {inc edi} */;
            bool a = /* bool a = unimplemented  {inc edi} */;
            int32_t* eax_3;
            *eax_3[1] = (eax_1 + 2 < 0 ? 1 : 0) << 7 | (eax_1 == 0xfffffffe ? 1 : 0) << 6
                | (a ? 1 : 0) << 4 | (p ? 1 : 0) << 2;
            void* ecx_2 = ecx - 2;
            
            if (eax_1 == 0xfffffffd || !ecx_2)
            {
                edx_3 -= 0xc0;
                *(ecx_2 - 0x44ef7f16) += eax_3;
                ecx_2 -= 1;
                edx_3 -= 0xc1;
                goto label_18ccb;
            }
            
            while (true)
            {
                ecx_2 -= 1;
                edx_3 -= 0xc1;
                int32_t temp7_1 = *arg5;
                *arg5 += eax_3;
                
                if (temp7_1 != -(eax_3))
                {
                    *esp;
                    edx_3 -= 0xc0;
                    *(ecx_2 - 0x4eef7f16) += eax_3;
                    edx_3 -= 0xc1;
                    *eax_3 += edx_3;
                    *(eax_1 + 3) = *arg5;
                    void* eax_4 = eax_3 + edx_3;
                    edx_3 = 0xe0;
                    edx_3 = 0x20;
                    *(ecx_2 - 0x54ef7f17) += eax_4;
                    edx_3 = 0x5f;
                    *(esp + 4);
                    edx_3 = 0x9f;
                    int32_t eax_6 = eax_4 * 2 + *(edx_3 - 0x59ec7f16);
                    edx_3 = 0xdd;
                    *(ecx_2 - 0x7fe01f80) += eax_6;
                    /* undefined */
                }
                
                *(ebx - 0x3e157fb7) = *(ebx - 0x3e157fb7) + *ebx[1];
                label_18ccb:
                *(eax_3 - 0x11d67f82) += eax_3;
                eax_3 <<= 1;
                *esp;
                esp += 2;
                edx_3 -= 0xc0;
                *(ecx_2 - 0x4aef7f16) += eax_3;
            }
        }
        
        label_18c73:
        *(ecx - 0x73ef7f16) += eax_1;
        arg3 = ecx - 1;
        edx_3 -= 0xc1;
        arg5 += eax_1;
        eax_1 &= 0x1f;
        edx_3 -= 0xc0;
        label_18c85:
        *(arg3 - 0x77ef7f16) += eax_1;
        ecx = arg3 - 1;
        edx_3 -= 0xc1;
    }
}

int32_t __convention("fastcall") sub_18d2c(int32_t arg1, int32_t arg2, char* arg3 @ esi, char* arg4 @ edi)
{
    int32_t* eax_2 = *0xc1ea8049;
    *eax_2 += arg2;
    *arg4 = *arg3;
    int32_t ebx;
    ebx = 0xe0;
    arg2 -= 0xc0;
    int32_t* eax_1 = eax_2 * 2 + *(arg2 - 0x64ec7f16);
    arg2 -= 0xc2;
    *eax_1 += eax_1;
    arg4[1] = arg3[1];
    *(eax_1 - 0x7fe01f1f) = *(eax_1 - 0x7fe01f1f) + arg1;
    /* undefined */
}

int32_t __convention("fastcall") sub_18d5a(int32_t arg1, char arg2, void* arg3 @ ebp, int32_t arg4 @ esi)
{
    *(arg3 - 0x7ce01c7d) += arg4;
    /* undefined */
}

int32_t __convention("fastcall") sub_18d6c(int32_t arg1, int32_t arg2)
{
    /* undefined */
}

int32_t __convention("regparm") sub_18d88(int32_t arg1, int32_t arg2, char arg3)
{
    *(arg2 - 0x40) = arg3;
    /* undefined */
}

int32_t __convention("fastcall") sub_18e0e(char* arg1, int32_t arg2 @ edi)
{
    *arg1 &= 0x90;
    int32_t eax;
    *eax[1] = 0x84;
    /* undefined */
}

int32_t __convention("regparm") sub_18e15(void* arg1, char* arg2, int32_t arg3, void* arg4 @ ebp, int32_t arg5 @ edi)
{
    int32_t eflags;
    int32_t eflags_1 = __cli(eflags);
    char* ebx;
    bool c;
    
    if (!(c ^ 1))
    {
        int16_t* edi_9;
        int16_t temp0_5;
        temp0_5 = __insd(arg5, arg2, eflags_1);
        *edi_9 = temp0_5;
        arg1 = arg1 * *ebx;
        /* jump -> arg1 */
    }
    
    *(arg1 - 0x7d0e7fb9) &= arg3;
    *(arg5 - 0x72);
    *0xea84e190 &= 0xc4;
    *(arg5 - 0x78ef7b15) += arg5 + 1;
    arg2 -= 0xc1;
    int32_t eax_1 = (arg5 + 1) * 2;
    *arg2[1] = arg2[0xffffffb3];
    int32_t* esi = *(ebx - 0x6e7fb845) * 0xf67f47a0;
    ebx = 0x84;
    char* eax_2;
    eax_2 = (eax_1 + 0x43872594) + *(eax_1 + 0x43872594);
    *(arg3 - 1) &= 0xf8;
    *eax_2[1] = 0x85;
    void* edi_3 = arg1 + 2;
    *(edi_3 - 0x80);
    void* eax_4;
    int16_t es_1;
    eax_4 = __les_gprz_memp(*(arg3 - 1));
    char temp2 = arg2;
    arg2 -= 0x84;
    ebx[0xc1ea8049] = ebx[0xc1ea8049] + (arg3 - 1);
    void* eax_5;
    eax_5 = *(eax_4 * 2 - 0x3b157b6f);
    *(eax_5 - 0x79ed7b16) += eax_5;
    void* ecx_1 = arg3 - 2;
    arg2 -= 0xc3;
    int32_t temp3 = *arg2;
    *arg2 += eax_5;
    
    if (temp3 > -(eax_5))
    {
        ebx = 0xb3;
        eax_5 = *0x1bf67f47;
        
        if (edi_3 == 0xffffffff || ecx_1 == 1)
        {
            ebx = 0x84;
            void* eax_6;
            eax_6 = (eax_5 + 0x4307259b) + *(eax_5 + 0x4307259b);
            *(ecx_1 - 1) &= 0x90;
            *eax_6[1] = 0xc3;
            *0xb4780181;
            char temp0_1 = *(arg2 - 0x40);
            *(arg2 - 0x40) = (ecx_1 - 1);
            void* ecx_2;
            ecx_2 = temp0_1;
            /* undefined */
        }
        
        ebx = 0xb3 + *arg2;
        ebx += 0x1f;
        *(arg2 - 0x40);
        *(arg2 - 0x40) |= 0xea;
        void* eax_9;
        int16_t es_2;
        eax_9 = __les_gprz_memp(*(arg2 + 0x3d));
        *0xb4780180;
        *(eax_9 - 0x7fffed44) = *(eax_9 - 0x7fffed44) + 0x21;
        *esi;
        void* eax_11 = 0xb108dd42();
        *(edi_3 - 0x71);
        char edi_5 = (edi_3 + 1) + 1;
        edi_3 = eax_11 + 1;
        *(edi_3 + 0x5d) = *(edi_3 + 0x5d) - edi_5;
        bool c_4 = /* bool c_4 = unimplemented  {sbb byte [edi+0x5d], al} */;
        int32_t* eax_13;
        void* ecx_4;
        eax_13 = 0xf95f3971();
        *(ecx_4 + 0x5194f92d) = RLCB(*(ecx_4 + 0x5194f92d), 0x2d, c_4);
        esi = eax_13;
        ecx_1 = &esi[1];
    }
    
    int16_t fs;
    *(ecx_1 + 0x2d) = fs;
    *(ecx_1 - 0x6d2666b);
    *(ecx_1 - 0x6d06d267) = &ebx[*(ecx_1 - 0x6d06d267)];
    *0xd7188f9 += ecx_1;
    *(ecx_1 - 0x6f2666a) = esi;
    void* eax_16;
    eax_16 = *ecx_1;
    char* eax_17;
    uint64_t* ecx_5;
    eax_17 = 0x8bfa9cb8();
    *(ecx_5 - 0x6f2666d);
    *ecx_5;
    int32_t eax_19;
    int32_t edx_4;
    edx_4 = HIGHD(edi_3);
    eax_19 = LOWD(edi_3);
    int32_t eax_21;
    int32_t edx_5;
    edx_5 = HIGHD(eax_19 | 0x9b0186f9);
    eax_21 = LOWD(eax_19 | 0x9b0186f9);
    int32_t* eax_24;
    int16_t es_3;
    eax_24 = __les_gprz_memp(*ecx_5);
    char temp4 = edx_5;
    edx_5 -= 0x84;
    *(arg4 - 0x3e157fb7) = *(arg4 - 0x3e157fb7) + *ebx[1];
    *eax_24 += edx_5;
    *eax_17 = *esi;
    edx_5 = 0x85;
    int32_t eax_25;
    int16_t es_4;
    eax_25 = __les_gprz_memp(*ecx_5);
    edx_5 = 1;
    *(eax_17 - 0x3d157fb6);
    /* undefined */
}

int32_t __convention("regparm") sub_1916e(int32_t arg1, int32_t* arg2)
{
    int32_t ebx;
    ebx = 0x84;
    *arg2 += arg2;
    *(arg1 - 0x2f6617ec) += (arg1 + 0x4e7a25f3);
    /* undefined */
}

int32_t sub_1918a()
{
    int32_t ecx;
    void* ebx;
    ecx = *(ebx - 0x7e);
    /* undefined */
}

int32_t sub_19194() __pure
{
    return;
}

int32_t sub_19199()
{
    /* undefined */
}

int32_t sub_191a0()
{
    int32_t ebx;
    *(ebx - 0x7e);
    /* undefined */
}

int32_t __convention("regparm") sub_191aa(void* arg1, void* arg2, char* arg3, int32_t arg4 @ ebp, int32_t arg5 @ esi, int32_t arg6 @ edi, long double arg7 @ st0)
{
    *(arg2 - 0x72) |= 0x3a;
    int32_t* ebx;
    int32_t esp;
    
    while (true)
    {
        arg7 = arg7 / ebx[-4];
        arg5 += 1;
        *arg3 += 0x12;
        *(arg1 - 0x7c4b6fdf) += arg1;
        arg6 += 1;
        char temp1_1 = *arg3;
        *arg3 &= 0x81;
        
        if (!(temp1_1 & 0x81) || arg3 != 1)
            break;
        
        *(esp - 4) = arg4;
        *0xd27b4310 = RRCB(*0xd27b4310, 0x90, false);
        esp = 0xb4ff0180;
        *(arg6 - 0x15);
        arg3 -= 2;
        arg3[0x20];
        *ebx &= 0x3a8e4a82;
    }
    
    *(arg2 + (arg4 << 3) - 0x157ffe3c) = *(arg2 + (arg4 << 3) - 0x157ffe3c) + esp;
    *ebx;
    *(arg3 - 0x81);
    /* undefined */
}

int32_t sub_191d8()
{
    /* undefined */
}

int32_t __convention("regparm") sub_19221(int32_t, char* arg2)
{
    __int1();
    *arg2 -= 0x31;
    __int1();
    int32_t* ebx;
    *ebx -= 0x980b627;
}

int32_t __convention("regparm") sub_1922f(void* arg1, int32_t arg2, int32_t arg3, int32_t arg4 @ ebp, int32_t arg5 @ esi, int32_t arg6 @ edi, long double arg7 @ st0)
{
    int32_t* ebx;
    bool z;
    
    if (z || arg3 != 1)
    {
        char temp1 = *(arg1 + 0x4d228121);
        *(arg1 + 0x4d228121) += arg1;
        int32_t eax_1;
        void** ecx_3;
        int32_t edx;
        eax_1 = 0x9183c390();
        ecx_3[0x1e701277] = ecx_3[0x1e701277] - 0x1c;
        *(eax_1 - 0x240e7d06);
        *ecx_3 += ebx - 1;
        /* undefined */
    }
    
    void* ecx;
    ecx = (arg3 - 2) ^ 0x4d;
    char temp2 = RORB(*(arg1 - 0x78), ecx);
    *(arg1 - 0x78) = temp2;
    
    if (temp2 >= 0)
        /* undefined */
    
    *(ecx - 0x3faa661f);
    *(ecx - 0x3faa661f) &= arg1;
    void* eax = arg1 + 0x2d84bcf0;
    
    while (true)
    {
        *(arg6 - 0x15);
        *(ecx + 0x1f);
        *ebx &= 0x3a8e4a82;
        arg7 = arg7 / ebx[-4];
        arg5 += 1;
        *(ecx - 1) += 0x12;
        *(eax - 0x7c4b6fdf) += eax;
        arg6 += 1;
        char temp4_1 = *(ecx - 1);
        *(ecx - 1) &= 0x81;
        ecx -= 2;
        
        if (!(temp4_1 & 0x81) || ecx)
            break;
        
        *0xb4ff017c = arg4;
        *0xd27b4310 = RRCB(*0xd27b4310, 0x90, false);
    }
    
    *(arg2 + (arg4 << 3) - 0x157ffe3c) = *(arg2 + (arg4 << 3) - 0x157ffe3c) - 0x4b00fe80;
    *ebx;
    *(ecx - 0x80);
    /* undefined */
}

int32_t __convention("fastcall") sub_19267(char* arg1, int32_t arg2)
{
    __int1();
    int32_t eflags;
    int32_t eax;
    eax = __in_al_immb(2, eflags);
    int32_t eflags_1 = __cli(eflags);
    int32_t ebx;
    int32_t ebx_1 = ebx ^ 0xffffffcb;
    int32_t var_4 = ebx_1;
    int32_t esp_1 = &var_4 - arg2;
    bool c = /* bool c = unimplemented  {sbb esp, eax} */;
    
    if (ebx_1 <= 1)
    {
        __cli(eflags_1);
        int32_t ebx_2;
        ebx_2 = *arg2[1];
        int16_t edx_2;
        *edx_2[1] = (ebx_1 - 1);
        *arg1 = *arg1 - ebx_2;
        /* undefined */
    }
    
    *(esp_1 - 4) = eax - 1;
    void* eax_3 = *esp_1;
    char temp6 = *(eax_3 + 0x4d228121);
    *(eax_3 + 0x4d228121) += eax_3;
    int32_t eax_4;
    int32_t* ecx_1;
    int32_t edx_3;
    eax_4 = 0x9183c390();
    ecx_1[0x1e701277] = ecx_1[0x1e701277] - 0x1c;
    *(eax_4 - 0x240e7d06);
    *ecx_1 += ebx_1 - 2;
    /* undefined */
}

int32_t __convention("regparm") sub_1927d(void* arg1, int32_t arg2, int32_t arg3, void* arg4 @ ebp, void* arg5 @ edi)
{
    __int1();
    char* ebx;
    *ebx += 0x74;
    *arg2;
    *(arg5 - 0x7f);
    *(arg1 - 0x7f17b2dd) &= arg1;
    void* eax = arg1 + *(arg2 - 0x7db86c6f);
    int32_t eflags;
    
    if (arg3 > 1)
    {
        char temp2_1 = *(arg5 - 0x56);
        *(arg5 - 0x56) += 0x47;
        *(arg3 - 0x980b644) = *(arg3 - 0x980b644) - 0x76;
        eflags = __cli(eflags);
    }
    else
        *ebx[1] = arg2;
    
    char temp3 = eax;
    char temp4 = eax;
    eax *= 2;
    char* eax_1 = eax + 0x6beb748;
    char temp5 = eax_1;
    eax_1 = eax_1;
    char* var_4;
    
    if (!temp5 || arg3 != 2)
    {
        eax_1 = __in_al_immb(2, eflags);
        int32_t eflags_3 = __cli(eflags);
        char* ebx_3 = ebx ^ 0xffffffcb;
        var_4 = ebx_3;
        int32_t esp_3 = &var_4 - 0x2cf95049;
        bool c_7 = /* bool c_7 = unimplemented  {sbb esp, eax} */;
        
        if (ebx_3 <= 1)
        {
            __cli(eflags_3);
            int32_t edx_8;
            *edx_8[1] = (ebx_3 - 1);
            *(arg3 - 2) = *(arg3 - 2) - 0;
            /* undefined */
        }
        
        *(esp_3 - 4) = eax_1 - 1;
        void* eax_3 = *esp_3;
        char temp16 = *(eax_3 + 0x4d228121);
        *(eax_3 + 0x4d228121) += eax_3;
        int32_t eax_4;
        void** ecx_4;
        int32_t edx_4;
        eax_4 = 0x9183c390();
        ecx_4[0x1e701277] = ecx_4[0x1e701277] - 0x1c;
        *(eax_4 - 0x240e7d06);
        *ecx_4 += ebx_3 - 2;
        /* undefined */
    }
    
    var_4 = eax_1;
    char temp9 = *eax_1;
    *eax_1 -= eax_1;
    *0xf94148b3 = RRCB(*0xf94148b3, 0x28, temp9 < eax_1);
    eax_1[0xe479d24b] = eax_1[0xe479d24b];
    *0xdfecd443;
    int32_t edx;
    edx = 0x49 & *0xdfecd443;
    char* edx_1;
    *edx_1[1] = *(edx - 1);
    char* var_8 = ebx;
    *(ebx + ((arg3 - 3) << 1) + 0x4fb07f92) = *(ebx + ((arg3 - 3) << 1) + 0x4fb07f92) - arg4;
    *(arg3 - 3) = *(arg3 - 3) - ebx;
    __int1();
    eax_1 = __in_al_immb(2, eflags);
    int32_t eflags_1 = __cli(eflags);
    int32_t ebx_1 = ebx ^ 0xffffffad;
    int32_t var_c = ebx_1;
    *(arg4 - 0x7d806db5) = *(arg4 - 0x7d806db5) - &var_c;
    bool c_5 = /* bool c_5 = unimplemented  {sbb dword [ebp-0x7d806db5], esp} */;
    __cli(eflags_1);
    char temp0_2 = ebx_1;
    ebx_1 = *(eax_1 - 1)[1];
    int16_t edx_3;
    *edx_3[1] = temp0_2;
    *(arg3 - 3) = *(arg3 - 3) - ebx_1;
    /* undefined */
}

int32_t __convention("regparm") sub_192f7(void* arg1, void* arg2, int32_t arg3, void* arg4 @ ebp, void* arg5 @ edi)
{
    __int1();
    char* ebx;
    *ebx += 0x74;
    *(arg5 - 0x7f);
    *(arg1 - 0x7f17b2dd) &= arg1;
    void* eax = arg1 + *(arg2 - 0x7db86c6f);
    void* edi = arg5 + 1;
    int32_t* ecx = arg3 - 1;
    
    if (arg3 > 1)
    {
        char temp2_1 = *(edi - 0x57);
        *(edi - 0x57) += 0x47;
        *(ecx - 0x980b661) = *(ecx - 0x980b661) + 0x4d;
    }
    else
        arg4 -= 1;
    
    int32_t eflags;
    int32_t eflags_1 = __sti(eflags);
    *ecx;
    *ecx &= 0x7248489a;
    *(edi - 0x40) = eax;
    *ecx = ecx;
    eax = eax;
    void* eax_1 = eax - *(eax - 0x37b7694d);
    *(arg4 + 0x47f1ef23) = *(arg4 + 0x47f1ef23);
    void* i;
    
    do
    {
        *ecx &= 0xfab0f67f;
        *ecx &= 0x92;
        *(arg2 - 0x80) |= *arg2[1];
        ecx[8];
        int32_t eax_3;
        int32_t edx;
        edx = HIGHD(eax_1 - 1);
        eax_3 = LOWD(eax_1 - 1);
        *0x965feed0 <<= 1;
        *ecx -= 0x95;
        *(ecx * 3 + 0x29817f80);
        *(ecx * 3 + 0x29817f80) = RORB(*(ecx * 3 + 0x29817f80), 1);
        bool c_2 = /* bool c_2 = unimplemented  {ror byte [ecx+ecx*2+0x29817f80], 0x1} */;
        void* eax_4 = eax_3 - 0x80;
        void* temp5_1 = ecx[-0x1f621dee] & ecx;
        ecx[-0x1f621dee] = temp5_1;
        int32_t esp;
        
        if (!temp5_1 || ecx != 1)
        {
            int32_t eflags_2 = __cli(eflags_1);
            int32_t ebx_1 = ebx ^ 0xffffffad;
            *(esp - 4) = ebx_1;
            *(arg4 - 0x7d806db5) = *(arg4 - 0x7d806db5) - (esp - 4);
            bool c_4 = /* bool c_4 = unimplemented  {sbb dword [ebp-0x7d806db5], esp} */;
            __cli(eflags_2);
            char temp0_3 = ebx_1;
            ebx_1 = *(eax_4 - 1)[1];
            int16_t edx_2;
            *edx_2[1] = temp0_3;
            *(ecx - 1) = *(ecx - 1) - ebx_1;
            /* undefined */
        }
        
        *(edi - 0x7e8877b8) &= eax_4;
        *(eax_4 - 0x66b87dde);
        *(eax_4 - 0x66b87dde) &= eax_4;
        edi += 1;
        *(ecx - 0x980b67a) = *(ecx - 0x980b67a) + 8;
        eflags_1 = __sti(eflags_1);
        *(ecx - 1) &= 0x82;
        *(ecx - 2) = *edx[1];
        *0x218034bc = 0x218034c0;
        *(ebx + edi) &= 0x40;
        arg2 = edx - 1;
        *(ecx - 1) &= 0xa;
        void* eax_5;
        eax_5 = __in_al_dx(arg2, eflags_1);
        *0x218034bc;
        *ecx[1] = 0x7c;
        char* fsbase;
        *(fsbase + ecx) &= 0x77;
        *ecx[1] = 0x20;
        *(ecx + 0x58677201) = *0x218034c0;
        *ecx[1] = 0x7c;
        esp = 0x218034c8;
        *ecx[1] = 0;
        eax_1 = (*0x218034c4) ^ 0x80;
        i = *(eax_1 + 0x604784b4) & arg2;
        *(eax_1 + 0x604784b4) = i;
    } while (i < 0);
    int32_t temp10 = *(edi - 0x3e879f25);
    *(edi - 0x3e879f25) -= eax_1;
    eax_1 = eax_1 + 0x80;
    char eax_8 = (eax_1 & *(ecx + 0x6df67421)) + 1;
    ebx = 0x90;
    *ecx &= 0xfd66f674;
    ebx = 0x77;
    __out_immb_al(0x9f, eax_8 + 1, eflags_1);
    /* undefined */
}

int32_t __convention("fastcall") sub_193d5(int32_t arg1)
{
    *(arg1 - 0x7a) s>>= 0x29;
}

int32_t __convention("regparm") sub_19470(char* arg1, void* arg2, int32_t arg3, char* arg4 @ esi, char* arg5 @ edi)
{
    int16_t ss;
    *0x1ac259c = ss;
    *arg5 = *arg4;
    void* edi = &arg5[1];
    char* var_4 = arg1;
    *0xf94148a2 = RRCB(*0xf94148a2, 0x38, *arg1 < arg1);
    *(edi + 0x5049a0e1) += *arg1[1];
    *0xf941489e = RRCB(*0xf941489e, 0x3c, arg1 < 0);
    int32_t ebx;
    *(edi + 0x50499ce1) += ebx;
    char temp1 = (&arg1[1]);
    void* eax;
    eax = (&arg1[1]) * 2;
    *(edi + 0x504998e1) += arg2;
    char temp3 = (eax + 0x6beb766 + 1);
    int32_t eax_2;
    eax_2 = (eax + 0x6beb766 + 1) * 2;
    *(edi + 0x504994e1) += (arg3 - 1);
    char temp5 = (eax_2 + 0x6beb76a - 1);
    int32_t eax_4;
    eax_4 = (eax_2 + 0x6beb76a - 1) * 2;
    int32_t eax_6 = eax_4 + 0x6beb76e - 1;
    *(edi + 0x504990e1) += eax_6;
    char temp7 = eax_6;
    char temp8 = eax_6;
    eax_6 *= 2;
    void* eax_7 = eax_6 + 0x6beb772;
    *(eax_7 - 0x7f417f42) += eax_7;
    *(arg3 - 0x7f17b2df) &= eax_7;
    *(arg2 - 0x786e7c6f) ^= eax_7;
    *(arg3 - 0x1e) s>>= 0x23;
    int32_t eflags;
    __cli(eflags);
    void* ecx_1;
    ecx_1 = (arg3 - 2) ^ 0x87;
    *ecx_1 += ebx - 1;
    /* undefined */
}

int32_t __convention("regparm") sub_194f3(int32_t arg1, char* arg2, void* arg3 @ ebp, int32_t* arg4 @ esi, char* arg5 @ edi)
{
    __int1();
    *arg2 -= 0x31;
    __int1();
    int32_t* ebx;
    int32_t temp2 = *ebx;
    *ebx -= 0x980b67b;
    bool p = /* bool p = unimplemented  {add dword [ebx], 0xf67f4985} */;
    bool a = /* bool a = unimplemented  {add dword [ebx], 0xf67f4985} */;
    void* const __return_addr_1 = __return_addr;
    *arg1[1] = (temp2 - 0x980b67b < 0 ? 1 : 0) << 7 | (temp2 == 0x980b67b ? 1 : 0) << 6
        | (a ? 1 : 0) << 4 | (p ? 1 : 0) << 2;
    void** esp_1 = 0x67540180;
    *__return_addr_1 &= 0x40;
    char* eax;
    
    while (true)
    {
        arg2 -= 1;
        *__return_addr_1 &= 0x6a;
        *esp_1;
        esp_1 = &esp_1[1];
        *__return_addr_1[1] = 0x7c;
        char* fsbase;
        *(fsbase + __return_addr_1);
        *(fsbase + __return_addr_1) &= 0x90;
        char* temp4_1;
        
        while (true)
        {
            *eax[1] = 0x84;
            temp4_1 = arg5;
            arg5 = &arg5[1];
            
            if (temp4_1 < 0xffffffff)
                break;
            
            *__return_addr_1;
            *__return_addr_1 &= 0x90;
        }
        
        if (temp4_1 > 0xffffffff)
        {
            __return_addr_1 += 1;
            *eax = *eax - eax;
            *(__return_addr_1 - 0x1b20981) = ebx;
            *eax &= 0x70419988;
            *(__return_addr_1 + 0x29817f80) = ebx;
            break;
        }
        
        arg3 -= 1;
        char temp8_1 = *(__return_addr_1 + 0x41998820);
        *(__return_addr_1 + 0x41998820) += 1;
        
        if (!(temp8_1 + 1))
        {
            arg2 = HIGHD(eax);
            eax = LOWD(eax);
            arg5[0xffffff81];
            break;
        }
    }
    
    eax[0x8a798099] = RORB(eax[0x8a798099], 1);
    *(eax - 0x7f16a02d) -= arg2;
    __int1();
    *__return_addr_1;
    *(ebx - 0x27003d5);
    *(ebx - 0x27003d5) u>>= __return_addr_1;
    bool c_4 = /* bool c_4 = unimplemented  {shr dword [ebx-0x27003d5], cl} */;
    bool p_1 = /* bool p_1 = unimplemented  {shr dword [ebx-0x27003d5], cl} */;
    
    if (!p_1)
        /* undefined */
    
    void* ecx_1;
    ecx_1 = (__return_addr_1 - 1) + *ebx[1];
    *eax &= 0x71819988;
    *eax &= 0x88;
    *(ecx_1 + 0x2e) <<= 0xe3;
    /* undefined */
}

int32_t __convention("regparm") sub_199a5(char* arg1, void* arg2, int32_t* arg3, void* arg4 @ ebp, char* arg5 @ esi, void* arg6 @ edi, long double arg7 @ st0)
{
    bool c;
    bool c_1 = c ^ 1;
    char* eax = arg5;
    
    if (c_1)
    {
        *(arg4 - 0x18) += arg3;
        *arg3 &= 0x91839280;
        /* undefined */
    }
    
    int32_t eflags;
    char* eax_1;
    void* ecx;
    void* ebx;
    void* esp;
    bool c_5;
    bool s;
    bool o;
    bool c_2;
    bool z_1;
    
    if (s == o)
    {
        void* ecx_10;
        bool z_7;
        bool s_5;
        bool o_8;
        
        while (true)
        {
            eflags = __cli(eflags);
            
            if (!c_1)
            {
                ebx &= arg3;
                int32_t temp3_1 = *(eax + 0x18f67d21);
                *(eax + 0x18f67d21) = temp3_1 + eax;
                c_2 = temp3_1 + eax < temp3_1;
                z_1 = !(temp3_1 + eax);
                goto label_199bf;
            }
            
            arg3[-0x10] += 0x218034;
            char temp5_1;
            bool o_7;
            
            while (true)
            {
                eax ^= 0x80;
                *arg3 &= esp;
                int32_t eax_12;
                eax_12 = 0xec6f4ea7();
                eax_12 &= 0x83;
                eax = (eax_12 | ebx) & 0x83;
                *(arg1 + eax - 0x80) |= arg2;
                *arg2;
                *arg2 &= eax;
                *(esp + 4);
                esp += 8;
                int32_t ecx_7;
                *ecx_7[1] = 0x7e;
                temp5_1 = (ecx_7 - 1);
                int32_t ecx_8;
                ecx_8 = temp5_1 + *ebx[1];
                o_7 = /* o_7 = unimplemented  {adc cl, bh} */;
                arg2 = 1;
                arg3 = ecx_8 - 1;
                
                if (!(temp5_1 + *ebx[1]) || !arg3)
                    break;
                
                char temp0_10 = *(arg3 + 0x7e);
                *(arg3 + 0x7e) = arg3;
                arg3 = temp0_10;
                *(arg3 - 2);
                char temp8_1 = eax[0x74718199];
                eax[0x74718199] &= arg3;
                bool z_5 = !(temp8_1 & arg3);
                
                while (true)
                {
                    arg3 -= 1;
                    
                    if (!z_5 && !arg3)
                    {
                        eax[0xe504ef21] += eax;
                        esp += arg4;
                        char* fsbase;
                        *(fsbase + arg3) &= 0x40;
                        *arg3;
                        *arg3 &= 0x80;
                        *(arg3 - 0x7fcb3fbf) = *(arg3 - 0x7fcb3fbf) + eax;
                        *eax &= eax;
                        break;
                    }
                    
                    int32_t eax_9;
                    arg2 = HIGHD(eax);
                    eax_9 = LOWD(eax);
                    *(arg3 - 0x72) ^= 0x812180e1;
                    arg3 &= *(arg4 - 0x18);
                    *arg3 ^= 0x82;
                    int32_t temp13_1 = *(arg6 - 0x7f);
                    *(arg6 - 0x7f) += 0x23;
                    eax = eax_9 - 1;
                    *(arg3 - 0x981b67a) = *(arg3 - 0x981b67a) + 0x49;
                    char temp14_1 = eax[0x81998820];
                    eax[0x81998820] -= 1;
                    z_5 = temp14_1 == 1;
                    
                    if (!(temp14_1 - 1))
                    {
                        ecx_10 = arg3 - 1;
                        z_7 = arg3 == 1;
                        s_5 = arg3 - 1 < 0;
                        o_8 = arg3 - 1;
                        goto label_1999c;
                    }
                }
            }
            
            if (temp5_1 + *ebx[1] < 0 == o_7)
                break;
            
            c_1 = temp5_1 + *ebx[1] < temp5_1 ^ 1;
        }
        
        arg3[-0x20] -= 0x20;
        
        if (arg3[-0x20] < 0x20)
        {
            *arg3 &= 0x7d;
            char temp16_1 = *eax;
            *eax = -(*eax);
            c_2 = temp16_1;
            z_1 = !-(temp16_1);
            label_199bf:
            eflags = __cli(eflags);
            goto label_199c0;
        }
        
        long double x87_r0_1 = arg7 + *(arg3 - 0x37);
        *(arg2 - 0x5c) = eax;
        *(eax + 0x49) s>>= 1;
        *(arg3 - 0x7f) -= 0x20;
        x87_r0_1 - *0x41c941d0;
        *(arg2 - 0x64) = eax;
        int32_t temp17_1 = *(eax + 0x4d208121);
        *(eax + 0x4d208121) = ROLD(*(eax + 0x4d208121), 1);
        z_7 = !ROLD(temp17_1, 1);
        s_5 = ROLD(temp17_1, 1) < 0;
        o_8 = /* o_8 = unimplemented  {rol dword [eax+0x4d208121], sub_0+1} */;
        0x4784ab12();
        int32_t eax_13;
        eax_13 = *(arg6 + 0x4d);
        
        while (true)
        {
            eax_1 = 0x4872ab1c();
            
            if (o_8)
                break;
            
            label_1999c:
            
            if (!z_7 && s_5 == o_8)
            {
                ebx <<= 0x5c;
                *(esp - 4) = ecx_10;
                /* undefined */
            }
            
            void* temp25_1 = arg4;
            arg4 -= 1;
            z_7 = temp25_1 == 1;
            s_5 = temp25_1 - 1 < 0;
            o_8 = temp25_1 - 1;
        }
        
        ecx = ecx_10 + 1;
    }
    else
    {
        char temp1_1 = arg2;
        arg2 = temp1_1 - *ebx[1];
        c_2 = /* c_2 = unimplemented  {sbb dl, bh} */;
        z_1 = !(temp1_1 - *ebx[1]);
        label_199c0:
        eax_1 = arg1;
        ecx = arg3 - 1;
        
        if (z_1 || ecx)
        {
            int32_t temp6_1 = *(eax_1 + 0x4c784099);
            *(eax_1 + 0x4c784099) = temp6_1 + ecx;
            c_5 = temp6_1 + ecx < temp6_1 || (c_2 && temp6_1 + ecx == temp6_1);
            goto label_19a30;
        }
        
        char temp7_1 = (ecx - 1);
        void* ecx_1;
        ecx_1 = temp7_1 + *ebx[1];
        arg2 = 1;
        eax_1[0x69804964] = eax_1[0x69804964] + *arg2[1];
        *eax_1 &= 0x63;
        arg2 -= 1;
        long double x87_r0 = arg7 + *(ecx_1 - 0x37);
        ecx = ecx_1 + 1;
        *(arg2 - 0x79) = eax_1;
        *(eax_1 + 0x49) <<= 1;
        *(ecx - 0x80) -= 0x20;
        *0x41c941d8 = x87_r0;
    }
    *(arg2 - 0x7e) = eax_1;
    char temp9_1 = *(ecx - 0x7e6677e0);
    *(ecx - 0x7e6677e0) = RORB(*(ecx - 0x7e6677e0), 1);
    bool c_4 = /* bool c_4 = unimplemented  {ror byte [ecx-0x7e6677e0], 0x1} */;
    bool o_1 = /* bool o_1 = unimplemented  {ror byte [ecx-0x7e6677e0], 0x1} */;
    void* ecx_2;
    
    if (o_1)
    {
        ecx_2 = ecx - 1;
        
        if (!RORB(temp9_1, 1) || ecx_2)
            goto label_19a4e;
        
        ecx = (ecx_2 - 1) + *ebx[1];
        goto label_199f6;
    }
    
    void* eax_2;
    
    while (true)
    {
        arg2 ^= *ebx[1];
        label_199f6:
        arg2 = 1;
        eax_1 = 0x804958b2;
        label_199fd:
        esp *= 0x71fa3020;
        __int1();
        *(esp - 4) = arg6;
        esp -= 4;
        eax_2 = eax_1 - 1;
        *(ebx - 0x61) |= eax_2;
        *(eax_2 - 0x7587bf67) = RORD(*(eax_2 - 0x7587bf67), 1);
        *(ebx - 0x1cb6ac25) -= ebx;
        *(ecx + 0x48) ^= arg2;
        label_19a18:
        *(ecx - 0x80) = *eax_2[1];
        *(ecx - 0x7d17b2e0);
        *(ecx - 0x7d17b2e0) &= eax_2;
        *(arg4 - 0x18) = *(arg4 - 0x18) + ecx;
        *ecx;
        c_5 = false;
        arg4 -= 1;
        void* eax_3;
        eax_3 = 0x9989abac();
        eax_1 = eax_3 + 1;
        
        if (eax_3 + 1 >= 0)
            goto label_19a30;
        
        if (eax_3 + 1)
            break;
        
        eax_1 = __in_al_immb(0x20, eflags);
    }
    
    while (true)
    {
        eax_1[0x88718199] &= ecx;
        void* eax_5;
        void* edx;
        edx = HIGHD(eax_1);
        eax_5 = LOWD(eax_1);
        eax_1 = eax_5 + 1;
        
        if (eax_5 + 1 < 0)
        {
            *(ebx + 0x49) = /* *(ebx + 0x49) = unimplemented  {fist dword [ebx+0x49], st0} */;
            
            if (!ecx)
                /* undefined */
            
            *(esp - 4) = ecx;
            esp -= 4;
            eax_2 = eax_1 - 1;
            break;
        }
        
        int32_t temp26_1 = *(ecx + 0x419988dc);
        *(ecx + 0x419988dc) -= eax_1;
        
        if (!(temp26_1 + -(eax_1)))
        {
            void* ecx_3 = ecx - 1;
            
            if (temp26_1 == eax_1 || ecx_3)
                esp = *esp;
            else
            {
                void* ecx_4;
                ecx_4 = (ecx_3 - 1) + *ebx[1];
                edx = 1;
                eax_1 = 0xb2;
                *(ecx_4 - 0x80) ^= ecx_4;
                void* eax_6 = *(eax_1 - 0x1bb5cfe0) * 0xc941d83a;
                *(edx - 0x63) = eax_6;
                *(eax_6 + 0x4d208121);
                *(eax_6 + 0x4d208121) = ROLD(*(eax_6 + 0x4d208121), 1);
                bool c_7 = /* bool c_7 = unimplemented  {rol dword [eax+0x4d208121], sub_0+1} */;
                0x4784ac34();
                int32_t eax_7;
                eax_7 = *(arg6 + 0x4d);
                eax_1 = 0x482aac3e();
                bool z_4;
                
                while (true)
                {
                    eax_1 = __in_al_immb(0x38, eflags);
                    char temp0_7;
                    temp0_7 = __daa(eax_1, eflags);
                    eax_1 = temp0_7;
                    void* temp29_1 = ecx_3;
                    ecx_3 -= 1;
                    z_4 = temp29_1 == 1;
                    
                    if (!z_4 && temp29_1 - 1 < 0 == temp29_1 - 1)
                        break;
                    
                    char temp30_1 = *ecx_3;
                    *ecx_3 = temp30_1 + 0x29;
                    c_7 = temp30_1 + 0x29 < temp30_1 || (c_7 && temp30_1 + 0x29 == temp30_1);
                }
                
                if (!z_4 && !c_7)
                    esp = *esp;
                else
                    ebx <<= 0x5c;
            }
            
            *(esp - 4) = ecx_3;
            /* undefined */
        }
        
        *(eax_1 - 0x50) += arg4;
        ecx_2 = ecx - 1;
        *(ecx_2 - 0x1c) -= 0x20;
        arg2 = (edx + 1) ^ *ebx[1];
        label_19a4e:
        
        while (true)
        {
            arg2 = 1;
            *(esp - 4) = 0x804942b0;
            esp = (esp - 4) * 0x71fa3020;
            __int1();
            ecx = ecx_2 + 1;
            eax_1 -= 1;
            *(ebx - 0x7d) |= eax_1;
            *(eax_1 - 0x7587bf67) = RORD(*(eax_1 - 0x7587bf67), 1);
            int32_t temp20_1 = *(ecx + 0x409988d0);
            *(ecx + 0x409988d0) -= arg2;
            c_5 = temp20_1 < arg2;
            
            if (temp20_1 - arg2 >= 0)
                break;
            
            label_19a30:
            
            if (!ecx)
            {
                *(ecx + 0x298a7840) = ebx;
                char* temp0_5 = ecx;
                ecx = eax_1 - 1;
                eax_1 = temp0_5;
                eax_1[0xc0784099];
                eax_1[0xc0784099] = RORB(eax_1[0xc0784099], 1);
                c_5 = /* c_5 = unimplemented  {ror byte [eax-0x3f87bf67], 0x1} */;
                goto label_19a6f;
            }
            
            *ecx = RRCB(*ecx, 0x87, c_5);
            ecx_2 = eax_1 - 1;
            *(ecx_2 + 0x19c07840) = ebx;
            char temp0_3 = *(ecx_2 + 0x49464782);
            *(ecx_2 + 0x49464782) = arg2;
            arg2 = temp0_3;
            void* temp0_4 = *(arg2 - 0x1310982);
            *(arg2 - 0x1310982) = ebx;
            ebx = temp0_4;
            eax_1 = *0x104944e1;
        }
        
        label_19a6f:
        eax_1 = eax_1 + 0x66774cbf;
        void* temp18_1 = ecx;
        ecx += 1;
        
        if (temp18_1 + 1)
        {
            *(eax_1 - 0x7fb6a74e) += arg6;
            goto label_199fd;
        }
        
        eax_1[0x8171c199] &= ecx;
    }
    
    goto label_19a18;
}

int32_t __convention("regparm") sub_19ac9(void* arg1, void* arg2, int32_t* arg3, void* arg4 @ ebp, int32_t* arg5 @ esi, void* arg6 @ edi, long double arg7 @ st0)
{
    bool c;
    bool c_1 = c ^ 1;
    int32_t* eax = arg5;
    
    if (c_1)
    {
        *(arg4 - 0x18) += arg3;
        *arg3 &= 0x91839280;
        /* undefined */
    }
    
    int32_t eflags;
    void* const* eax_1;
    void* eax_5;
    void* ecx;
    void* ecx_3;
    void* ebx;
    int32_t* esp;
    bool z;
    bool s;
    bool o;
    
    if (s == o)
    {
        eflags = __cli(eflags);
        
        if (c_1)
        {
            label_19a62:
            arg3[0xa629e10] = ebx;
            int32_t* temp0_6 = arg3;
            arg3 = eax;
            void* eax_2 = temp0_6;
            *(eax_2 - 0x3f87bf67);
            *(eax_2 - 0x3f87bf67) = RORB(*(eax_2 - 0x3f87bf67), 1);
            bool c_4 = /* bool c_4 = unimplemented  {ror byte [eax-0x3f87bf67], 0x1} */;
            label_19a6f:
            eax_2 = eax_2 + 0x66774cbf;
            int32_t* temp4_1 = arg3;
            arg3 += 1;
            void* eax_3;
            
            if (temp4_1 + 1)
                *(eax_2 - 0x7fb6a74e) += arg6;
            else
            {
                *(eax_2 - 0x7e8e3e67) &= arg3;
                
                while (true)
                {
                    *(eax_2 - 0x778e7e67) &= arg3;
                    void* eax_6;
                    arg2 = HIGHD(eax_2);
                    eax_6 = LOWD(eax_2);
                    eax_5 = eax_6 + 1;
                    
                    if (eax_6 + 1 >= 0)
                    {
                        int32_t temp11_1 = arg3[0x10666237];
                        arg3[0x10666237] -= eax_5;
                        
                        if (!(temp11_1 + -(eax_5)))
                        {
                            ecx_3 = arg3 - 1;
                            
                            if (temp11_1 == eax_5 || ecx_3)
                                goto label_19ac5;
                            
                            ecx = (ecx_3 - 1) + *ebx[1];
                            arg2 = 1;
                            eax_5 = 0xb2;
                            *(ecx - 0x80) ^= ecx;
                            eax_1 = *(eax_5 - 0x1bb5cfe0) * 0xc941d83a;
                            goto label_19aa6;
                        }
                        
                        *(eax_5 - 0x50) += arg4;
                        int32_t* ecx_2 = arg3 - 1;
                        ecx_2[-7] -= 0x20;
                        arg2 = (arg2 + 1) ^ *ebx[1];
                        
                        while (true)
                        {
                            arg2 = 1;
                            *(esp - 4) = 0x804942b0;
                            esp = (esp - 4) * 0x71fa3020;
                            __int1();
                            arg3 = ecx_2 + 1;
                            eax_2 = eax_5 - 1;
                            *(ebx - 0x7d) |= eax_2;
                            *(eax_2 - 0x7587bf67) = RORD(*(eax_2 - 0x7587bf67), 1);
                            int32_t temp17_1 = arg3[0x10266234];
                            arg3[0x10266234] -= arg2;
                            c_4 = temp17_1 < arg2;
                            
                            if (temp17_1 - arg2 >= 0)
                                break;
                            
                            label_19a2f:
                            eax = eax_2 - 1;
                            
                            if (!arg3)
                                goto label_19a62;
                            
                            *arg3 = RRCB(*arg3, 0x87, c_4);
                            ecx_2 = eax;
                            ecx_2[0x6701e10] = ebx;
                            char temp0_4 = *(ecx_2 + 0x49464782);
                            *(ecx_2 + 0x49464782) = arg2;
                            arg2 = temp0_4;
                            void* temp0_5 = *(arg2 - 0x1310982);
                            *(arg2 - 0x1310982) = ebx;
                            ebx = temp0_5;
                            eax_5 = *0x104944e1;
                        }
                        
                        goto label_19a6f;
                    }
                    
                    *(ebx + 0x49) = arg7;
                    
                    if (!arg3)
                        /* undefined */
                    
                    *(esp - 4) = arg3;
                    esp -= 4;
                    eax_3 = eax_5 - 1;
                    label_19a18:
                    arg3[-0x20] = *eax_3[1];
                    arg3[-0x1f45ecb8];
                    arg3[-0x1f45ecb8] &= eax_3;
                    *(arg4 - 0x18) = *(arg4 - 0x18) + arg3;
                    *arg3;
                    c_4 = false;
                    arg4 -= 1;
                    void* eax_4;
                    eax_4 = 0x9989abac();
                    eax_2 = eax_4 + 1;
                    
                    if (eax_4 + 1 >= 0)
                        goto label_19a2f;
                    
                    if (!(eax_4 + 1))
                    {
                        eax_2 = __in_al_immb(0x20, eflags);
                        arg2 ^= *ebx[1];
                        arg2 = 1;
                        eax_2 = 0x804958b2;
                        break;
                    }
                }
            }
            
            esp *= 0x71fa3020;
            __int1();
            *(esp - 4) = arg6;
            esp -= 4;
            eax_3 = eax_2 - 1;
            *(ebx - 0x61) |= eax_3;
            *(eax_3 - 0x7587bf67) = RORD(*(eax_3 - 0x7587bf67), 1);
            *(ebx - 0x1cb6ac25) -= ebx;
            arg3[0x12] ^= arg2;
            goto label_19a18;
        }
        
        ebx &= arg3;
        int32_t temp3_1 = *(eax - 0x790982df);
        *(eax - 0x790982df) = temp3_1 + eax;
        c_1 = temp3_1 + eax < temp3_1;
        z = !(temp3_1 + eax);
        eflags = __cli(eflags);
    }
    else
    {
        char temp0_1 = arg2;
        arg2 = *ebx[1];
        *ebx[1] = temp0_1;
    }
    
    eax_1 = &__return_addr;
    ecx = arg3 - 1;
    
    if (!z && !ecx)
    {
        void* ecx_1;
        ecx_1 = (ecx - 1) + *ebx[1];
        arg2 = 1;
        char var_6afb6e2;
        char var_6afb6e2_1 = var_6afb6e2 + *arg2[1];
        eax_1 = &__return_addr - 0;
        bool c_3 = /* bool c_3 = unimplemented  {sbb al, 0x0} */;
        *0xf941481c = RRCB(*0xf941481c, 0x1c, c_3);
        eax_1[-0x1f999df8] += eax_1;
        
        if (!(eax_1[-0x1f999df8] + eax_1))
        {
            *eax;
            /* jump -> 0x10888ca2 */
        }
        
        ecx = ecx_1 - 1;
    }
    
    *(eax - 4) = eax_1;
    *eax_1 ^= eax_1;
    esp = 0x41481731;
    *eax_1 ^= eax_1;
    
    if (*(arg1 - 0x66771d83) + 0x80 < 0)
    {
        *(ecx - 0x7f16a02d) -= arg2;
        __int1();
        char temp0_2 = *eax_1;
        *eax_1 = arg2;
        arg2 = temp0_2;
        /* undefined */
    }
    
    label_19aa6:
    *(arg2 - 0x63) = eax_1;
    *(eax_1 + 0x4d208121);
    *(eax_1 + 0x4d208121) = ROLD(*(eax_1 + 0x4d208121), 1);
    bool c_6 = /* bool c_6 = unimplemented  {rol dword [eax+0x4d208121], sub_0+1} */;
    0x4784ac34();
    int32_t eax_7;
    eax_7 = *(arg6 + 0x4d);
    eax_5 = 0x482aac3e();
    bool z_2;
    
    while (true)
    {
        eax_5 = __in_al_immb(0x38, eflags);
        char temp0_8;
        temp0_8 = __daa(eax_5, eflags);
        eax_5 = temp0_8;
        void* temp10_1 = ecx_3;
        ecx_3 -= 1;
        z_2 = temp10_1 == 1;
        
        if (!z_2 && temp10_1 - 1 < 0 == temp10_1 - 1)
            break;
        
        char temp12_1 = *ecx_3;
        *ecx_3 = temp12_1 + 0x29;
        c_6 = temp12_1 + 0x29 < temp12_1 || (c_6 && temp12_1 + 0x29 == temp12_1);
    }
    
    if (!z_2 && !c_6)
    {
        label_19ac5:
        esp = *esp;
    }
    else
        ebx <<= 0x5c;
    
    *(esp - 4) = ecx_3;
    /* undefined */
}

int32_t __convention("fastcall") sub_1aa81(char* arg1, void* arg2, void* arg3 @ ebp, int32_t arg4 @ esi, void* arg5 @ edi)
{
    *arg1 &= 0x70;
    int32_t eax;
    *eax[1] = 5;
    arg1 = 0x84;
    char* edi = arg5 + 1;
    *(edi - 0x1c);
    *edi -= 0xfe;
    *(arg1 * 3) <<= 1;
    arg1[0xffffff83] -= 0x20;
    int16_t ebx;
    arg2 ^= *ebx[1];
    int32_t eflags;
    int32_t eflags_1;
    char temp0_1;
    temp0_1 = __das((eax - 0x25e4dc80), eflags);
    void* eax_1;
    eax_1 = temp0_1;
    /* undefined */
}

int32_t sub_1ac3c()
{
    /* undefined */
}

int32_t __convention("regparm") sub_1ac3d(void* arg1, char arg2, char* arg3)
{
    int32_t eflags;
    int32_t eflags_1 = __cli(eflags);
    int32_t ebx;
    bool o;
    
    if (!o)
    {
        eflags_1 = __cli(eflags_1);
        
        if (!o)
            /* undefined */
        
        ebx = 0xd;
        *arg3 = arg1 + 1;
        int16_t es_1;
        arg1 = __les_gprz_memp(*arg3);
    }
    
    int32_t temp0 = *(arg1 + 0x1001c0ea);
    *(arg1 + 0x1001c0ea) += arg1;
    int32_t eflags_2 = __cli(eflags_1);
    
    if (!(temp0 + arg1))
        /* undefined */
    
    ebx = 0xd;
    *arg3 = arg1 + 1;
    void* eax_1;
    eax_1 = (arg1 + 1) + 1;
    int32_t temp1 = *(eax_1 + 0x1001c0ea);
    *(eax_1 + 0x1001c0ea) += eax_1;
    __cli(eflags_2);
    
    if (!(temp1 + eax_1))
        /* undefined */
    
    ebx = 0xd;
    void* eax_2;
    eax_2 = *arg3;
    /* undefined */
}

int32_t __convention("regparm") sub_1ac9c(char arg1, int32_t arg2, int16_t* arg3)
{
    int32_t ebx;
    ebx = 0xd;
    int16_t es;
    *arg3 = es;
    *arg3 = ROLB(*arg3, 0x80);
    /* undefined */
}

int32_t __convention("regparm") sub_1acca(int32_t arg1, int32_t, int16_t* arg3)
{
    int32_t ebx;
    ebx = 0xd;
    *arg3;
    /* undefined */
}

int32_t __convention("regparm") sub_1ad08(void* arg1, void* arg2, char* arg3, int32_t arg4 @ ebp, int32_t arg5 @ edi)
{
    int16_t ebx;
    bool c;
    arg2 = arg2 + *ebx[1];
    bool o_1 = /* bool o_1 = unimplemented  {adc dl, bh} */;
    
    if (!o_1)
        /* undefined */
    
    char* eax = arg1 + 1;
    ebx = 0xd;
    bool o;
    
    do
    {
        char* temp0_1 = arg3;
        arg3 = eax;
        eax = temp0_1;
        *(arg2 + (arg4 << 3) - 0x157ffebc) = &eax[*(arg2 + (arg4 << 3) - 0x157ffebc)];
        *arg3;
        *arg3 = ROLB(*arg3, 0x10);
        o = /* o = unimplemented  {rol byte [ecx], 0x10} */;
        int32_t eflags = __cli(eflags);
    } while (!o);
    ebx = 0xd;
    *(arg2 - 0x7e1e63dc) += arg2;
    eax[0x80e84daf];
    eax[0x80e84daf] &= arg2;
    void* eax_2;
    eax_2 = *0x85b37b36;
    /* undefined */
}

int32_t __convention("regparm") sub_1ad44(int32_t arg1, void* arg2, void* arg3 @ esi, void* arg4 @ edi, long double arg5 @ st0)
{
    *(arg3 - 0xfb8a301) -= 0xa0;
    
    if (*(arg3 - 0xfb8a301) + 0x60 >= 0)
        /* undefined */
    
    int16_t eax;
    int16_t ds;
    eax = __lds_gprz_memp(*arg3);
    int32_t eflags;
    int32_t eflags_1;
    char temp0_1;
    char temp1;
    temp0_1 = __aas(eax, *eax[1], eflags);
    eax = temp0_1;
    *eax[1] = temp1;
    eax = eax - 0x78;
    char* ebx;
    ebx = 0x7f;
    void* eax_1;
    char* ecx;
    void* edx;
    int16_t es;
    eax_1 = 0x8bb4f280(es, es);
    eax_1 -= 0x60;
    *(arg2 - 0x7f438f4e);
    *(arg3 + eax_1 - 0x80) += edx;
    *(arg3 - 0x4c) &= arg4;
    *(arg4 - 0x72);
    eax_1 = __in_al_immb(0x2d, eflags_1);
    *eax_1[1] = *eax_1[1] + 0x1c;
    
    while (true)
    {
        eax_1 &= 0x49beb24e;
        ecx[0xffffff85] -= 0x20;
        edx ^= *ebx[1];
    }
}

int32_t __convention("regparm") sub_1afad(void* arg1, int32_t, char* arg3, int32_t arg4 @ esi, void* arg5 @ edi, long double arg6 @ st0)
{
    void* ebx;
    *(ebx - 0x377e77b8) &= arg1;
    *(arg3 - 0x6f8f37df) += 0x7c0180bc;
    *(arg1 + 0x7ce8ad21) += arg1;
    *(arg5 - 0x73);
    bool p = /* bool p = unimplemented  {inc edi} */;
    bool a = /* bool a = unimplemented  {inc edi} */;
    void* eax;
    *eax[1] = (arg5 + 2 < 0 ? 1 : 0) << 7 | (arg5 == 0xfffffffe ? 1 : 0) << 6 | (a ? 1 : 0) << 4
        | (p ? 1 : 0) << 2;
    eax = 0x1a;
    *arg3 -= 0x81;
    *(arg3 - 0x3e1e7fb9);
    *(arg5 - 5);
    *(arg5 - 5) |= eax;
    eax = 0x1a - *(eax - 0x7e257ed7);
    arg3 &= 0xc1;
    *(arg5 + 0x38);
    eax |= *(arg5 + 0x38);
    /* undefined */
}

int32_t __convention("regparm") sub_1aff1(int32_t arg1, void* arg2, char* arg3, void* arg4 @ ebp, int32_t arg5 @ esi, int32_t* arg6 @ edi, long double arg7 @ st0)
{
    __int1();
    bool z;
    bool s;
    bool o;
    
    if (z || s != o)
    {
        bool c;
        *(arg3 - 0x247ebcc3) = *(arg3 - 0x247ebcc3) - 0x1e7ede7f;
        /* undefined */
    }
    
    int32_t* ebx;
    *ebx += arg1;
    char temp2 = arg2;
    arg2 -= *arg3[1];
    bool c_1 = temp2 < *arg3[1];
    arg3 = *arg3;
    *(arg3 - 0x4cbbba60) = *(arg3 - 0x4cbbba60) + 0x247cbbb5;
    bool c_2 = /* bool c_2 = unimplemented  {sbb dword [ecx-0x4cbbba60], 0xdb83444b} */;
    arg3[0xb34545a8] = arg3[0xb34545a8] - 0x34;
    *arg6 s>>= 1;
    void* gsbase;
    *(gsbase - 0x6f718317) s>>= 1;
    void* eax;
    *eax[1] = 0x80;
    void* ecx = arg3 & arg6;
    
    while (true)
    {
        char temp5_1 = *(eax - 0x79);
        *(eax - 0x79) += eax;
        ecx -= 1;
        
        if (temp5_1 + eax >= temp5_1)
            break;
        
        *(ebx + 2);
        *(ebx + 2) &= 0xcf;
    }
    
    void* ebx_2;
    *ebx_2[1] = *(ebx + 2)[1] | *arg2[1];
    *(arg4 - 9) &= arg4 + 1;
    *(eax - 4) = 0x112381ff;
    void* eax_1;
    eax_1 = &*__return_addr[1] + *(ebx_2 + 0x2f67249);
    *(arg2 + 0x60f66d21) -= 1;
    int32_t eax_2;
    int32_t ecx_1;
    int32_t edx;
    eax_2 = (*(eax_1 - 0x7ffe7f44))();
    void* eax_3 = eax_2 | 0x4b814181;
    char* ecx_2 = ecx_1 + 0x7c46f081;
    *(eax_3 - 0x7f4b6fdf) += eax_3;
    void* eax_4 = eax_3 & 0xf084e193;
    *eax_4 ^= eax_4;
    ebx_2 = 0x80;
    __int1();
    int32_t eflags;
    int32_t eflags_1 = __cli(eflags);
    *ecx_2 &= 0x80;
    __int1();
    int32_t temp0 = COMBINE(edx, eax_4 - 1) / ecx_2;
    int32_t temp1 = COMBINE(edx, eax_4 - 1) % ecx_2;
    *(temp0 - 0x7a060b0f) &= temp0;
    void* eax_7 = temp0 - 1;
    *ebx_2 += *eax_7[1];
    int32_t temp8 = *(ecx_2 + 0x7f18047) + temp1;
    *(ecx_2 + 0x7f18047) = temp8;
    void* ecx_3 = ecx_2 - 1;
    
    if (!temp8 || !ecx_3)
    {
        ebx_2 = 0x88;
        char temp9_1 = *ecx_3;
        *ecx_3 &= 0xad;
        bool p_1 = /* bool p_1 = unimplemented  {and byte [ecx], 0xad} */;
        bool a_1 = /* undefined */;
        eax_7 = 0x4787f141();
        *eax_7[1] = ((temp9_1 & 0xad) < 0 ? 1 : 0) << 7 | (!(temp9_1 & 0xad) ? 1 : 0) << 6
            | (a_1 ? 1 : 0) << 4 | (p_1 ? 1 : 0) << 2;
        arg6 += 1;
        eax_7 = *0xfeda812f;
        int32_t eflags_2;
        char temp0_1;
        temp0_1 = __das(eax_7, eflags_1);
        eax_7 = temp0_1;
    }
    
    *(ecx_3 + (arg5 << 2) - 0x7f8f16c3) &= eax_7;
    *arg6 = eax_7;
    *(ecx_3 + 0x1184f91c) |= 0x88;
    *(ecx_3 - 1) += *(ecx_3 - 1)[1];
    void* ecx_4;
    *ecx_4[1] = ebx_2;
    ebx_2 = *(ecx_3 - 1)[1];
    *(ecx_4 + 0x1185f91d) = RORB(*(ecx_4 + 0x1185f91d), 0x88);
    *ecx_4 u>>= 0x81;
    *(eax_7 - 0x7f1993df);
    void* eax_8;
    eax_8 = *0x85f91d01;
    *(eax_8 - 0x7dbe7e06) = *(eax_8 - 0x7dbe7e06) + eax_8;
    int32_t eax_9 = eax_8;
    ecx_4 = 0xf9;
    *(eax_9 - 0x771e57dc) -= 0x7f0e7a05;
    *(ecx_4 - 8) -= 0x50;
    0xa28b836a();
    /* undefined */
}

int32_t __convention("fastcall") sub_1b1bd(int32_t arg1, char arg2, void* arg3 @ edi)
{
    void* ecx = arg1 & (arg3 + 1);
    bool c_1;
    
    while (true)
    {
        char temp1_1 = *(arg3 - 0xf6);
        *(arg3 - 0xf6) += arg2;
        c_1 = temp1_1 + arg2 < temp1_1;
        ecx -= 1;
        
        if (!c_1)
            break;
        
        char* ebx;
        *ebx;
        *ebx &= 0xcf;
    }
    
    do
    {
        int32_t esp;
        *(esp - 4) = arg3 - 0x7f;
        esp -= 4;
        *(ecx - 0x77df3fdd) += 1;
        ecx -= 1;
    } while (c_1);
    
    /* undefined */
}

int32_t __convention("fastcall") sub_1b210(char* arg1, int16_t arg2, int32_t arg3 @ ebp, void* arg4 @ edi)
{
    void* eax = *0x82430879;
    *(eax - 0x4f4e7b87) <<= 1;
    *arg1 -= 0x6f;
    *(eax - 0xf198887) <<= 1;
    int16_t es;
    *(arg4 - 0x7f) = es;
    void* ebp = arg3 & *(arg1 - 0x1de212b9);
    *0x79a01de0 = ebp;
    *0x79a01ddc = ebp;
    *0x79a01dd8 = ebp;
    char* ebx;
    *ebx;
    *ebx &= 0xa9;
    int32_t eflags;
    __in_oeax_dx(arg2, eflags);
    /* unimplemented  {sbb eax, 0x47a955e2} */
    __in_oeax_dx(arg2, eflags);
    *0x79a01dd4 = ebp;
    *ebx;
    *0x79a01dd0 = ebp;
    char temp2 = *arg1 & 0x87;
    *arg1 = temp2;
    
    if (temp2 && arg1 == 1)
    {
        *(ebp - 0x57);
        /* undefined */
    }
    
    *(arg1 - 1);
    int32_t eax_4;
    eax_4 = *0x5d47ab79;
    0xf680c58f();
    int32_t eax_6;
    eax_6 = __salc(eflags);
    /* undefined */
}

int32_t __convention("regparm") sub_1b34f(int32_t arg1, void* arg2, int32_t arg3, void* arg4 @ ebp)
{
    __int1();
    char* ebx;
    char temp1 = *ebx | 0xb1;
    *ebx = temp1;
    void* ecx = arg3 - 1;
    
    if (!temp1 || ecx)
        /* undefined */
    
    int32_t temp2 = *(arg4 - 0x73f27516) & arg1;
    *(arg4 - 0x73f27516) = temp2;
    __int1();
    
    if (temp2 <= 0)
    {
        void* temp0_1 = arg2;
        arg2 = arg4;
        arg4 = temp0_1;
    }
    
    *0xf18c4554 = ecx;
    bool cond:3;
    bool cond:4;
    
    if (temp2 > 0)
    {
        arg1 |= 0x7ff18c;
        cond:3 = arg1 > 0;
        cond:4 = arg1 > 0;
    }
    else
    {
        void* temp3_1 = arg2 & arg4;
        cond:3 = temp3_1 > 0;
        cond:4 = temp3_1 > 0;
        ecx = *0x7ff18c;
    }
    
    while (true)
    {
        *0xf18c9180 = ecx;
        
        if (cond:4)
        {
            arg1 = arg1 * *(ecx - 0x7ade7e01);
            break;
        }
        
        if (!cond:3)
        {
            *0x852181ff;
            break;
        }
    }
    
    /* undefined */
}

int32_t __convention("regparm") sub_1b3a9(void* arg1, int32_t arg2, int32_t* arg3, int32_t arg4 @ ebp, long double arg5 @ st0)
{
    __int1();
    int32_t ebx;
    int16_t esp_1;
    bool o_1;
    
    while (true)
    {
        bool z;
        bool s;
        bool o;
        
        if (!z && s == o)
        {
            *(arg1 - 0x7e0f7501);
            arg3 ^= 0x7f;
            esp_1 = (&__return_addr | *arg2) + 1;
            int32_t temp1_1 = ebx;
            ebx -= 1;
            o_1 = temp1_1 - 1;
            *(arg1 + 0x50ea8647);
            break;
        }
        
        if (z || s != o)
        {
            *ebx[1] = *ebx[1];
            *arg2[1] = arg1;
            *arg3 += 0xb7ff180;
            *(ebx + (arg3 << 1) - 0x24);
            arg1 &= *(ebx + (arg3 << 1) - 0x24);
            o_1 = false;
            arg1 = 0x47;
            char temp0_1 = arg2;
            arg2 = *arg3[1];
            *arg3[1] = temp0_1;
            void* var_4 = arg1;
            esp_1 = &var_4;
            break;
        }
        
        *0xf18c9180 = arg3;
    }
    
    if (!o_1)
    {
        *0x184ea29 = 0x97ff180;
        /* undefined */
    }
    
    arg3 ^= 0x7f;
    int32_t eflags;
    char temp0_2;
    temp0_2 = __arpl_gpr16_gpr16((esp_1 | *arg2) + 1, ebx);
    ebx = 0x87;
    /* undefined */
}

int32_t __convention("regparm") sub_1b3f2(char arg1, void* arg2, char* arg3, int32_t arg4 @ ebp, int32_t arg5 @ edi)
{
    *arg3 = arg1;
    uint16_t ebx;
    ebx = 0xb8;
    bool c;
    *(arg2 - 0x39f0981) = *(arg2 - 0x39f0981) + 0x181f08a;
    arg3 ^= 0x7f;
    int32_t eflags;
    uint16_t temp0;
    temp0 = __arpl_gpr16_gpr16((&__return_addr | *(arg4 + 1)) + 1, ebx);
    ebx = 0x87;
    /* undefined */
}

int32_t __convention("fastcall") sub_1b40e(int32_t* arg1, int32_t arg2, int32_t arg3 @ ebp, int32_t arg4 @ edi)
{
    int32_t eax;
    eax = 0x47;
    char temp0 = arg2;
    arg2 = *arg1[1];
    *arg1[1] = temp0;
    int32_t var_4 = eax;
    int32_t* esp = &var_4;
    bool o;
    
    if (!o)
    {
        *0x7050ea86 = 0x9c7f241;
        /* undefined */
    }
    
    if ((*0xf18c4554 & arg1) <= 0)
        arg2 = arg3;
    
    *0x37ff18c = arg1;
    char temp1 = *0xf18c4554 & arg1;
    
    while (true)
    {
        arg1 = *0xf18c9180;
        
        if (temp1 > 0)
        {
            eax = 0x47 * *arg1;
            break;
        }
        
        if (temp1 <= 0)
        {
            esp = &var_4 & arg4;
            break;
        }
    }
    
    char edx = eax;
    *arg1 += 0xb7ff180;
    *(arg2 + (arg1 << 1) - 0x24);
    eax &= *(arg2 + (arg1 << 1) - 0x24);
    eax = 0x47;
    *arg1[1] = edx;
    *(esp - 4) = eax;
    *0x7050ea86 = 0x9c7f241;
    /* undefined */
}

int32_t __convention("regparm") sub_1b49d(int32_t arg1, void* arg2, int32_t arg3, void* arg4 @ ebp, void* arg5 @ edi)
{
    __int1();
    char* ebx;
    char temp3 = *ebx | 0x9f;
    *ebx = temp3;
    int32_t* ecx = arg3 - 1;
    void* esp;
    char* edi;
    
    if (!temp3 || ecx)
    {
        edi = arg5 + 4;
        ecx -= 1;
        
        if (arg1 == *arg5 || ecx)
            /* undefined */
        
        *(arg4 - 0x73f27516) &= arg1;
        __int1();
    }
    else
    {
        *ebx &= &__return_addr;
        edi = arg5 + 1;
        void arg_4;
        esp = &arg_4;
        
        if ((arg2 & *ecx[1]) < 0)
            /* undefined */
    }
    
    *0x37ff18c = ecx;
    ecx = *0x7ff18c;
    *0xd8aea2c = ecx;
    ecx[0x5ffc63] = ecx[0x5ffc63] + 0x7f;
    char temp2 = *edi;
    uint8_t temp1 = arg1 % temp2;
    arg1 = arg1 / temp2;
    *arg1[1] = temp1;
    *ecx &= 0xd84ea85;
    *(esp - 4) = esp;
    /* undefined */
}

int32_t __convention("regparm") sub_1b4d3(int32_t arg1, int32_t arg2, int32_t* arg3, int32_t arg4 @ ebp, void* arg5 @ edi)
{
    __int1();
    int32_t ebx;
    
    while (true)
    {
        bool cond:2;
        
        if (cond:2)
        {
            char temp2_1 = ebx;
            uint8_t temp1_1 = arg1 % temp2_1;
            arg1 = arg1 / temp2_1;
            *arg1[1] = temp1_1;
            break;
        }
        
        bool cond:0;
        
        if (!cond:0)
            break;
        
        int32_t temp4_1 = arg4;
        arg4 -= 1;
        cond:0 = temp4_1 > 1;
        cond:2 = temp4_1 > 1;
        arg1 = 0xf18dba54();
    }
    
    *arg2[1] = arg1;
    *arg3 += 0xb7ff180;
    arg1 &= *(arg4 + (ebx << 1) - 0x24);
    *arg1[1] = 0x85;
    int16_t es;
    *(arg5 - 0x57) = es;
    void* edi_1 = arg5 + 2;
    
    for (bool cond:1 = arg5 + 1 > 0xffffffff; cond:1; cond:1 = true)
    {
        arg1 = 0xb4;
        *(edi_1 - 0x74);
        edi_1 += 1;
    }
    
    /* jump -> *(arg1 + 0xd8f18047) */
}

int32_t __convention("regparm") sub_1b886(int32_t arg1, void* arg2, int32_t arg3, void* arg4 @ ebp, uint16_t* arg5 @ esi, int32_t arg6 @ edi)
{
    int32_t eflags;
    uint8_t* edi;
    uint8_t temp0;
    temp0 = __insb(arg6, arg2, eflags);
    *edi = temp0;
    char* esi = __outsd(arg2, *arg5, arg5, eflags);
    int32_t* ebx;
    *(ebx + 0x1486bff) = -(*(ebx + 0x1486bff));
    void* eax;
    eax = *esi;
    void* esi_1 = &esi[1];
    *(eax - 0x5306efb9) += arg3 - 1;
    *(eax + 0x69d0ee29) += eax;
    void* ecx_1 = arg3 - 2;
    void* eax_1;
    
    if (eax + 1 >= 0)
    {
        *(arg4 - 0x52b18f18) += arg4;
        eax_1 = __in_al_dx(arg2, eflags);
        *(arg2 + 0x4787b103) |= 0x30;
        __out_dx_oeax(arg2, eax_1, eflags);
        goto label_1b836;
    }
    
    *0x6f238902;
    eax_1 = eax;
    void* eax_4;
    
    while (true)
    {
        *(ecx_1 - 0x40) |= edi;
        esi_1 += *(ecx_1 - 0x10cfb879);
        label_1b836:
        ebx[-0x1d07c424];
        ebx[-0x1d07c424] = RORB(ebx[-0x1d07c424], 0x8d);
        bool c_1 = /* bool c_1 = unimplemented  {ror byte [ebx-0x741f1090], 0x8d} */;
        void* edi_1 = &edi[1];
        int16_t temp0_2 = esi_1;
        esi_1 = eax_1;
        edi = edi_1 + 1;
        
        if (edi_1 < 0xffffffff)
            /* undefined */
        
        char* ecx_2;
        ecx_2 = temp0_2 + *ebx[1];
        *ecx_2 &= 0x78;
        ecx_1 = ecx_2 + edi;
        *eax_4[1] = 1;
        
        if (ecx_2 == -(edi) || ecx_2 + edi < ecx_2)
            break;
        
        *edi += 0x67;
        eax_1 = 0x32f10145;
    }
    
    eax_4 = *0x5af66a47;
    int32_t eflags_1 = __sti(eflags);
    *ebx &= 0x49754875;
    char* esi_2 = __outsd(arg2, *esi_1, esi_1, eflags_1);
    *(arg4 + 0x14874fc) = -(*(arg4 + 0x14874fc));
    eax_4 = *esi_2;
    void* esi_3 = esi_2 - 1;
    *(ebx + 0x49) += esi_3;
    *(ecx_1 + 8) -= 0x65;
    edi[0x10] = eax_4;
    eax_4 = *esi_3;
    *(eax_4 - 0x7e2f03d7) += eax_4;
    /* undefined */
}

int32_t __convention("fastcall") sub_1b913(int32_t arg1, void* arg2, int32_t arg3 @ edi)
{
    *(arg2 + 0x48) &= arg1;
}

int32_t __convention("regparm") sub_1b91b(int32_t arg1, void* arg2, int32_t arg3, char* arg4 @ ebp, void* arg5 @ esi, char* arg6 @ edi)
{
    char temp1 = *(arg3 + 0x49);
    int32_t* ebx;
    *(arg3 + 0x49) += *ebx[1];
    bool c = temp1 + *ebx[1] < temp1;
    void* eax = arg1 - 1;
    void* ecx = arg3 - 2;
    bool cond:4 = arg3 - 1 < 1;
    
    if (arg3 - 2 < 0)
        goto label_1b8a6;
    
    bool d;
    int32_t eflags;
    void* ecx_4;
    void* esp_2;
    
    if (arg3 - 2 < 0)
    {
        d = false;
        
        if (arg3 == 2)
        {
            int16_t temp0_4;
            temp0_4 = __arpl_memw_gpr16(*(eax - 0x77), ecx);
            *(eax - 0x77) = temp0_4;
            
            if (arg3 - 2 >= 0)
                goto label_1b846;
            
            arg2 += 1;
            void* var_4_1 = eax;
            void* var_8_1 = ecx;
            void* var_c_1 = arg2;
            int32_t* var_10 = ebx;
            int32_t** var_14_1 = &var_10;
            char* var_18_1 = arg4;
            void* var_1c = arg5;
            *(arg2 + 0x61) = *(eax - 1)[1];
            *eax;
            *(ecx - 1) = ROLD(*(ecx - 1), 0x5f);
            ecx_4 = ecx - 2;
            ebx[-0x20];
            arg4 = arg6;
            esp_2 = &var_1c;
            goto label_1b8d2;
        }
        
        ecx += arg6;
    }
    else
    {
        arg2 += 1;
        void* var_4_2 = arg5;
        /* unimplemented  {enter 0x8862, 0x47} */
        ecx = ecx + *ebx[1];
        *ecx = ROLD(*ecx, 0x81);
        *(eax - 1 + (arg2 << 3) + 0x2bcf081) -= ebx;
        *ebx;
        int32_t* var_8_2 = ebx;
        void* var_c_2 = eax - 2;
        char* esi_2 = __outsd(arg2, *arg5, arg5, eflags);
        void* eax_4;
        eax_4 = (eax - 2) * ebx[-1];
        arg6 -= 1;
        ecx_4 = ecx - 1 + arg6;
        eax = *esi_2;
        arg5 = &esi_2[1];
        *(arg6 + 0x49) += ecx_4;
        char* esp_4 = arg4;
        arg4 = *esp_4;
        esp_2 = &esp_4[4];
        void* ecx_2;
        
        if (*(ecx_4 + 0x4e) - 0x48 >= 0)
        {
            label_1b8d2:
            ecx_2 = ecx_4 - 1;
            
            if (ecx_4 - 1 >= 0)
                goto label_1b858;
            
            goto label_1b896;
        }
        
        ecx_2 = ecx_4 + arg6;
        label_1b896:
        eax = *arg5;
        arg5 += 1;
        *(eax - 0x5306efb9) += ecx_2;
        *(eax + 0x69d0ee29) += eax;
        ecx = ecx_2 - 1;
        void* eax_1;
        
        if (eax + 1 >= 0)
        {
            *(arg4 - 0x52b18f18) = &arg4[*(arg4 - 0x52b18f18)];
            eax_1 = __in_al_dx(arg2, eflags);
            *(arg2 + 0x4787b103) |= 0x30;
            __out_dx_oeax(arg2, eax_1, eflags);
            goto label_1b836;
        }
        
        *esp_2;
        eax_1 = eax;
        
        while (true)
        {
            *(ecx - 0x40) |= arg6;
            arg5 += *(ecx - 0x10cfb879);
            label_1b836:
            ebx[-0x1d07c424];
            ebx[-0x1d07c424] = RORB(ebx[-0x1d07c424], 0x8d);
            c = /* c = unimplemented  {ror byte [ebx-0x741f1090], 0x8d} */;
            void* edi = &arg6[1];
            int16_t temp0_2 = arg5;
            arg5 = eax_1;
            eax = temp0_2;
            arg6 = edi + 1;
            cond:4 = edi < 0xffffffff;
            label_1b846:
            
            if (cond:4)
                /* undefined */
            
            ecx_2 = eax + *ebx[1];
            d = true;
            *ecx_2 &= 0x78;
            label_1b858:
            ecx = ecx_2 + arg6;
            *eax[1] = 1;
            
            if (ecx_2 == -(arg6) || ecx_2 + arg6 < ecx_2)
                break;
            
            label_1b8a6:
            *arg6 += 0x67;
            eax_1 = eax - 1;
        }
        
        eax = *0x5af66a47;
        int32_t eflags_1 = __sti(eflags);
        *ebx &= 0x49754875;
        arg5 = __outsd(arg2, *arg5, arg5, eflags_1);
        arg4[0x14874fc] = -(arg4[0x14874fc]);
    }
    eax = *arg5;
    void* esi;
    
    if (d)
        esi = arg5 - 1;
    else
        esi = arg5 + 1;
    
    *(ebx + 0x49) += esi;
    *(ecx + 8) -= 0x65;
    arg6[0x10] = eax;
    eax = *esi;
    *(eax - 0x7e2f03d7) += eax;
    /* undefined */
}

int32_t __convention("regparm") sub_1b925(int32_t arg1, int32_t, int32_t arg3, void* arg4 @ esi, int32_t arg5 @ edi)
{
    *(arg4 + 0x48) &= arg1;
    uint64_t* ecx = arg3 & arg5;
    int32_t eax;
    int16_t es;
    eax = __les_gprz_memp(*ecx);
    char temp0 = ecx;
    ecx = *eax[1];
    *eax[1] = temp0;
    *ecx += *eax[1];
    return eax - 1;
}

int32_t __convention("fastcall") sub_1b937(void** arg1)
{
    *arg1 &= &__return_addr;
    int32_t eax;
    int16_t es;
    eax = __les_gprz_memp(*arg1);
    /* undefined */
}

int32_t __convention("regparm") sub_1ba0b(void* arg1, char arg2, int32_t arg3, char* arg4 @ edi, long double arg5 @ st0)
{
    *arg4 = RORB(*arg4, 1);
    arg1 = arg1 + 0x5f;
    int32_t* ebx;
    char temp1 = RLCB(*(ebx + 0x490ce187), 0xc0, true);
    *(ebx + 0x490ce187) = temp1;
    
    if (temp1 < 0)
    {
        *(arg1 + 0xdf181fa) &= arg2;
        /* undefined */
    }
    
    *ebx = arg5;
    *(arg3 - 0x7d);
    /* undefined */
}

int32_t __convention("regparm") sub_1ba87(void* arg1, uint16_t arg2, int32_t arg3, int32_t arg4 @ ebp, void* arg5 @ esi, int32_t arg6 @ edi)
{
    int32_t* ecx = arg3 - 1;
    int32_t eflags;
    int16_t* edi;
    int16_t temp0;
    temp0 = __insd(arg6, arg2, eflags);
    *edi = temp0;
    *arg1;
    *ecx &= 0xfffffff0;
    void* ebx;
    int16_t* esp;
    
    while (true)
    {
        ecx[-0x20] = *arg2[1];
        void* eax_1 = arg1 - 2;
        arg1 = eax_1 - 1;
        
        if (arg4 < 0)
            break;
        
        ecx -= 1;
        
        if (eax_1 != 1 && !ecx)
        {
            if (arg1 + 1 >= 0)
            {
                *(arg1 + 0xdf181fb) &= arg2;
                /* undefined */
            }
            
            arg5 -= edi;
            uint32_t esp_1 = &__return_addr >> 1;
            ecx[-0x20];
            eflags = __cli(eflags);
            void* eax_2;
            eax_2 = (arg1 + 1) << 1;
            void* temp5_1 = ebx;
            ebx -= 1;
            int32_t* eax_3 = ecx - 2;
            
            if (temp5_1 - 1 >= 0)
            {
                *(esp_1 - 4) = 0xfb12f180;
                esp_1 -= 4;
                void* ecx_3;
                ecx_3 = eax_2 ^ 0x7f;
                *eax_3 |= edi;
                *arg5 |= 0xa0;
                eax_3 u>>= 1;
            }
            
            *(arg5 - 0x4cfde0c0) |= 0xe7;
            __out_immb_oeax(0x49, eax_3 - 1, eflags);
            int16_t temp0_2;
            temp0_2 = __insd(edi, arg2, eflags);
            *edi = temp0_2;
            arg1 = (eax_3 - 1) * *ebx[1];
            __out_immb_oeax(0x48, arg1, eflags);
            esp = esp_1 + arg4;
            break;
        }
    }
    
    *ebx;
    __out_dx_oeax(arg2, arg1, eflags);
    *(arg1 + 0x7f2080b3);
    *(ebx - 0x1ede7d04);
    *(arg1 - 0x2b) = *arg2[1];
    *(arg5 - 0x1c591e80) |= 0x40;
    *esp;
    *arg2[1] += *(ebx + 0x49d348db);
    int16_t* edi_1;
    int16_t temp0_3;
    temp0_3 = __insd(edi, arg2, eflags);
    *edi_1 = temp0_3;
    char temp2 = arg1;
    uint8_t temp1 = arg1 % temp2;
    arg1 = arg1 / temp2;
    *arg1[1] = temp1;
    int16_t cs;
    *(esp - 2) = cs;
    int32_t eax_4;
    eax_4 = __salc(eflags);
    *(arg5 - 0x4cfde0c0) |= 0xd5;
    int32_t eflags_1;
    char temp0_6;
    char temp1_1;
    temp0_6 = __aad_immb(0x49, (eax_4 - 1), *(eax_4 - 1)[1]);
    void* eax_5;
    eax_5 = temp0_6;
    *eax_5[1] = temp1_1;
    int16_t* edi_2;
    int16_t temp0_7;
    temp0_7 = __insd(edi_1, arg2, eflags_1);
    *edi_2 = temp0_7;
    int32_t eflags_2;
    char temp0_8;
    char temp1_2;
    temp0_8 = __aad_immb(0x48, eax_5, *eax_5[1]);
    eax_5 = temp0_8;
    *eax_5[1] = temp1_2;
    *ebx;
    __out_dx_oeax(arg2, eax_5, eflags_2);
    *(eax_5 + 0x7f2080b3);
    *(edi_2 - 3) = -(*(edi_2 - 3));
    /* undefined */
}

int32_t __convention("regparm") sub_1bc09(void* arg1, int32_t arg2, int32_t arg3, int32_t arg4 @ ebp, int32_t arg5 @ esi, int32_t arg6 @ edi, long double arg7 @ st0)
{
    int32_t eflags;
    int16_t* edi;
    int16_t temp0;
    temp0 = __insd(arg6, arg2, eflags);
    *edi = temp0;
    *(edi - 7);
    arg1 -= 0xb0;
    long double x87_r0 = arg7 + *(arg1 + 0x385b90ef);
    __out_dx_oeax(arg2, arg1, eflags);
    int32_t edx = arg2 | *(arg4 - 0x7f13afb7);
    int32_t esi = arg5 | *(edi + (arg4 << 3));
    void* var_4 = arg1 + 1;
    int32_t var_8 = arg3 - 1;
    int32_t var_c = edx;
    char* ebx;
    char* var_10 = ebx;
    int32_t* var_14 = &var_10;
    int32_t var_18 = arg4;
    int32_t var_1c = esi;
    int16_t* var_20 = edi;
    int16_t** esp_1 = &var_20;
    int16_t* esi_1 = esi | *(arg3 - 0x12);
    int32_t eflags_1 = __sti(eflags);
    *edi = *esi_1;
    void* edi_1 = edi + 1;
    void* esi_2 = esi_1 + 1;
    x87_r0 - *(arg1 + 1);
    void* eax;
    eax = __in_al_dx(edx, eflags_1);
    *ebx |= 0xb0;
    __out_dx_oeax(edx, eax, eflags_1);
    *ebx = (arg3 - 1);
    *eax[1] += *(arg3 - 1)[1];
    char temp1 = *ebx;
    *ebx |= 0xb1;
    char* ecx = arg3 - 2;
    
    if (temp1 | 0xb1 && !ecx)
    {
        char* fsbase;
        *(fsbase + ecx) &= 0xc2;
        edi_1 += 1;
        *ecx &= 0x20;
        eax ^= 0x80;
        *(esi_2 + eax - 0x80) &= edx;
        goto label_1bc47;
    }
    
    while (true)
    {
        eflags_1 = __sti(eflags_1);
        char temp0_7 = *eax[1];
        *eax[1] = ebx;
        ebx = temp0_7;
        *eax[1] = *eax[1] + *ecx[1];
        *ebx |= 0xb0;
        __out_dx_oeax(edx, eax, eflags_1);
        *eax[1] += *ecx[1];
        char temp2_1 = *ebx | 0x93;
        *ebx = temp2_1;
        
        if (temp2_1 && ecx == 1)
        {
            int32_t eflags_4;
            char temp0_8;
            temp0_8 = __das(eax, eflags_1);
            eax = temp0_8;
            /* unimplemented  {fild st0, dword [eax+0x386b90ef]} */
            __out_dx_oeax(edx, ecx - 1, eflags_4);
            int32_t ebp = arg4 | *0x80ec5049;
            int32_t esi_5 = esi_2 | *(edi_1 + (ebp << 3));
            *(esp_1 - 4) = ecx;
            *(esp_1 - 8) = eax;
            *(esp_1 - 0xc) = edx;
            *(esp_1 - 0x10) = ebx;
            *(esp_1 - 0x14) = esp_1 - 0x10;
            *(esp_1 - 0x18) = ebp;
            *(esp_1 - 0x1c) = esi_5;
            *(esp_1 - 0x20) = edi_1;
            int32_t* esi_6 = esi_5 | *(eax - 0x11);
            int32_t eflags_5 = __sti(eflags_4);
            int32_t eax_6;
            *eax_6[1] = *ecx[1] + *eax[1];
            *ebx |= 0xb0;
            __out_dx_oeax(edx, eax_6, eflags_5);
            void* eax_7;
            int32_t ecx_4;
            int32_t edx_1;
            eax_7 = 0x80edbcf8();
            *esi_6;
            *esi_6;
            *eax_7[1] = *eax_7[1] + *(ecx_4 - 1)[1];
            *ebx |= 0x3d;
            __out_dx_oeax(edx_1, eax_7, eflags_5);
            *(eax_7 - 0x3ef46f10);
            int32_t edx_2 = edx_1 | *(eax_7 - 0x3ef46f10);
            ebx = 0x21;
            void* eax_8;
            *eax_8[1] = *(eax_7 + 1)[1] + *(ecx_4 - 2)[1];
            *ebx |= 0x3d;
            __out_dx_oeax(edx_2, eax_8, eflags_5);
            void* edx_3 = edx_2 | *(eax_8 - 0x3ff46f10);
            ebx = 0x7f;
            void* eax_9;
            eax_9 = (eax_8 + 1) * *(edx_3 + (edi_1 << 3) + 0x1e);
            eax_9 += 0x43;
            eax_9 = edx_3;
            __int1();
            *(edx_3 + 0x6a) = *ebx[1];
            /* jump -> *(edi_1 + 0x1a2180e1) */
        }
        
        label_1bc47:
        *(eax + 0x54218037) &= edi_1;
        *(ebx + edi_1) &= 0xcc;
        *(eax - 0x7fff25df) += eax;
        *(edi_1 - 0x14) &= arg4;
        *esp_1;
        int16_t* ecx_1;
        *ecx_1[1] = 0x6b;
        *ecx_1[1] = 0x6c;
        void* eax_1;
        eax_1 = esp_1[1] ^ 0x80;
        *(eax_1 - 0x42de7fe9) &= arg4;
        int32_t eflags_2;
        char temp0_2;
        char temp1_1;
        temp0_2 = __aas(eax_1, *eax_1[1], eflags_1);
        eax_1 = temp0_2;
        *eax_1[1] = temp1_1;
        *ecx_1 &= 0xb0;
        *ecx_1 &= 0xc4;
        *(eax_1 - 0x6ed37fdf) += eax_1;
        int16_t top = top - 1;
        /* unimplemented  {fild st0, dword [eax+0x385b90ef]} */
        __out_dx_oeax(edx, eax_1, eflags_2);
        esp_1[1] = (eax_1 + 1) | *(eax_1 + 0x4a);
        int32_t eax_3;
        eax_3 = __in_al_dx(edx, eflags_2);
        *ebx |= 0x34;
        __out_dx_oeax(edx, eax_3, eflags_2);
        *esp_1 = eax_3;
        *(esp_1 - 4) = ecx_1;
        *(esp_1 - 8) = edx;
        *(esp_1 - 0xc) = ebx;
        *(esp_1 - 0x10) = esp_1 - 0xc;
        *(esp_1 - 0x14) = arg4;
        *(esp_1 - 0x18) = esi_2;
        *(esp_1 - 0x1c) = edi_1;
        int32_t esi_3 = esi_2 | *(ecx_1 - 0x11);
        int32_t eflags_3 = __sti(eflags_2);
        *eax_3[1] = *eax_3[1] + 0x6c;
        *ebx |= 0xb0;
        __out_dx_oeax(edx, eax_3, eflags_3);
        /* unimplemented  {enter sub_0+0xb, 0xec} */
        *ebx |= 0x80;
        char temp0_4;
        temp0_4 = __das(eax_3, eflags_3);
        eax_3 = temp0_4;
        int16_t temp0_5 = edx;
        edx = eax_3;
        void* eax_4 = temp0_5;
        /* unimplemented  {fadd qword [eax+0x386b90ef]} */
        __out_dx_oeax(edx, eax_4, eflags_1);
        int32_t esi_4 = esi_3 | *edi_1;
        ecx = ecx_1 - 1;
        *(esp_1 - 0x20) = eax_4 + 1;
        eax = __in_al_dx(edx, eflags_1);
        *ebx |= 0x34;
        __out_dx_oeax(edx, eax, eflags_1);
        *(esp_1 - 0x24) = eax;
        *(esp_1 - 0x28) = ecx;
        *(esp_1 - 0x2c) = edx;
        *(esp_1 - 0x30) = ebx;
        *(esp_1 - 0x34) = esp_1 - 0x30;
        *(esp_1 - 0x38) = arg4;
        *(esp_1 - 0x3c) = esi_4;
        *(esp_1 - 0x40) = edi_1;
        esp_1 -= 0x40;
        *(ecx - 0x11);
        esi_2 = esi_4 | *(ecx - 0x11);
    }
}

int32_t __convention("fastcall") sub_1c2fd(char* arg1, int32_t arg2 @ edi)
{
    *arg1 &= 0xb0;
    int32_t eax;
    *eax[1] = 0x81;
    *arg1 &= 0x8b;
    *(eax - 0x7cee3c42);
    /* undefined */
}

int32_t __convention("regparm") sub_1c38f(void* arg1, int32_t arg2, void* arg3, long double arg4 @ st0)
{
    *(arg1 + 0x604784b4) |= arg2;
    __fldenv_memmem28(*(*(arg3 - 0x76b75acf) * 0xa4430869 + 0x60698049));
    int32_t edi = *0x983f180;
    int32_t esi = *0x983f184;
    void* ebp = *0x983f188;
    *0x983f190;
    *0x69a02068;
    void* eax;
    void* ecx_1;
    eax = 0x86b4d1b();
    *(eax - 0x5f967eb7) = arg4;
    void* ebx_1;
    ebx_1 = 0xa0;
    *(*(ecx_1 + 0x62) * 0xf91069a0);
    void* esi_1 = *(esi * 9 - 0x13) * 0x787da0fe;
    int32_t* eax_2;
    eax_2 = 0x80;
    int32_t temp0 = *(eax_2 - 0x7f961f8b) & 0x983f1a0;
    *(eax_2 - 0x7f961f8b) = temp0;
    
    if (temp0 >= 0)
    {
        *(esi_1 - 0x7e875f30) -= ebp;
        *(ebx_1 - 0x7ffc3d30) -= ebp;
        eax_2[esi_1 * 2 - 0x262bf92] &= 0x80;
    }
    else
    {
        eax_2 = 0xe0;
        eax_2 = 0xe0;
        *(eax_2 - 0x77) = 0x411fc001;
        void* ecx_3 = *eax_2 * 0x87d98b43 - 1;
        *(ecx_3 - 0x20) -= 0xe0624169;
        *eax_2;
        *0x983f1a0;
        ebx_1 = 0xe0;
        *eax_2;
        int32_t esi_2 = *(esi_1 * 9 - 0x35) * 0x54bc90fe;
        int16_t es;
        *0x983f19e = es;
        *(ecx_3 + 1) &= 0xf0;
        void* eax_3;
        *eax_3[1] = 0x84;
        eax_3 = *0xc3f18047;
        *(edi - 0x7f);
        eax_3 -= 0xb8;
        *(eax_3 - 0x51d67c87) <<= 1;
        *(eax_3 - 0x54d67e88) <<= 1;
        *(eax_3 - 0x470f7be0);
        *(ebp - 0xa) += esi_2;
    }
    
    /* undefined */
}

void __convention("regparm") sub_1c62f(char* arg1, void* arg2, char* arg3, void* arg4 @ ebp, char* arg5 @ esi, char* arg6 @ edi, long double arg7 @ st0) __noreturn
{
    int32_t* esp = 0x80698049;
    char* ebx;
    bool s;
    
    if (s)
    {
        arg2 -= arg5;
        char temp1_1 = *(arg2 - 0x3f967fb7) >> 1;
        *(arg2 - 0x3f967fb7) = temp1_1;
        
        if (temp1_1 >= 0)
        {
            arg1 = arg1 * arg3[0xaf2183fd];
            goto label_1c675;
        }
        
        arg4 = sub_0;
        label_1c647:
        char temp2_1 = arg6[0x698049] << 1;
        arg6[0x698049] = temp2_1;
        
        if (temp2_1 >= 0)
            goto label_1c679;
        
        arg1 -= arg4;
        arg5[0x90798049] <<= 1;
        ebx = sub_0;
        *(arg4 - 0x4f06efb7) <<= 1;
        *(arg1 - 0x4c2e29d7) = &arg1[*(arg1 - 0x4c2e29d7)];
    }
    
    arg3 -= 1;
    
    while (true)
    {
        arg3[0xffffff83];
        bool d;
        
        if (d)
        {
            *arg6 = *arg5;
            arg6 -= 1;
            arg5 -= 1;
        }
        else
        {
            *arg6 = *arg5;
            arg6 = &arg6[1];
            arg5 = &arg5[1];
        }
        
        *(arg3 - 0x560988b7) <<= 1;
        *arg3 &= 0xffffffaf;
        label_1c675:
        arg1 -= 1;
        arg3[0xffffff81] = *arg2[1];
        label_1c679:
        arg2 &= *arg3;
        *arg3[1] += arg5[0xf6f67149];
        d = true;
        char temp3_1 = *arg3 & 0x90;
        *arg3 = temp3_1;
        arg3 -= 1;
        
        if (!temp3_1 || arg3)
            break;
        
        int32_t esp_1 = *esp;
        *(esp_1 - 4) = arg1;
        arg1 = *arg5;
        *0xab1190f9 = arg1;
        ebx -= 2;
        *0x1f1190f9 = arg1;
        int32_t eflags;
        arg1 = __in_al_dx(arg2, eflags);
        *arg6 = arg1;
        arg4 |= *(ebx + 0xea8148);
        *arg3 += arg1;
        arg1 = __in_al_dx(arg2, eflags);
        *ebx;
        *ebx |= 0xc1;
        uint8_t temp0_3;
        temp0_3 = __insb(arg6 - 4, arg2, eflags);
        *arg6 = temp0_3;
        arg7 = arg7 + *(arg3 + 0x148a021);
        arg5 = 0xa5e1a201;
        void* ecx;
        ecx = (arg3 - 1) ^ *ebx[1];
        
        if (ecx && ecx != 1)
            trap(0xd);
        
        *arg1[1] = *(arg1 - 0x29e4b348)[1] ^ *arg2[1];
        /* unimplemented  {enter 0x857e, 0xdb} */
        *(esp_1 - 4);
        esp = esp_1 - 2;
        arg1 = __in_al_dx(arg2, eflags);
        *0x49a30b = arg1;
        arg1 = __in_al_dx(arg2, eflags);
        char temp5_1 = *ebx | 0x96;
        *ebx = temp5_1;
        arg3 = ecx - 2;
        
        if (temp5_1 && !arg3)
        {
            void* ecx_2;
            ecx_2 = (arg3 - 1) ^ *ebx[1];
            
            if (ecx_2 && ecx_2 != 1)
                *arg1 = -(*arg1);
            else
                *ebx[1] <<= 0x18;
            
            *arg1 += (ecx_2 - 1);
            *esp;
            arg1 = __in_al_dx(arg2, eflags);
            char* ebx_3 = &ebx[1] | *((ecx_2 - 1) * 3 + 0xb80ec00);
            int32_t eax = arg1;
            void* ecx_5;
            ecx_5 = (esp + 1) ^ *ebx_3[1];
            
            if (ecx_5 && ecx_5 != 1)
                __out_dx_oeax(arg2, eax, eflags);
            else
                *ebx_3[1] -= 0x90;
            
            *eax;
            __out_dx_oeax(arg2, eax, eflags);
            *ebx_3 = RORB(*ebx_3, 0x97);
            *eax[1] += *(ecx_5 - 2)[1];
            *ebx_3 |= 0x81;
            *(eax + ((ecx_5 - 2) << 1) + 0x209070c8) &= ecx_5 - 2;
            *(ecx_5 + 0x7a) = ecx_5 - 2;
            eax = eax * *ebx_3;
            *eax &= 0xf900498f;
            *(ecx_5 - 2) = ~*(ecx_5 - 2);
            *(ecx_5 - 0x82);
            void* eax_1 = *(arg2 - 0x3f06fa0f) * 0x80498220;
            int32_t ebp = *(arg2 - 0xa) * 0xbc90fe65;
            *(ecx_5 - 2) -= 0x38;
            *(esp + 2);
            *(ecx_5 - 2) &= 0xda;
            *(eax_1 - 0x7f992bdf) += eax_1;
            *((ecx_5 - 2) * 3 - 0x80) &= ecx_5 - 2;
            *(eax_1 - 0x5fbe7eef) &= eax_1;
            eax_1 += *(eax_1 - 0x7ffd95df);
            *(eax_1 + 0x34458001) &= eax_1;
            *(ecx_5 - 2) &= 0x80;
            void* eax_3 = eax_1 + 0x42180 + ecx_5 - 2;
            *(eax_3 - 0x767e7fdf);
            eax_3 += *(eax_3 - 0x767e7fdf);
            *(ecx_5 - 0x5e967fb9) = *arg2[1];
            *(ecx_5 - 0x42) = ebp + 1;
            *(eax_3 - 1);
            trap(0xd);
        }
        
        if (temp5_1 <= 0)
            goto label_1c675;
    }
    
    goto label_1c647;
}

int32_t sub_1cef0()
{
    /* undefined */
}

int32_t __thiscall sub_1cfdf(int32_t arg1, void* arg2 @ eax, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8)
{
    *(*(arg1 * 5 - 0x3d) * 0xffffffeb);
    void* ebx;
    *(ebx - 0x35);
    *(ebx - 0x35) &= 0x4a;
    *(ebx - 0x7e) = *(ebx - 0x7e) - arg2;
    int32_t ebx_1 = RORD(ebx, 1);
    bool c = /* bool c = unimplemented  {ror ebx, sub_0+1} */;
    *(ebx_1 - 0x5a) = *(ebx_1 - 0x5a) - arg2;
    *(ebx_1 - 0x3f0e5c95) = ROLB(*(ebx_1 - 0x3f0e5c95), 1);
    arg2 += *(ebx_1 + 0x146b8363);
    *(arg2 - 0x7d) &= 0x6b;
    *0x830288f1 = arg2;
    int32_t eflags;
    int16_t temp0;
    temp0 = __arpl_memw_gpr16(*(arg2 - 0x5c776b95), arg2);
    *(arg2 - 0x5c776b95) = temp0;
    *(arg2 - 0x3d) &= 0x69;
    *0xc37200f5 = arg2;
    return arg8;
}

int32_t __stdcall sub_1d021(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6) __pure
{
    return arg6;
}

void __convention("regparm") sub_1d02b(int32_t* arg1, void* arg2, int32_t arg3, int32_t arg4 @ ebp, int32_t arg5 @ esi, char* arg6 @ edi)
{
    void* ebx;
    int32_t* esp_3 = *(ebx - 0x3c9d7f0b) * 0x1469c361;
    ebx = arg1;
    bool z;
    
    if (z || arg3 != 1)
    {
        *esp_3;
        esp_3[1];
        esp_3[2];
        esp_3[4];
        esp_3[5];
        esp_3[6];
        esp_3[7];
        return;
    }
    
    uint32_t ecx_1 = arg3 - 2;
    
    if (!z && !ecx_1)
    {
        int32_t edi = *esp_3;
        int32_t esi = esp_3[1];
        int32_t ebp = esp_3[2];
        void* ebx_1 = esp_3[4];
        void* edx = esp_3[5];
        int32_t ecx_2 = esp_3[6];
        int32_t eax = esp_3[7];
        int32_t eflags;
        __out_immb_oeax(0xe1, eax, eflags);
        *(ebx_1 - 0x5d) -= 0xfffffff5;
        *(edx - 0x7d) += *edx[1];
        int32_t eflags_1;
        int16_t temp0;
        temp0 = __arpl_memw_gpr16(*(ebx_1 + 0x68), eax);
        *(ebx_1 + 0x68) = temp0;
        *0x430283f1 = eax;
        esp_3[7] = eax;
        esp_3[6] = ecx_2;
        esp_3[5] = edx;
        esp_3[4] = ebx_1;
        esp_3[3] = &esp_3[4];
        esp_3[2] = ebp;
        esp_3[1] = esi;
        *esp_3 = edi;
        *(ebx_1 - 0x6c) -= 0x69;
        return;
    }
    
    int32_t temp1 = *(ebx - 0x7d) & 0x6b;
    *(ebx - 0x7d) = temp1;
    bool cond:1 = !temp1;
    *0x830200f1 = arg1;
    int32_t eflags_3;
    int16_t temp0_3;
    temp0_3 = __arpl_memw_gpr16(*(ebx - 0x3c776b95), arg1);
    *(ebx - 0x3c776b95) = temp0_3;
    int32_t eflags_2;
    uint16_t temp0_2;
    temp0_2 = __arpl_gpr16_gpr16(ebx, arg1);
    ebx = temp0_2;
    
    while (true)
    {
        *(ebx - 0x3c9e3cbe) = *arg1[1];
        *(ebx + 0x2b61c342) = *arg1[1];
        
        if (!cond:1 && ecx_1 == 1)
        {
            *(arg1 - 0x5d);
            *(arg2 + 3) <<= 0x60;
            *(ebx - 0x6c) -= 0x69;
            return;
        }
        
        *arg1 -= 0xfffffffc;
        char temp2_1 = *arg6 >> 1;
        *arg6 = temp2_1;
        int32_t ecx_5 = ecx_1 - 2;
        
        if (!temp2_1 || ecx_5)
            break;
        
        int32_t esp_4 = *(ebx - 0x7cfd7e0f) * 0x63;
        arg4 += *(arg1 - 0x5d);
        __int1();
        *arg2 += 3;
        *(esp_4 - 4) = arg1;
        *(esp_4 - 8) = ecx_5;
        *(esp_4 - 0xc) = arg2;
        *(esp_4 - 0x10) = ebx;
        *(esp_4 - 0x14) = esp_4 - 0x10;
        *(esp_4 - 0x18) = arg4;
        *(esp_4 - 0x1c) = arg5;
        *(esp_4 - 0x20) = arg6;
        *(ebx - 0x6c) -= 0x69;
        *0x83638342 = arg1;
        int32_t esp_6 = *(ebx - 0x7cfd7d0f) * 0x63;
        int32_t temp5_1 = *(ebx + 0x54);
        *(ebx + 0x54) -= 0xffffff89;
        *0xea638342 = arg1;
        *(ebx - 0x7e) = *(ebx - 0x7e) - arg1;
        ecx_1 = ecx_5 >> 1;
        arg2 -= 2;
        *(ebx - 0x61) = *(ebx - 0x61) - arg1;
        *(ebx - 0x7b0e5c95) = ROLB(*(ebx - 0x7b0e5c95), 1);
        arg1 += *(ebx + 0x146b8363);
        *(ebx - 0x7c9c7cbe) = esp_6;
        *(ebx - 0x7cfd770f);
        int32_t temp7_1 = *(ebx - 0x6c);
        *(ebx - 0x6c) -= 0xffffff88;
        cond:1 = temp7_1 == 0xffffff88;
        *0xc3638342 = arg1;
    }
    
    *(arg2 - 0x52436f8f);
    int32_t eax_1;
    int32_t ecx_4;
    void* edx_1;
    eax_1 = 0x47880f48();
    *ecx_4[1] = 0x69;
    *(edx_1 - 0x60) |= 0xa6f66b47;
    /* undefined */
}

int32_t* __convention("regparm") sub_1d039(int32_t* arg1, void* arg2, void* arg3, int32_t arg4 @ ebp, int32_t arg5 @ esi, char* arg6 @ edi, int32_t arg7, int32_t arg8, void* arg9, void* arg10, int32_t arg11, int32_t arg12)
{
    char temp1 = arg1;
    arg1 += *(arg3 - 0x171e7d1f);
    void* ecx = arg3 - 1;
    
    if (temp1 != -(*(arg3 - 0x171e7d1f)) && !ecx)
    {
        void* ebx_1 = arg9;
        int32_t eax = arg12;
        int32_t eflags;
        __out_immb_oeax(0xe1, eax, eflags);
        *(ebx_1 - 0x5d) -= 0xfffffff5;
        *(arg10 - 0x7d) += *arg10[1];
        int32_t eflags_1;
        int16_t temp0;
        temp0 = __arpl_memw_gpr16(*(ebx_1 + 0x68), eax);
        *(ebx_1 + 0x68) = temp0;
        *0x430283f1 = eax;
        arg12 = eax;
        arg9 = ebx_1;
        void** arg_c = &arg9;
        *(ebx_1 - 0x6c) -= 0x69;
        return eax;
    }
    
    void* ebx;
    int32_t temp3 = *(ebx - 0x7d) & 0x6b;
    *(ebx - 0x7d) = temp3;
    bool cond:2 = !temp3;
    *0x830200f1 = arg1;
    int32_t eflags_3;
    int16_t temp0_3;
    temp0_3 = __arpl_memw_gpr16(*(ebx - 0x3c776b95), arg1);
    *(ebx - 0x3c776b95) = temp0_3;
    int32_t eflags_2;
    uint16_t temp0_2;
    temp0_2 = __arpl_gpr16_gpr16(ebx, arg1);
    ebx = temp0_2;
    
    while (true)
    {
        *(ebx - 0x3c9e3cbe) = *arg1[1];
        *(ebx + 0x2b61c342) = *arg1[1];
        
        if (!cond:2 && ecx == 1)
        {
            *(arg1 - 0x5d);
            *(arg2 + 3) <<= 0x60;
            *(ebx - 0x6c) -= 0x69;
            return arg1;
        }
        
        *arg1 -= 0xfffffffc;
        char temp4_1 = *arg6 >> 1;
        *arg6 = temp4_1;
        void* ecx_4 = ecx - 2;
        
        if (!temp4_1 || ecx_4)
            break;
        
        int32_t esp_1 = *(ebx - 0x7cfd7e0f) * 0x63;
        arg4 += *(arg1 - 0x5d);
        __int1();
        *arg2 += 3;
        *(esp_1 - 4) = arg1;
        *(esp_1 - 8) = ecx_4;
        *(esp_1 - 0xc) = arg2;
        *(esp_1 - 0x10) = ebx;
        *(esp_1 - 0x14) = esp_1 - 0x10;
        *(esp_1 - 0x18) = arg4;
        *(esp_1 - 0x1c) = arg5;
        *(esp_1 - 0x20) = arg6;
        *(ebx - 0x6c) -= 0x69;
        *0x83638342 = arg1;
        int32_t esp_3 = *(ebx - 0x7cfd7d0f) * 0x63;
        int32_t temp7_1 = *(ebx + 0x54);
        *(ebx + 0x54) -= 0xffffff89;
        *0xea638342 = arg1;
        *(ebx - 0x7e) = *(ebx - 0x7e) - arg1;
        ecx = ecx_4 >> 1;
        arg2 -= 2;
        *(ebx - 0x61) = *(ebx - 0x61) - arg1;
        *(ebx - 0x7b0e5c95) = ROLB(*(ebx - 0x7b0e5c95), 1);
        arg1 += *(ebx + 0x146b8363);
        *(ebx - 0x7c9c7cbe) = esp_3;
        *(ebx - 0x7cfd770f);
        int32_t temp9_1 = *(ebx - 0x6c);
        *(ebx - 0x6c) -= 0xffffff88;
        cond:2 = temp9_1 == 0xffffff88;
        *0xc3638342 = arg1;
    }
    
    *(arg2 - 0x52436f8f);
    int32_t eax_1;
    int32_t ecx_3;
    void* edx_1;
    eax_1 = 0x47880f48();
    *ecx_3[1] = 0x69;
    *(edx_1 - 0x60) |= 0xa6f66b47;
    /* undefined */
}

int32_t __stdcall j_sub_1cfdf(int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8)
{
    void* arg2;
    int32_t arg1;
    /* tailcall */
    return sub_1cfdf(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}

int32_t __convention("regparm") sub_1d05b(char arg1, void* arg2)
{
    void* ebx;
    *(ebx - 0x5c947c9d);
    arg1 &= *(ebx - 0x5c947c9d);
    *(arg2 - 0x7d) ^= 0x63;
    *(ebx + 0x54) -= 0xffffff89;
    return arg1;
}

int32_t __convention("regparm") sub_1d073(int32_t* arg1, int32_t arg2, int32_t arg3)
{
    char temp0 = arg3;
    bool c;
    arg3 = temp0 - 0x57;
    void* ebx;
    *(ebx - 0x5c) = *(ebx - 0x5c) - arg1;
    *(ebx + 0xf5a36c) = ROLB(*(ebx + 0xf5a36c), 1);
    __bound_gprv_mema32(arg1, *(ebx + 0x146b8364));
    void* edx_1 = *(&arg1[arg3] + 0x1284ebc3) * 0xffffff83;
    int32_t eflags;
    char temp0_1;
    temp0_1 = __arpl_gpr16_gpr16(arg1, arg1);
    uint16_t ebx_1;
    ebx_1 = arg1;
    int32_t ebp;
    int32_t esi;
    char* edi;
    /* tailcall */
    return sub_1d02b(arg1, edx_1, arg3, ebp, esi, edi);
}

int32_t __convention("regparm") sub_1d08b(char arg1, void* arg2)
{
    void* ebx;
    *(ebx - 0x5c947c9d);
    arg1 &= *(ebx - 0x5c947c9d);
    *(arg2 - 0x7d) &= 0x63;
    *(ebx - 0x6c) -= 0xffffff88;
    return arg1;
}

int32_t __stdcall j_sub_1d021(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6)
{
    /* tailcall */
    return sub_1d021(arg1, arg2, arg3, arg4, arg5, arg6);
}

int32_t __convention("fastcall") sub_1d09d(int32_t arg1, void* arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8)
{
    void* ebx;
    *(ebx - 0x5c963c9d);
    *(arg2 - 0x3d) += arg2;
    return arg8;
}

int32_t __stdcall sub_1d0a9(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6) __pure
{
    return arg6;
}

int32_t __convention("regparm") sub_1d0dd(char arg1, void* arg2)
{
    void* ebx;
    *(ebx - 0x5c947c9d);
    arg1 ^= *(ebx - 0x5c947c9d);
    *(arg2 - 0x7d) = *(arg2 - 0x7d) + 0x63;
    *(ebx + 0x54) -= 0xffffff89;
    return arg1;
}

int32_t __convention("regparm") j_sub_1d073(int32_t* arg1, int32_t arg2, int32_t arg3)
{
    /* tailcall */
    return sub_1d073(arg1, arg2, arg3);
}

int32_t __convention("regparm") sub_1d0ef(int32_t* arg1, int32_t arg2, int32_t arg3, void* arg4 @ ebp, int32_t arg5 @ edi)
{
    void* ebx;
    *(ebx + 0x184a8963);
    arg1 ^= *(ebx + 0x184a8963);
    char temp4 = arg3;
    arg3 = temp4 - 0x78;
    *(ebx - 0x77) = *(ebx - 0x77) - arg1;
    void* ebx_1;
    ebx_1 = ROLB((ebx + 1), 1);
    bool cond:0 = !ebx_1;
    int32_t esp_1 = *(ebx_1 - 0x3cbdff0b) * 0xd469c361;
    ebx_1 = arg1;
    
    if (cond:0 || arg3 != 1)
    {
        __bound_gprv_mema32(arg1, *(ebx_1 - 0x6b947c9d));
        ebx_1 = arg1;
        /* tailcall */
        return j_sub_1d021();
    }
    
    int32_t esi = 0xbc90be80;
    *0x35804181 -= 0x81;
    int32_t ecx_2;
    ecx_2 = 0xb0;
    *arg1 -= 0x2882d18c;
    int32_t* ebx_2 = arg1;
    int32_t temp5 = ROLD(ebx_2[-0x19cbd776], 1);
    ebx_2[-0x19cbd776] = temp5;
    
    if (!temp5 || ecx_2 != 1)
        /* undefined */
    
    *(esp_1 - 4) = 0x2f0f1a3;
    int32_t esp_3 = esp_1 - 4 + *(ebx_1 + 3);
    *(esp_3 - 4) = 0x60034293;
    int32_t* eax_1;
    void* ecx_4;
    void* edx_1;
    eax_1 = 0xa369d526();
    char* edx_2 = edx_1 + 1;
    int32_t esp_5 = esp_3 - 4 + *(eax_1 + 3);
    *(esp_5 - 4) = 0x2282ebc3;
    int32_t esp_7 = esp_5 - 4 + *(eax_1 - 0x6f);
    bool cond:3 = esp_5 - 4 == -(*(eax_1 - 0x6f));
    
    while (true)
    {
        void* ecx_6 = ecx_4 - 1;
        
        if (cond:3 || ecx_6)
            goto label_1d196;
        
        *(esp_7 - 4) = 0x2f0f1a3;
        *(esp_7 - 8) = eax_1;
        *(esp_7 - 0xc) = ecx_6;
        *(esp_7 - 0x10) = edx_2;
        *(esp_7 - 0x14) = ebx_2 + 1;
        *(esp_7 - 0x18) = esp_7 - 0x14;
        *(esp_7 - 0x1c) = arg4;
        *(esp_7 - 0x20) = esi;
        *(esp_7 - 0x24) = arg5;
        *(esp_7 - 0x28) = 0x60434293;
        int32_t esp_11 = esp_7 - 0x28;
        *(esp_11 - 4) = 0x4260f5a3;
        *(esp_11 - 8) = eax_1;
        *(esp_11 - 0xc) = esp_11;
        *(esp_11 - 0x10) = edx_2;
        *(esp_11 - 0x14) = &ebx_2[1];
        *(esp_11 - 0x18) = esp_11 - 0x14;
        *(esp_11 - 0x1c) = arg4;
        *(esp_11 - 0x20) = esi;
        *(esp_11 - 0x24) = arg5;
        *(esp_11 - 0x28) = 0x2282ebc3;
        ebx_2 += 6;
        *(esp_11 - 0x2c) = eax_1;
        *(esp_11 - 0x30) = esp_11;
        *(esp_11 - 0x34) = edx_2;
        *(esp_11 - 0x38) = ebx_2;
        *(esp_11 - 0x3c) = esp_11 - 0x38;
        *(esp_11 - 0x40) = arg4;
        *(esp_11 - 0x44) = esi;
        *(esp_11 - 0x48) = arg5;
        esp_7 = esp_11 - 0x48;
        int32_t ecx_5;
        ecx_5 = esp_11 & 0x80;
        esi = 0x46f0be80;
        ecx_5 = 0xb0;
        *eax_1 -= 0x2882d186;
        ecx_5 = edx_2;
        edx_2 = 0xb0;
        *eax_1 -= 0xffffff88;
        char temp9_1 = ROLB(*(arg4 - 0x799d3d1f), 1);
        *(arg4 - 0x799d3d1f) = temp9_1;
        ecx_6 = ecx_5 - 1;
        
        if (!temp9_1 || ecx_6)
        {
            if (!temp9_1 || ecx_6 != 1)
            {
                __int1();
                *edx_2 = eax_1;
                *(esp_7 - 4) = eax_1;
                *(esp_7 - 8) = ecx_6 - 1;
                *(esp_7 - 0xc) = edx_2;
                *(esp_7 - 0x10) = ebx_2 + 1;
                *(esp_7 - 0x14) = esp_7 - 0x10;
                *(esp_7 - 0x18) = arg4;
                *(esp_7 - 0x1c) = 0x46f0be80;
                *(esp_7 - 0x20) = arg5;
                *(esp_7 - 0x24) = 0x60434293;
                *(esp_7 - 0x28) = 0x6280f5a3;
                *(esp_7 - 0x2c) = eax_1;
                *(esp_7 - 0x30) = esp_7 - 0x24;
                *(esp_7 - 0x34) = edx_2;
                *(esp_7 - 0x38) = &ebx_2[1];
                *(esp_7 - 0x3c) = esp_7 - 0x38;
                *(esp_7 - 0x40) = arg4;
                *(esp_7 - 0x44) = 0x46f0be80;
                *(esp_7 - 0x48) = arg5;
                *(esp_7 - 0x4c) = 0x2282ebc3;
                *(esp_7 - 0x50) = eax_1;
                *(esp_7 - 0x54) = esp_7 - 0x24;
                *(esp_7 - 0x58) = edx_2;
                *(esp_7 - 0x5c) = ebx_2 + 6;
                *(esp_7 - 0x60) = esp_7 - 0x5c;
                *(esp_7 - 0x64) = arg4;
                *(esp_7 - 0x68) = 0x46f0be80;
                *(esp_7 - 0x6c) = arg5;
                char* ecx_11;
                ecx_11 = (esp_7 - 0x24) & 0x80;
                char temp12 = *ecx_11;
                *ecx_11 -= 0x70;
                *eax_1[1] = 0x84;
                void* ebx_13;
                ebx_13 = 0x48;
                
                if (arg5 == 0xffffffff || ecx_11 == 1)
                {
                    eax_1 |= 0x43;
                    /* undefined */
                }
                
                eax_1 = RLCB(eax_1, (ecx_11 - 1), temp12 >= 0x70);
                int32_t eflags;
                *__outsb(edx_2, *0x46f0be80, 0x46f0be80, eflags);
                
                if (eax_1 && ecx_11 == 2)
                    trap(0xd);
                
                void* edi_1 = *(esp_7 - 0x6c);
                char* esi_4 = *(esp_7 - 0x68);
                *(esp_7 - 0x64);
                int16_t ebx_14 = *(esp_7 - 0x5c);
                int32_t* edx_3 = *(esp_7 - 0x58);
                char* ecx_14 = *(esp_7 - 0x54);
                void* esp_26 = esp_7 - 0x4c;
                
                if (eax_1 >= 0)
                {
                    int32_t* eax_4 = *(esp_7 - 0x50) & 0xc0e1b6fe;
                    label_1d25d:
                    *(ecx_14 + 0x78) -= 0x3f01cf0a;
                    
                    while (true)
                    {
                        int32_t temp16_1 = *(ecx_14 + 0x78);
                        *(ecx_14 + 0x78) -= 0x5201e30a;
                        
                        if (temp16_1 == 0x5201e30a || ecx_14 != 1)
                        {
                            *eax_4 <<= 1;
                            trap(0xd);
                        }
                        
                        ecx_14[0x77] -= 0xa;
                        char temp0_3;
                        temp0_3 = __daa(eax_4, eflags);
                        eax_4 = temp0_3;
                        eax_4 += 1;
                        char temp17_1 = ecx_14[0x77];
                        ecx_14[0x77] -= 0xa;
                        char* edi_2 = edi_1 + esi_4;
                        bool cond:12_1 = edi_2 < 0;
                        bool cond:13_1 = edi_2 < 0;
                        *edi_2 = *esi_4;
                        edi_1 = &edi_2[1];
                        esi_4 = &esi_4[1];
                        ecx_14 -= 2;
                        
                        if (!edi_2 || ecx_14)
                        {
                            while (true)
                            {
                                *ecx_14;
                                
                                if (!cond:12_1)
                                    break;
                                
                                if (cond:13_1)
                                {
                                    /* unimplemented  {enter 0xbed0, 0xe1} */
                                    ebx_14 <<= 0x8b;
                                    *(eax_4 - 0xa) ^= edi_1;
                                }
                                
                                edx_3 += 1;
                                char temp19_1 = eax_4;
                                eax_4 += 1;
                                cond:12_1 = temp19_1 + 1 < 0;
                                cond:13_1 = temp19_1 + 1 < 0;
                            }
                            
                            break;
                        }
                        
                        *(ecx_14 + 0x78) -= 0xa;
                        int16_t ds;
                        *(esp_26 - 4) = ds;
                        esp_26 -= 4;
                        eax_4 += 1;
                        *(ecx_14 + 0x78) -= 0xa;
                        label_1d28e:
                        char temp18_1 = *ebx_14[1];
                        *ebx_14[1] |= *edx_3[1];
                        ecx_14 -= 1;
                        
                        if (!(temp18_1 | *edx_3[1]) || ecx_14)
                        {
                            ecx_14[0x78] += *eax_4[1];
                            eax_4 = eax_4 * *0xc0e1b6fe;
                            goto label_1d25d;
                        }
                        
                        ecx_14[0x78];
                        bool c_5 = false;
                        *0x84f3c0fe = ~*0x84f3c0fe;
                        
                        while (true)
                        {
                            char* temp21_1 = ecx_14;
                            ecx_14 = &ecx_14[1];
                            
                            if (&temp21_1[1] >= 0)
                            {
                                char* temp22_1 = esi_4;
                                esi_4 += edi_1;
                                int32_t* temp0_4 = edx_3;
                                edx_3 = eax_4;
                                eax_4 = temp0_4;
                                ecx_14 -= 1;
                                
                                if (temp22_1 == -(edi_1) || ecx_14)
                                    break;
                                
                                *(ecx_14 + 0x78);
                                esi_4[edi_1 << 3];
                                *(ecx_14 + 0x78);
                                char temp1 = eax_4 % eax_4;
                                eax_4 = eax_4 / eax_4;
                                *eax_4[1] = temp1;
                                ecx_14[0x8df3c0e1] -= 1;
                                *(eax_4 - 0xa) ^= edi_1;
                                *(eax_4 - 0xa);
                                *(eax_4 - 0xa) ^= edi_1 + esi_4;
                                __out_dx_oeax(edx_3, eax_4, eflags);
                                *(eax_4 - 0x7f417f1f) += 1;
                                *ecx_14 = *ecx_14 - 0x80;
                                *eax_4 += 0x46f06181;
                                *(ecx_14 - 0x3e) -= 0x810081f1;
                                *esp_26;
                                *(esp_26 + 4);
                                *(esp_26 + 8);
                                *(esp_26 + 0x10);
                                *(esp_26 + 0x14);
                                *(esp_26 + 0x18);
                                *(esp_26 + 0x1c);
                                /* undefined */
                            }
                            
                            if (&temp21_1[1] < 0)
                                goto label_1d28e;
                            
                            int32_t* temp23_1 = eax_4;
                            eax_4 = temp23_1 - 0x7b0c3f02;
                            c_5 = temp23_1 - 0x7b0c3f02 < temp23_1
                                || (c_5 && temp23_1 - 0x7b0c3f02 == temp23_1);
                        }
                    }
                }
                else if (eax_1 >= 0)
                    /* undefined */
                
                /* undefined */
            }
            
            __bound_gprv_mema32(eax_1, *(edx_2 - 0x7f9a7d1f));
            
            if (!temp9_1 || ecx_6 != 2)
            {
                *0xb0b14181 ^= 0x81;
                *(ecx_6 - 1 + (edx_2 << 3) - 0x2e6cd77e) -= (ecx_6 - 1);
                int32_t temp14 = *eax_1;
                *eax_1 -= 0xffffffa2;
                *(eax_1 - 0x5c97fc1f) = RRCB(*(eax_1 - 0x5c97fc1f), 1, temp14 < 0xffffffa2);
                __int1();
                /* undefined */
            }
            
            esi = 0x46f0be80;
            void* ecx_8;
            ecx_8 = 0xb0;
            *eax_1 -= 0x2882d18c;
            int32_t* temp0_2 = ebx_2;
            ebx_2 = eax_1;
            eax_1 = temp0_2;
            int32_t temp15_1 = ROLD(ebx_2[-0x19cbd776], 1);
            ebx_2[-0x19cbd776] = temp15_1;
            
            if (!temp15_1 || ecx_8 != 1)
                *edx_2 = eax_1;
            else
            {
                *(esp_7 - 4) = 0x288f1a3;
                esp_7 -= 4;
            }
        }
        else
        {
            __bound_gprv_mema32(eax_1, *(ecx_6 - 0x1e7d9dbe));
            label_1d196:
            *(arg4 - 0x80) &= 0xe1;
            *(esi + 0x46f0be80);
            eax_1 = 0x81;
            *(ecx_6 + (edx_2 << 3) - 0x2e6cd77e) -= ecx_6;
            int32_t temp8_1 = *eax_1;
            *eax_1 -= 0xffffffa2;
            *(eax_1 - 0x5c97fc1f) = RRCB(*(eax_1 - 0x5c97fc1f), 1, temp8_1 < 0xffffffa2);
            __int1();
            *edx_2 = eax_1;
        }
        
        int32_t esp_16 = esp_7 + *(eax_1 + 3);
        *(esp_16 - 4) = 0x60034293;
        void* eax_2;
        int32_t* ecx_10;
        eax_2 = 0xa369d5a6();
        __bound_gprv_mema32(eax_2, *ebx_2);
        *(esp_16 - 8) = eax_2;
        *(esp_16 - 0xc) = ecx_10;
        *(esp_16 - 0x10) = edx_2;
        *(esp_16 - 0x14) = ebx_2;
        *(esp_16 - 0x18) = esp_16 - 0x14;
        *(esp_16 - 0x1c) = arg4;
        *(esp_16 - 0x20) = esi;
        *(esp_16 - 0x24) = arg5;
        void* temp10_1 = arg4;
        arg4 += *(eax_2 - 0x3d);
        cond:3 = temp10_1 == -(*(eax_2 - 0x3d));
        *(esp_16 - 0x28) = eax_2;
        *(esp_16 - 0x2c) = ecx_10;
        *(esp_16 - 0x30) = edx_2;
        *(esp_16 - 0x34) = ebx_2;
        *(esp_16 - 0x38) = esp_16 - 0x34;
        *(esp_16 - 0x3c) = arg4;
        *(esp_16 - 0x40) = esi;
        *(esp_16 - 0x44) = arg5;
        esp_7 = esp_16 - 0x44;
        ecx_4 = eax_2;
        eax_1 = ecx_10;
    }
}

int32_t sub_1d10d(void* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t* arg5)
{
    void* ebp = arg1;
    int32_t* eax = arg5;
    int32_t ecx;
    ecx = arg4 & 0x80;
    int32_t esi = 0xbc90be80;
    *0x35804181 -= 0x81;
    int32_t ecx_2;
    ecx_2 = 0xb0;
    *eax -= 0x2882d18c;
    int32_t* ebx_1 = eax;
    int32_t temp2 = ROLD(ebx_1[-0x19cbd776], 1);
    ebx_1[-0x19cbd776] = temp2;
    
    if (!temp2 || ecx_2 != 1)
        /* undefined */
    
    arg5 = 0x2f0f1a3;
    void* esp_1 = &arg5 + *(arg2 + 3);
    *(esp_1 - 4) = 0x60034293;
    int32_t* eax_2;
    void* ecx_4;
    void* edx_1;
    eax_2 = 0xa369d526();
    char* edx_2 = edx_1 + 1;
    void* esp_3 = esp_1 - 4 + *(eax_2 + 3);
    *(esp_3 - 4) = 0x2282ebc3;
    void* esp_5 = esp_3 - 4 + *(eax_2 - 0x6f);
    bool cond:2 = esp_3 - 4 == -(*(eax_2 - 0x6f));
    
    while (true)
    {
        void* ecx_6 = ecx_4 - 1;
        
        if (cond:2 || ecx_6)
            goto label_1d196;
        
        *(esp_5 - 4) = 0x2f0f1a3;
        *(esp_5 - 8) = eax_2;
        *(esp_5 - 0xc) = ecx_6;
        *(esp_5 - 0x10) = edx_2;
        *(esp_5 - 0x14) = ebx_1 + 1;
        *(esp_5 - 0x18) = esp_5 - 0x14;
        *(esp_5 - 0x1c) = ebp;
        *(esp_5 - 0x20) = esi;
        *(esp_5 - 0x24) = __return_addr;
        *(esp_5 - 0x28) = 0x60434293;
        void* esp_9 = esp_5 - 0x28;
        *(esp_9 - 4) = 0x4260f5a3;
        *(esp_9 - 8) = eax_2;
        *(esp_9 - 0xc) = esp_9;
        *(esp_9 - 0x10) = edx_2;
        *(esp_9 - 0x14) = &ebx_1[1];
        *(esp_9 - 0x18) = esp_9 - 0x14;
        *(esp_9 - 0x1c) = ebp;
        *(esp_9 - 0x20) = esi;
        *(esp_9 - 0x24) = __return_addr;
        *(esp_9 - 0x28) = 0x2282ebc3;
        ebx_1 += 6;
        *(esp_9 - 0x2c) = eax_2;
        *(esp_9 - 0x30) = esp_9;
        *(esp_9 - 0x34) = edx_2;
        *(esp_9 - 0x38) = ebx_1;
        *(esp_9 - 0x3c) = esp_9 - 0x38;
        *(esp_9 - 0x40) = ebp;
        *(esp_9 - 0x44) = esi;
        *(esp_9 - 0x48) = __return_addr;
        esp_5 = esp_9 - 0x48;
        void* ecx_5;
        ecx_5 = esp_9 & 0x80;
        esi = 0x46f0be80;
        ecx_5 = 0xb0;
        *eax_2 -= 0x2882d186;
        ecx_5 = edx_2;
        edx_2 = 0xb0;
        *eax_2 -= 0xffffff88;
        char temp6_1 = ROLB(*(ebp - 0x799d3d1f), 1);
        *(ebp - 0x799d3d1f) = temp6_1;
        ecx_6 = ecx_5 - 1;
        
        if (!temp6_1 || ecx_6)
        {
            if (!temp6_1 || ecx_6 != 1)
            {
                __int1();
                *edx_2 = eax_2;
                *(esp_5 - 4) = eax_2;
                *(esp_5 - 8) = ecx_6 - 1;
                *(esp_5 - 0xc) = edx_2;
                *(esp_5 - 0x10) = ebx_1 + 1;
                *(esp_5 - 0x14) = esp_5 - 0x10;
                *(esp_5 - 0x18) = ebp;
                *(esp_5 - 0x1c) = 0x46f0be80;
                *(esp_5 - 0x20) = __return_addr;
                *(esp_5 - 0x24) = 0x60434293;
                *(esp_5 - 0x28) = 0x6280f5a3;
                *(esp_5 - 0x2c) = eax_2;
                *(esp_5 - 0x30) = esp_5 - 0x24;
                *(esp_5 - 0x34) = edx_2;
                *(esp_5 - 0x38) = &ebx_1[1];
                *(esp_5 - 0x3c) = esp_5 - 0x38;
                *(esp_5 - 0x40) = ebp;
                *(esp_5 - 0x44) = 0x46f0be80;
                *(esp_5 - 0x48) = __return_addr;
                *(esp_5 - 0x4c) = 0x2282ebc3;
                *(esp_5 - 0x50) = eax_2;
                *(esp_5 - 0x54) = esp_5 - 0x24;
                *(esp_5 - 0x58) = edx_2;
                *(esp_5 - 0x5c) = ebx_1 + 6;
                *(esp_5 - 0x60) = esp_5 - 0x5c;
                *(esp_5 - 0x64) = ebp;
                *(esp_5 - 0x68) = 0x46f0be80;
                *(esp_5 - 0x6c) = __return_addr;
                void* ecx_11;
                ecx_11 = (esp_5 - 0x24) & 0x80;
                char temp9 = *ecx_11;
                *ecx_11 -= 0x70;
                *eax_2[1] = 0x84;
                void* ebx_12;
                ebx_12 = 0x48;
                
                if (__return_addr == 0xffffffff || ecx_11 == 1)
                {
                    eax_2 |= 0x43;
                    /* undefined */
                }
                
                eax_2 = RLCB(eax_2, (ecx_11 - 1), temp9 >= 0x70);
                int32_t eflags;
                *__outsb(edx_2, *0x46f0be80, 0x46f0be80, eflags);
                
                if (eax_2 && ecx_11 == 2)
                    trap(0xd);
                
                void* edi_2 = *(esp_5 - 0x6c);
                char* esi_4 = *(esp_5 - 0x68);
                *(esp_5 - 0x64);
                int16_t ebx_13 = *(esp_5 - 0x5c);
                int32_t* edx_3 = *(esp_5 - 0x58);
                char* ecx_14 = *(esp_5 - 0x54);
                void* esp_24 = esp_5 - 0x4c;
                
                if (eax_2 >= 0)
                {
                    int32_t* eax_5 = *(esp_5 - 0x50) & 0xc0e1b6fe;
                    label_1d25d:
                    *(ecx_14 + 0x78) -= 0x3f01cf0a;
                    
                    while (true)
                    {
                        int32_t temp13_1 = *(ecx_14 + 0x78);
                        *(ecx_14 + 0x78) -= 0x5201e30a;
                        
                        if (temp13_1 == 0x5201e30a || ecx_14 != 1)
                        {
                            *eax_5 <<= 1;
                            trap(0xd);
                        }
                        
                        ecx_14[0x77] -= 0xa;
                        char temp0_3;
                        temp0_3 = __daa(eax_5, eflags);
                        eax_5 = temp0_3;
                        eax_5 += 1;
                        char temp14_1 = ecx_14[0x77];
                        ecx_14[0x77] -= 0xa;
                        char* edi_3 = edi_2 + esi_4;
                        bool cond:11_1 = edi_3 < 0;
                        bool cond:12_1 = edi_3 < 0;
                        *edi_3 = *esi_4;
                        edi_2 = &edi_3[1];
                        esi_4 = &esi_4[1];
                        ecx_14 -= 2;
                        
                        if (!edi_3 || ecx_14)
                        {
                            while (true)
                            {
                                *ecx_14;
                                
                                if (!cond:11_1)
                                    break;
                                
                                if (cond:12_1)
                                {
                                    /* unimplemented  {enter 0xbed0, 0xe1} */
                                    ebx_13 <<= 0x8b;
                                    *(eax_5 - 0xa) ^= edi_2;
                                }
                                
                                edx_3 += 1;
                                char temp16_1 = eax_5;
                                eax_5 += 1;
                                cond:11_1 = temp16_1 + 1 < 0;
                                cond:12_1 = temp16_1 + 1 < 0;
                            }
                            
                            break;
                        }
                        
                        *(ecx_14 + 0x78) -= 0xa;
                        int16_t ds;
                        *(esp_24 - 4) = ds;
                        esp_24 -= 4;
                        eax_5 += 1;
                        *(ecx_14 + 0x78) -= 0xa;
                        label_1d28e:
                        char temp15_1 = *ebx_13[1];
                        *ebx_13[1] |= *edx_3[1];
                        ecx_14 -= 1;
                        
                        if (!(temp15_1 | *edx_3[1]) || ecx_14)
                        {
                            ecx_14[0x78] += *eax_5[1];
                            eax_5 = eax_5 * *0xc0e1b6fe;
                            goto label_1d25d;
                        }
                        
                        ecx_14[0x78];
                        bool c_5 = false;
                        *0x84f3c0fe = ~*0x84f3c0fe;
                        
                        while (true)
                        {
                            char* temp18_1 = ecx_14;
                            ecx_14 = &ecx_14[1];
                            
                            if (&temp18_1[1] >= 0)
                            {
                                char* temp19_1 = esi_4;
                                esi_4 += edi_2;
                                int32_t* temp0_4 = edx_3;
                                edx_3 = eax_5;
                                eax_5 = temp0_4;
                                ecx_14 -= 1;
                                
                                if (temp19_1 == -(edi_2) || ecx_14)
                                    break;
                                
                                *(ecx_14 + 0x78);
                                esi_4[edi_2 << 3];
                                *(ecx_14 + 0x78);
                                char temp1 = eax_5 % eax_5;
                                eax_5 = eax_5 / eax_5;
                                *eax_5[1] = temp1;
                                ecx_14[0x8df3c0e1] -= 1;
                                *(eax_5 - 0xa) ^= edi_2;
                                *(eax_5 - 0xa);
                                *(eax_5 - 0xa) ^= edi_2 + esi_4;
                                __out_dx_oeax(edx_3, eax_5, eflags);
                                *(eax_5 - 0x7f417f1f) += 1;
                                *ecx_14 = *ecx_14 - 0x80;
                                *eax_5 += 0x46f06181;
                                *(ecx_14 - 0x3e) -= 0x810081f1;
                                *esp_24;
                                *(esp_24 + 4);
                                *(esp_24 + 8);
                                *(esp_24 + 0x10);
                                *(esp_24 + 0x14);
                                *(esp_24 + 0x18);
                                *(esp_24 + 0x1c);
                                /* undefined */
                            }
                            
                            if (&temp18_1[1] < 0)
                                goto label_1d28e;
                            
                            int32_t* temp20_1 = eax_5;
                            eax_5 = temp20_1 - 0x7b0c3f02;
                            c_5 = temp20_1 - 0x7b0c3f02 < temp20_1
                                || (c_5 && temp20_1 - 0x7b0c3f02 == temp20_1);
                        }
                    }
                }
                else if (eax_2 >= 0)
                    /* undefined */
                
                /* undefined */
            }
            
            __bound_gprv_mema32(eax_2, *(edx_2 - 0x7f9a7d1f));
            
            if (!temp6_1 || ecx_6 != 2)
            {
                *0xb0b14181 ^= 0x81;
                *(ecx_6 - 1 + (edx_2 << 3) - 0x2e6cd77e) -= (ecx_6 - 1);
                int32_t temp11 = *eax_2;
                *eax_2 -= 0xffffffa2;
                *(eax_2 - 0x5c97fc1f) = RRCB(*(eax_2 - 0x5c97fc1f), 1, temp11 < 0xffffffa2);
                __int1();
                /* undefined */
            }
            
            esi = 0x46f0be80;
            void* ecx_8;
            ecx_8 = 0xb0;
            *eax_2 -= 0x2882d18c;
            int32_t* temp0_2 = ebx_1;
            ebx_1 = eax_2;
            eax_2 = temp0_2;
            int32_t temp12_1 = ROLD(ebx_1[-0x19cbd776], 1);
            ebx_1[-0x19cbd776] = temp12_1;
            
            if (!temp12_1 || ecx_8 != 1)
                *edx_2 = eax_2;
            else
            {
                *(esp_5 - 4) = 0x288f1a3;
                esp_5 -= 4;
            }
        }
        else
        {
            __bound_gprv_mema32(eax_2, *(ecx_6 - 0x1e7d9dbe));
            label_1d196:
            *(ebp - 0x80) &= 0xe1;
            *(esi + 0x46f0be80);
            eax_2 = 0x81;
            *(ecx_6 + (edx_2 << 3) - 0x2e6cd77e) -= ecx_6;
            int32_t temp5_1 = *eax_2;
            *eax_2 -= 0xffffffa2;
            *(eax_2 - 0x5c97fc1f) = RRCB(*(eax_2 - 0x5c97fc1f), 1, temp5_1 < 0xffffffa2);
            __int1();
            *edx_2 = eax_2;
        }
        
        void* esp_14 = esp_5 + *(eax_2 + 3);
        *(esp_14 - 4) = 0x60034293;
        void* eax_3;
        int32_t* ecx_10;
        eax_3 = 0xa369d5a6();
        __bound_gprv_mema32(eax_3, *ebx_1);
        *(esp_14 - 8) = eax_3;
        *(esp_14 - 0xc) = ecx_10;
        *(esp_14 - 0x10) = edx_2;
        *(esp_14 - 0x14) = ebx_1;
        *(esp_14 - 0x18) = esp_14 - 0x14;
        *(esp_14 - 0x1c) = ebp;
        *(esp_14 - 0x20) = esi;
        *(esp_14 - 0x24) = __return_addr;
        void* temp7_1 = ebp;
        ebp += *(eax_3 - 0x3d);
        cond:2 = temp7_1 == -(*(eax_3 - 0x3d));
        *(esp_14 - 0x28) = eax_3;
        *(esp_14 - 0x2c) = ecx_10;
        *(esp_14 - 0x30) = edx_2;
        *(esp_14 - 0x34) = ebx_1;
        *(esp_14 - 0x38) = esp_14 - 0x34;
        *(esp_14 - 0x3c) = ebp;
        *(esp_14 - 0x40) = esi;
        *(esp_14 - 0x44) = __return_addr;
        esp_5 = esp_14 - 0x44;
        ecx_4 = eax_3;
        eax_2 = ecx_10;
    }
}

void __convention("regparm") sub_1d207(void* arg1, int32_t arg2 @ ebp) __noreturn
{
    int32_t ebx;
    int32_t temp0 = *(arg2 + (ebx << 3) + 0x4e00f034);
    *(arg2 + (ebx << 3) + 0x4e00f034) = RORD(*(arg2 + (ebx << 3) + 0x4e00f034), 1);
    bool c = /* bool c = unimplemented  {ror dword [ebp+ebx*8+0x4e00f034], sub_0+1} */;
    bool p = /* bool p = unimplemented  {ror dword [ebp+ebx*8+0x4e00f034], sub_0+1} */;
    bool a = /* bool a = unimplemented  {ror dword [ebp+ebx*8+0x4e00f034], sub_0+1} */;
    bool o = /* bool o = unimplemented  {ror dword [ebp+ebx*8+0x4e00f034], sub_0+1} */;
    bool d;
    int32_t var_4 = (o ? 1 : 0) << 0xb | (d ? 1 : 0) << 0xa | (RORD(temp0, 1) < 0 ? 1 : 0) << 7
        | (!RORD(temp0, 1) ? 1 : 0) << 6 | (a ? 1 : 0) << 4 | (p ? 1 : 0) << 2 | (c ? 1 : 0);
    *(arg1 - 0x6fba5fb7) <<= 1;
    int32_t edx;
    edx = 0x30;
    trap(0xd);
}

void __convention("fastcall") sub_1d22c(int32_t arg1) __noreturn
{
    int16_t cs;
    uint32_t var_4 = cs;
    trap(0xd);
}

int32_t sub_1d248(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5)
{
    bool s;
    
    if (s)
        /* undefined */
    
    /* undefined */
}

int32_t sub_1d35c() __pure
{
    return;
}

int32_t __convention("regparm") sub_1d589(int32_t arg1, void* arg2 @ esi, char** arg3, char** arg4, char* arg5, char* arg6, uint32_t arg7, uint32_t arg8)
{
    *(arg2 - 0x7f1e7f30) -= arg1;
    void* const __return_addr_1 = __return_addr;
    char** ebp = arg4;
    char* ebx = arg5;
    char* edx = arg6;
    uint32_t eax = arg8;
    arg3[-0x79c5060];
    char* ecx_1;
    ecx_1 = (arg7 - 1) - 0x79;
    arg3[-0x1fc79fcc] -= eax;
    *(eax + 0x48) |= 0x61;
    *0x28010805;
    uint16_t* esi_1 = 0x6680bc90;
    *ecx_1 &= 0x54;
    int16_t es;
    arg8 = es;
    *ecx_1 &= 0x80;
    ecx_1[0x81209970] &= eax;
    arg7 = eax;
    arg6 = ecx_1;
    arg5 = edx;
    char* arg_c = ebx;
    arg4 = &arg_c;
    arg3 = ebp;
    __return_addr = 0x6680bc90;
    void* const __return_addr_2 = __return_addr_1;
    void* const* esp_1 = &__return_addr_2;
    *eax;
    *(eax - 0x10) <<= 0x46;
    int32_t eflags;
    
    while (true)
    {
        char temp3_1 = *ecx_1;
        *ecx_1 += 0x70;
        bool c_1 = temp3_1 >= 0x90;
        *eax[1] = 0xd;
        ecx_1 = 0x84;
        void* edi = __return_addr_1 + 1;
        bool z_1 = __return_addr_1 == 0xffffffff;
        
        while (z_1 || c_1)
        {
            char temp5_1 = ecx_1[0x18];
            ecx_1[0x18] += *ebx[1];
            c_1 = temp5_1 + *ebx[1] < temp5_1;
            eax = 0xa0;
            void* temp6_1 = edi;
            edi += 1;
            z_1 = temp6_1 == 0xffffffff;
            
            if (z_1 || temp6_1 + 1 < 0 != temp6_1 + 1)
            {
                __outsd(edx, *esi_1, esi_1, eflags);
                *(eax + 0x4d228121) += 1;
                int32_t eax_1;
                void* ecx_2;
                eax_1 = 0x9186077e();
                *(ecx_2 + 0x3180e84d);
                /* undefined */
            }
        }
        
        *(edi - 0x57);
        *(ecx_1 + 0x68);
        int32_t ecx_4 = *(ecx_1 + 0x68) * 0xcffe52f6;
        char temp9_1;
        
        while (true)
        {
            temp9_1 = *(eax + 0x64);
            *(eax + 0x64) += edx;
            int32_t temp10_1 = ecx_4;
            ecx_4 -= 1;
            
            if (!(temp10_1 - 1))
                break;
            
            *(esp_1 - 4) = edx;
            esp_1 -= 4;
            *ebx[1] -= 1;
        }
        
        int32_t esp_2 = esp_1 - (edi + 1);
        *(edi - 0x56);
        __return_addr_1 = edi + 2;
        ecx_1 = ecx_4 - 1;
        *(esp_2 - 4) = 0xa0fe48f6;
        esp_1 = esp_2 - 4;
        
        if (ecx_4 - 1 >= 0)
            break;
        
        esi_1 += 1;
    }
    
    *(ebp - 0x7f16a02d) -= ecx_1;
    __int1();
    *((ecx_1 << 3) + 0x6eee338c);
    eax = __in_al_dx(edx, eflags);
    uint8_t* edi_4;
    uint8_t temp0_3;
    temp0_3 = __insb(__return_addr_1, edx, eflags);
    *edi_4 = temp0_3;
    /* undefined */
}

int32_t __convention("regparm") sub_1d715(void* arg1, int32_t arg2, char* arg3, int32_t arg4 @ ebp, char* arg5 @ esi, int32_t arg6 @ edi)
{
    int32_t eflags;
    int32_t eflags_1 = __cli(eflags);
    int32_t* eax_3;
    int32_t* eax_4;
    int32_t* ecx_2;
    void* ecx_5;
    void* edx_1;
    int32_t* ebx;
    void* esp;
    int16_t* ebp_1;
    bool c;
    bool c_5;
    bool z_1;
    bool s_1;
    bool o_1;
    
    if (c ^ 1)
    {
        *(arg1 + 0x2f67b47) &= arg3;
        __cli(eflags_1);
        *arg1[1] = *arg3;
        *ebx[1] <<= 0x44;
        /* unimplemented  {shl bh, 0x44} */
        *(__return_addr - 4) = arg2;
        esp = __return_addr - 4;
        int32_t eax_1;
        void* ecx;
        eax_1 = 0x9289f8b9();
        *(ecx + 0x2185e84d);
        *(arg6 - 0x7e) -= 0x786d7bb9;
        *ebx[1] <<= 0x44;
        bool c_2 = /* bool c_2 = unimplemented  {shl bh, 0x44} */;
        char temp9_1 = *ecx[1];
        char temp10_1 = *(ecx - 0x73);
        void* eax_2;
        *eax_2[1] = temp9_1 + temp10_1;
        ebp_1 = arg4 - 2;
        void* ecx_3;
        int32_t edx_2;
        eax_3 = 0x90850acb();
        *(ecx_3 - 0x83f72df) = *(ecx_3 - 0x83f72df) + 0x38;
        edx_1 = edx_2 ^ ecx_3;
        ecx_2 = ecx_3 - *eax_3;
        ebx = 0x8a;
        *(edx_1 + 0x44f7c047);
        ebx = 0x8a & *(edx_1 + 0x44f7c047);
        *(ebx - 0xa) = *(ebx - 0xa) + *ebx[1];
        
        do
        {
            eax_4 = *arg5;
            arg5 = &arg5[1];
            int32_t temp15_1 = *(ebx - 0x5f19801f);
            *(ebx - 0x5f19801f) += eax_4;
            c_5 = temp15_1 + eax_4 < temp15_1;
            int32_t temp16_1 = arg6;
            arg6 += 1;
            z_1 = temp16_1 == 0xffffffff;
            s_1 = temp16_1 + 1 < 0;
            o_1 = temp16_1 + 1;
            label_1d76e:
        } while (!z_1 && s_1 == o_1);
        
        eax_3 = ecx_2;
        *(esp - 4) = *eax_3;
        void* esp_3 = esp - 4;
        ecx_5 = eax_4 - 1;
        
        if (z_1 || !ecx_5)
        {
            label_1d776:
            char temp21_1 = *(ecx_5 - 0x81);
            *(ecx_5 - 0x81) -= 0x20;
            *ebp_1;
            ecx_5 = ecx_5 - 1 - *(edx_1 - 0x28) + 2;
            *(edx_1 - 0x78) = eax_3;
            *(ecx_5 - 0x7ddd7fdf);
            *(ecx_5 - 0x7ddd7fdf) = ROLD(*(ecx_5 - 0x7ddd7fdf), 1);
            c_5 = /* c_5 = unimplemented  {rol dword [ecx-0x7ddd7fdf], sub_0+1} */;
            ebp_1[2];
            esp_3 = &ebp_1[3];
        }
        
        char temp20 = *(ecx_5 - 0x984b6f0) - 6;
        *(ecx_5 - 0x984b6f0) = temp20;
        char* ecx_9 = ecx_5 - 1;
        
        if (!temp20 || ecx_9)
        {
            ebx[0x1808601c];
            ebx[0x1808601c] &= esp_3;
            /* unimplemented  {and dword [eax+0x60218070], esp} */
        }
        else
        {
            void* ecx_10;
            ecx_10 = (ecx_9 - 1) + *(eax_3 - 1)[1];
            edx_1 = 1;
            int32_t* eax_6;
            eax_6 = 0x11;
            ecx_9 = ecx_10 - 1;
            ecx_9[0x20] -= 0x60;
            *ecx_9;
            /* unimplemented  {test byte [ecx], ah} */
            eax_6 = *0x60218070;
        }
        
        ecx_9[0x5f] -= 0x61;
        /* undefined */
    }
    
    *(arg6 + 0x7b) = arg1;
    *(arg2 - 6);
    *(ebx + arg2 - 0x40);
    int32_t eax_8;
    void* ecx_12;
    eax_8 = 0x9289f839();
    *(ecx_12 + 0x2185e84d);
    *(arg6 - 0x7e) -= 0x786d7bb9;
    *ebx[1] <<= 0x44;
    bool c_8 = /* bool c_8 = unimplemented  {shl bh, 0x44} */;
    char temp2_1 = *ecx_12[1];
    char temp3_1 = *(ecx_12 - 0x73);
    void* eax_9;
    *eax_9[1] = temp2_1 + temp3_1;
    ebp_1 = arg4 - 1;
    void* ecx_14;
    int32_t edx_4;
    eax_4 = 0x90850a4b();
    *(ecx_14 - 0x83f72df) = *(ecx_14 - 0x83f72df) + 0x38;
    edx_1 = edx_4 ^ ecx_14;
    int32_t* ecx_15 = ecx_14 - *eax_4;
    ebx = 0x8a;
    *(edx_1 + 0x44f7c047);
    ebx = 0x8a & *(edx_1 + 0x44f7c047);
    bool c_10 = false;
    
    while (true)
    {
        char temp14_1 = *(ebx - 0xa);
        bool cond:5_1 = c_10;
        *(ebx - 0xa) = temp14_1 + *ebx[1];
        c_10 = temp14_1 + *ebx[1] < temp14_1 || (cond:5_1 && temp14_1 + *ebx[1] == temp14_1);
        
        if (temp14_1 + *ebx[1])
            esp += 1;
        else
        {
            *ecx_15 &= 4;
            int32_t i;
            
            do
            {
                eax_4 = *arg5;
                arg5 = &arg5[1];
                *(ebx - 0x5f19801f) += eax_4;
                i = arg6;
                arg6 += 1;
            } while (i > 0xffffffff);
            int32_t temp18_1 = arg6;
            arg6 s>>= 1;
            c_5 = /* c_5 = unimplemented  {sar edi, sub_0+1} */;
            z_1 = !(temp18_1 >> 1);
            s_1 = temp18_1 >> 1 < 0;
            o_1 = /* o_1 = unimplemented  {sar edi, sub_0+1} */;
            
            if (!o_1)
                break;
            
            *(ebx + 0x479a228a) |= *edx_1[1];
            *ebx[1] <<= 0x44;
            c_10 = /* c_10 = unimplemented  {shl bh, 0x44} */;
        }
    }
    
    ecx_2 = ecx_15 - 1;
    
    if (!z_1 && ecx_2)
        goto label_1d76e;
    
    eax_3 = eax_4 + 1;
    edx_1 = 0xc0;
    int32_t esp_8 = *esp;
    *(esp_8 - 4) = ecx_2;
    char temp23_1 = ebp_1[0x10c042b0] & eax_3;
    ebp_1[0x10c042b0] = temp23_1;
    ecx_5 = ecx_2 - 1;
    int16_t ss;
    
    if (temp23_1 && ecx_5)
        *(esp_8 - 8) = ss;
    else
    {
        int32_t eflags_3;
        char temp0_5;
        char temp1_2;
        temp0_5 = __aaa(eax_3, *eax_3[1], eflags_1);
        eax_3 = temp0_5;
        *eax_3[1] = temp1_2;
        
        while (true)
        {
            ecx_5 -= 1;
            *(ecx_5 - 0x58) -= 0x20;
            edx_1 ^= *ebx[1];
            eax_3 &= esp_8 - 4;
        }
    }
    goto label_1d776;
}

int32_t __convention("regparm") sub_1d81f(int32_t arg1, int32_t arg2, int32_t arg3 @ esi)
{
    /* unimplemented  {sbb edx, eax} */
    /* undefined */
}

void* __convention("regparm") sub_1d82b(void** arg1, void* arg2, int32_t arg3, void* arg4 @ ebp, void*** arg5 @ esi, int32_t arg6 @ edi, long double arg7 @ st0, long double arg8 @ st1)
{
    int32_t temp1_1 = *(arg1 - 0x2f1e308d);
    *(arg1 - 0x2f1e308d) &= &__return_addr;
    bool c_3 = false;
    bool z = !(temp1_1 & &__return_addr);
    bool s = (temp1_1 & &__return_addr) < 0;
    bool o = false;
    void* ecx = arg3 - 1;
    int32_t eflags;
    int32_t* ebx;
    
    if (!z && ecx)
    {
        eflags = __cli(eflags);
        char temp2_1 = arg1[8] & *arg2[1];
        arg1[8] = temp2_1;
        bool c_4;
        
        if (temp2_1 >= 0)
        {
            int32_t temp4_1 = *(ebx - 0x5fde7a26);
            *(ebx - 0x5fde7a26) -= arg1;
            c_4 = temp4_1 < arg1;
            
            if (temp4_1 + -(arg1))
                goto label_1d77e;
            
            void* temp7_1 = *arg1;
            *arg1 &= &__return_addr;
            c_3 = false;
            s = (temp7_1 & &__return_addr) < 0;
            o = false;
            
            if (!s)
            {
                if (s)
                    goto label_1d7ff;
                
                int32_t* temp14_1 = ebx;
                ebx += 1;
                bool p_2 = /* bool p_2 = unimplemented  {inc ebx} */;
                bool a_1 = /* bool a_1 = unimplemented  {inc ebx} */;
                *arg1[1] = (temp14_1 + 1 < 0 ? 1 : 0) << 7 | (temp14_1 == 0xffffffff ? 1 : 0) << 6
                    | (a_1 ? 1 : 0) << 4 | (p_2 ? 1 : 0) << 2;
                void* temp15_1 = *arg1;
                *arg1 <<= 1;
                c_3 = temp15_1 & 0x80000000;
                s = temp15_1 << 1 < 0;
                o = /* o = unimplemented  {shl dword [eax], sub_0+1} */;
                goto label_1d7fb;
            }
            
            goto label_1d85b;
        }
        
        arg1 ^= *arg1[1];
        int16_t ss;
        uint32_t var_4_1 = ss;
        ecx -= 1;
        char temp3_1 = *(ecx - 0x80);
        *(ecx - 0x80) -= 0x20;
        c_4 = temp3_1 < 0x20;
        label_1d77e:
        *arg4;
        void* ecx_10 = ecx - *(arg2 - 0x28) + 2;
        *(arg2 - 0x78) = arg1;
        *(ecx_10 - 0x7ddd7fdf);
        *(ecx_10 - 0x7ddd7fdf) = ROLD(*(ecx_10 - 0x7ddd7fdf), 1);
        bool c_5 = /* bool c_5 = unimplemented  {rol dword [ecx-0x7ddd7fdf], sub_0+1} */;
        *(arg4 + 4);
        char temp6 = *(ecx_10 - 0x984b6f0) - 6;
        *(ecx_10 - 0x984b6f0) = temp6;
        char* ecx_11 = ecx_10 - 1;
        
        if (!temp6 || ecx_11)
        {
            ebx[0x1808601c];
            ebx[0x1808601c] &= arg4 + 6;
            /* unimplemented  {and dword [eax+0x60218070], esp} */
        }
        else
        {
            void* ecx_12;
            ecx_12 = (ecx_11 - 1) + *(arg1 - 1)[1];
            arg2 = 1;
            int32_t* eax_4;
            eax_4 = 0x11;
            ecx_11 = ecx_12 - 1;
            ecx_11[0x20] -= 0x60;
            *ecx_11;
            /* unimplemented  {test byte [ecx], ah} */
            eax_4 = *0x60218070;
        }
        
        ecx_11[0x5f] -= 0x61;
        /* undefined */
    }
    
    void* ecx_1 = ecx - 1;
    void* ecx_4;
    bool c_2;
    
    if (!z && ecx_1)
    {
        *(ecx_1 + 8) = arg4;
        ebx += 1;
        arg1 = *arg5;
        label_1d84b:
        ecx = ecx_1 - 1;
        *(ecx - 0x80) -= 0x22;
        *(arg1 - 0x1b);
        *ebx[1] &= *(arg1 - 0x1b);
        arg6 -= 1;
        arg1 = __in_al_immb(0x37, eflags);
        label_1d85b:
        void* eax;
        eax = (arg1 - 0x7c153ce8) + *ecx[1];
        ecx_4 = ecx + 1;
        *ebx -= 0x2e78bd70;
        *(ecx_4 - 0x80);
        *(eax - 0x27b520e0);
        int32_t eax_1 = *(eax - 0x27b520e0) * 0x8841c941;
        bool c_1 = /* bool c_1 = unimplemented  {imul eax, dword [eax-0x27b520e0], 0x8841c941} */;
        arg1 = eax_1 - 0x2a;
        c_2 = eax_1 - 0x2a < eax_1 || (c_1 && eax_1 - 0x2a == eax_1);
    }
    else
    {
        if (z || ecx_1 != 1)
            /* undefined */
        
        void* ecx_3 = ecx_1 - 2;
        
        if (z || ecx_3)
        {
            label_1d804:
            *(ecx_3 + 0x60) -= 0x61;
            *ecx_3 &= 0x81;
            ecx_3 &= *(arg4 - 0x18);
            *ecx_3 ^= 0x84;
            *(arg1 + 0x3180e84d);
            *(ecx_3 - 0xd) &= *ebx[1];
            void* eax_8;
            eax_8 = __in_al_immb(0x30, eflags);
            return eax_8;
        }
        
        ecx = ecx_3 - 1;
        
        if (!z && !ecx)
        {
            ecx_1 = *(arg1 - 0x76b717bb) * 0xad430869;
            goto label_1d84b;
        }
        
        int32_t edx;
        
        do
        {
            arg1 = 0x20;
            label_1d7ff:
            
            if (s)
            {
                edx = arg2 + *(arg1 - 0x252e78be);
                goto label_1d868;
            }
            
            if (!o)
            {
                ecx_3 = ecx - 1;
                goto label_1d804;
            }
            
            label_1d7fb:
        } while (!s);
        
        edx = RRCD(arg2, 1, c_3);
        label_1d868:
        char temp16_1 = *(ecx - 0x81);
        *(ecx - 0x81) -= 0x20;
        *(edx - 0x28) = arg7;
        *arg4;
        ecx_4 = ecx + 1;
        *(edx - 0x7d) = arg1;
        *edx[1] = RLCB(*edx[1], 1, temp16_1 < 0x20);
        c_2 = /* c_2 = unimplemented  {rcl dh, 0x1} */;
    }
    
    void* ecx_7;
    ecx_7 = (ecx_4 - 1) + *ebx[1];
    *arg6;
    *arg1 += arg1;
    arg1 = 0x80;
    *(ecx_7 + 0x4d938223) &= arg1;
    0x9186fa0d();
    int16_t eax_2 = 0x7821fa10();
    int32_t eflags_1;
    char temp0_2;
    char temp1;
    temp0_2 = __aad_immb(0x48, eax_2, *eax_2[1]);
    eax_2 = temp0_2;
    *eax_2[1] = temp1;
    eax_2 = __in_al_immb(0x30, eflags_1);
    return eax_2;
}

void __convention("regparm") sub_1d895(int32_t arg1, int32_t arg2) __noreturn
{
    /* unimplemented  {sbb edx, eax} */
    trap(0x49);
}

void* __convention("regparm") sub_1d9b3(void* arg1, int32_t arg2, void* arg3, void* arg4 @ ebp, int32_t arg5 @ esi, int32_t arg6 @ edi)
{
    bool c_1 = /* bool c_1 = unimplemented  {sbb edx, eax} */;
    *(arg4 + 0x7a498548) = *(arg4 + 0x7a498548) - arg3;
    char* ebx;
    *ebx = ~*ebx;
    char temp2 = *(arg3 - 0x1c8c5fdf);
    *(arg3 - 0x1c8c5fdf) += 1;
    
    if (temp2 == 0xff || arg3 != 1)
    {
        void* ecx;
        ecx = (arg3 - 1) & *(arg4 - 0x18);
        *ecx ^= 0x84;
        *(arg1 + 0x3180e84d);
        *(ecx - 0x72) &= *ebx[1];
        int32_t eflags;
        void* result;
        result = __in_al_immb(0x30, eflags);
        return result;
    }
    
    *(arg1 - 0x1afda0df) += arg1;
    char* fsbase;
    *(fsbase + arg3 - 1);
    *(fsbase + arg3 - 1) &= 0x80;
    *(arg3 - 0x7fcb3fc0) = *(arg3 - 0x7fcb3fc0) + arg1;
    void* eax;
    eax = (arg1 & (&__return_addr + arg4)) ^ 0x80;
    *eax &= eax;
    eax ^= 0x80;
    bool c;
    *(arg5 + eax - 0x80) &= arg2 - arg1;
    *eax &= arg6;
    /* undefined */
}

long double __convention("regparm") sub_1da5b(void* arg1, void* arg2, void* arg3, void* arg4 @ ebp, void* arg5 @ esi, void** arg6 @ edi, long double arg7 @ st0)
{
    char temp0 = *(arg3 - 0x6b8c5fdf);
    *(arg3 - 0x6b8c5fdf) += 1;
    char* ebx;
    
    if (temp0 != 0xff && arg3 == 1)
    {
        void* ecx_1;
        bool c;
        ecx_1 = (arg3 - 2) + *ebx[1];
        arg2 = 1;
        *(arg1 + 0x73a02180) += *arg2[1];
        *ebx &= 0x9e;
        arg6[-0x20];
        *(ebx - 0x56dc7eb9);
        *(ebx - 0x56dc7eb9) &= arg1 - 1;
        *(ecx_1 - 0x985b66b) = *(ecx_1 - 0x985b66b) + 0x7e;
        /* jump -> *(ebx + 0x804994e1) */
    }
    
    *arg2[1] = 0x48;
    *(arg3 + 7) = arg4;
    *arg6 = arg1;
    void* edi_1 = &arg6[1];
    long double result = arg7 / *(arg4 - 0x7f967fb7);
    *arg1[1] &= *(arg3 - 1);
    void* ecx;
    void* edi_4;
    void* eax_2;
    
    if (*arg1[1] < 0)
    {
        *(edi_1 + 2) &= &ebx[1];
        int32_t eflags;
        char eax_1 = __in_oeax_immb(0x3c, eflags);
        char temp2_1 = ebx[1];
        ebx[1] ^= eax_1;
        eax_2 = __in_oeax_immb(0x3c, eflags);
        
        if (!((temp2_1 ^ eax_1) < 0))
        {
            *(arg3 - 1);
            *(arg3 - 1) &= 0x80;
            *(arg3 - 0x7fcb3fc0) = *(arg3 - 0x7fcb3fc0) + eax_2;
            void** eax_3;
            eax_3 = (eax_2 & &__return_addr) ^ 0x80;
            *eax_3 &= eax_3;
            eax_3 ^= 0x80;
            *(arg5 + eax_3 - 0x80) &= arg2;
            *eax_3 &= edi_1;
            /* undefined */
        }
        
        ecx = (arg3 - 1) + *(&ebx[1])[1];
        *edi_1;
        edi_4 = edi_1 + 1;
    }
    else
    {
        eax_2 = (arg1 | 0x83eac318) + *(arg3 - 1)[1];
        *(ebx + 1) -= 0x2e78bd70;
        *(edi_1 - 1);
        *(arg3 - 0x81) -= 0x20;
        *edi_1;
        edi_4 = edi_1 + 4;
        *(arg3 - 0x38) = ROLB(*(arg3 - 0x38), 1);
        ecx = arg3;
        *(arg2 - 0x7d) = eax_2;
        *(arg2 - 0x5106efb7) u>>= 1;
    }
    void* eax_4;
    eax_4 = 0x80;
    *(ecx + 0x4d938223) &= eax_4;
    0x9186fbcb();
    0x7821fbce();
    *edi_4 = *arg5;
    return result;
}

int32_t sub_1dc5e()
{
    bool c;
    char* eax = 0xf82d5ba6() + 0x157fe9bf;
    int32_t temp0 = *(eax + 0x49);
    *(eax + 0x49) <<= 1;
    *eax = *eax + *eax[1];
    /* undefined */
}

int32_t __convention("regparm") sub_1dc76(char* arg1)
{
    char ebx;
    *0xea801641 &= ebx;
    int32_t temp0 = *(arg1 + 0x49);
    *(arg1 + 0x49) <<= 1;
    *arg1 = *arg1 + *arg1[1];
    /* undefined */
}

int32_t sub_1dc88(uint864_t* arg1 @ edi)
{
    int32_t eflags;
    int32_t eax_1 = __in_oeax_immb(0xdc, eflags);
    char* ebx;
    *ebx;
    __frstor_memmem108(*arg1);
    void* eax = eax_1 + 0x1578e987;
    int32_t temp1 = *(eax + 0x49);
    *(eax + 0x49) <<= 1;
    *arg1 = *arg1 + *eax[1];
    /* undefined */
}

int32_t __convention("regparm") sub_1dc9b(char* arg1, int32_t arg2, char arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9)
{
    bool c;
    *arg1 = *arg1 + arg3;
    /* unimplemented  {sbb eax, 0xfebcf663} */
    /* undefined */
}

int32_t sub_1dcaf()
{
    /* undefined */
}

int32_t __convention("regparm") sub_1dcb6(void* arg1, char* arg2, int32_t arg3, void* arg4 @ ebp, void* arg5 @ esi, int32_t* arg6 @ edi)
{
    char* ebx;
    char temp1 = *ebx;
    bool c;
    *ebx = temp1 + arg2;
    int32_t temp2 = *(arg4 + 8);
    *(arg4 + 8) = RRCD(temp2, 1, temp1 + arg2 < temp1 || (c && temp1 + arg2 == temp1));
    void* var_4 = arg1;
    *arg2 = RLCB(*arg2, 1, temp2 & 1);
    bool c_3 = /* bool c_3 = unimplemented  {rcl byte [edx], 0x1} */;
    int32_t* i = arg3;
    void* eax = arg1 + 1;
    
    if (arg1 + 1 >= 0)
    {
        int32_t temp6 = *arg6;
        void* ebx_2;
        ebx_2 = ebx - *(arg4 + temp6 - 0x20);
        bool c_7 = /* bool c_7 = unimplemented  {sbb bl, byte [ebp-0x20]} */;
        char* eax_2 = eax + 0x157fe9bd;
        *(arg2 + 0x5a);
        *(arg2 + 0x5a) <<= i;
        bool c_8 = /* bool c_8 = unimplemented  {shl dword [edx+0x5b], cl} */;
        *eax_2 = *eax_2 + *eax_2[1];
        /* undefined */
    }
    
    *(arg5 - 0x7d67c2f) -= eax;
    *arg2 = ROLD(*arg2, 1);
    void* edi = arg6 - arg5;
    *ebx = ROLD(*ebx, 1);
    bool c_4;
    char temp10_1;
    
    do
    {
        *(eax - 0x1f) s>>= 1;
        *(edi - 0x47227c2f) -= &var_4;
        eax = 0x9b;
        *(arg2 - 0x4f1e1230) -= &var_4;
        *(arg4 - 0x62d64c2f) = *(arg4 - 0x62d64c2f);
        temp10_1 = *arg2[1];
        *arg2[1] = ROLB(*arg2[1], 1);
        c_4 = /* c_4 = unimplemented  {rol dh, 0x1} */;
        i -= 1;
    } while (!ROLB(temp10_1, 1) || i);
    eax = 0x9b - 0x42;
    int16_t ss;
    uint32_t var_8 = ss;
    arg2 -= 0xd2;
    int32_t eflags;
    int16_t temp0;
    temp0 = __arpl_memw_gpr16(*(arg2 + 0x10), arg2);
    *(arg2 + 0x10) = temp0;
    arg2 &= *i[1];
    bool c_5 = /* bool c_5 = unimplemented  {sbb ebx, dword [ebp+0x21]} */;
    uint32_t var_c = ss;
    *(arg4 - 0x3d);
    /* tailcall */
    return sub_1dc9b(eax + *i - 0x4a, ((arg2 - 0x105263d2) & arg4) + 1);
}

int32_t sub_1dd16() __pure
{
    return;
}

int32_t j_sub_1dc9b(int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9)
{
    char* arg1;
    char arg3;
    int32_t arg2;
    /* tailcall */
    return sub_1dc9b(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
}

int32_t __convention("regparm") sub_1dd27(char* arg1, void* arg2, int32_t arg3, int32_t arg4 @ ebp, int32_t arg5 @ esi, int32_t arg6 @ edi)
{
    int32_t esp_2 = &__return_addr ^ *(arg2 - 0x16ce6807);
    
    if (&__return_addr == *(arg2 - 0x16ce6807) || arg3 != 1)
        /* undefined */
    
    arg1 = arg1 - 0x41;
    int16_t ss;
    *(esp_2 - 4) = ss;
    char temp2 = arg2;
    arg2 -= 0xd1;
    *(esp_2 - 8) = arg1;
    *(esp_2 - 0xc) = arg3 - 1;
    *(esp_2 - 0x10) = arg2;
    int32_t ebx;
    *(esp_2 - 0x14) = ebx;
    *(esp_2 - 0x18) = esp_2 - 0x14;
    *(esp_2 - 0x1c) = arg4;
    *(esp_2 - 0x20) = arg5;
    *(esp_2 - 0x24) = arg6;
    *arg1 = *arg1 + *arg1[1];
    /* undefined */
}

int32_t __convention("regparm") sub_1ddb5(int32_t arg1, void* arg2, void* arg3, void* arg4 @ ebp, int32_t arg5 @ esi)
{
    int32_t eax = arg1 ^ *(arg2 + 0x1303c7ea);
    *(arg3 - 0x5d1e5d1f);
    *(arg3 - 0x5d1e5d1f) &= 0xe0e102e1;
    eax = eax - 0x42;
    int16_t ss;
    uint32_t var_4 = ss;
    arg2 -= 0xd2;
    int32_t eflags;
    int16_t temp0;
    temp0 = __arpl_memw_gpr16(*(arg2 + 0x10), arg2);
    *(arg2 + 0x10) = temp0;
    arg2 &= *arg3[1];
    bool c = /* bool c = unimplemented  {sbb ebx, dword [ebp+0x21]} */;
    eax = eax - 0x4a;
    uint32_t var_8 = ss;
    *(arg4 - 0x3d);
    /* undefined */
}

int32_t __convention("regparm") sub_1de11(char* arg1, int32_t arg2, int32_t arg3)
{
    bool c;
    arg1 = arg1 - 0x41;
    int16_t ss;
    uint32_t var_4 = ss;
    int32_t edx;
    edx = (arg2 + 1) + 0x2f;
    char* var_8 = arg1;
    int32_t var_c = arg3 + 1;
    int32_t var_10 = edx;
    int32_t ebx;
    int32_t var_14 = ebx;
    int32_t* var_18 = &var_14;
    int32_t var_1c = 0xa0710848;
    *arg1 = *arg1 + *arg1[1];
    /* undefined */
}

int32_t __convention("regparm") sub_1de73(int32_t arg1, int32_t arg2, char arg3)
{
    char* eax = arg1 ^ *(arg2 + 0x5303c7ea);
    *(eax + 0x1c) &= 0xea801642;
    void* ebx;
    *(ebx + 0x52);
    *(ebx + 0x52) <<= arg3;
    bool c = /* bool c = unimplemented  {shl byte [ebx+0x52], cl} */;
    *eax = *eax + *eax[1];
    /* undefined */
}

int32_t __convention("regparm") sub_1deaf(int32_t arg1, void* arg2, int32_t arg3, void* arg4 @ ebp, int32_t* arg5 @ esi, int32_t arg6 @ edi)
{
    *(arg2 - 0x6cfc3816);
    void* eax_3 = arg1 ^ *(arg2 - 0x6cfc3816);
    *(arg4 - 0x16863fb7) = *(arg4 - 0x16863fb7) + 0x1f;
    int32_t* ebx;
    *ebx &= 0x4290410a;
    /* unimplemented  {enter 0x8071, 0xe1} */
    arg5[0x8202fa0];
    __bound_gprv_mema32(eax_3, *arg5);
    *(ebx + 0x52);
    *(ebx + 0x52) <<= arg3;
    bool c = /* bool c = unimplemented  {shl byte [ebx+0x52], cl} */;
    *(eax_3 + (arg4 << 3)) = *(eax_3 + (arg4 << 3)) + *(arg2 - 1)[1];
    *(eax_3 - 0x7faae6b5);
    char* eax_2 = arg2 - 1 + 0x157fe9bf;
    int32_t temp6 = *(eax_2 + 0x49);
    *(eax_2 + 0x49) <<= 1;
    *eax_2 = *eax_2 + *eax_2[1];
    /* undefined */
}

int32_t __convention("fastcall") sub_1def4(char* arg1, int32_t arg2, int32_t arg3 @ ebp, int32_t arg4 @ esi, void* arg5 @ edi)
{
    int32_t eax;
    eax = *0xe0b34445;
    void* ebx;
    bool c;
    
    while (true)
    {
        int32_t temp2_1 = eax;
        bool cond:3_1 = c;
        eax = temp2_1 - 0x2d09b344;
        c = /* c = unimplemented  {sbb eax, 0x2d09b344} */;
        bool o_1 = /* bool o_1 = unimplemented  {sbb eax, 0x2d09b344} */;
        
        if (!(temp2_1 - 0x2d09b344) || temp2_1 - 0x2d09b344 < 0 != o_1)
            break;
        
        ebx = 0xe0;
    }
    
    void* eax_1 = eax - 0x70e93daf;
    *(eax_1 - 0x7fb41fff) += 0x21;
    eax_1 = eax_1;
    *arg1 &= 0xb8;
    *eax_1[1] = 0x84;
    void* edi = arg5 + 1;
    void* ecx;
    void* ecx_1;
    bool cond:1_1;
    
    if (arg5 != 0xffffffff && arg1 != 1)
    {
        ecx = (arg1 - 1) & 0x99;
        label_1df99:
        ecx_1 = ecx - 1;
        cond:1_1 = ecx == 1;
        
        if (ecx == 1)
            goto label_1df92;
        
        /* undefined */
    }
    
    *(arg1 - 1) -= 0xd3;
    char temp4_1 = *(eax_1 - 0x30d67785);
    *(eax_1 - 0x30d67785) <<= 1;
    *(edi - 0x17) = RRCD(*(edi - 0x17), (arg1 - 1), temp4_1 & 0x80);
    ecx = (arg1 - 1) ^ 0x84;
    eax_1 -= 0x63;
    eax_1 &= *arg2[1];
    ebx -= 1;
    int32_t eflags;
    int32_t eflags_1;
    int32_t eip_1;
    eip_1 = __into(eflags);
    char temp0_1;
    char temp1_1;
    temp0_1 = __aas(eax_1, 0x84, eflags_1);
    eax_1 = temp0_1;
    *eax_1[1] = temp1_1;
    /* unimplemented  {enter 0x20e1, 0x7b} */
    *(eax_1 - 0x6afb651) |= *arg2[1];
    label_1df36:
    int32_t esp;
    *(esp - 4) = eax_1;
    *(esp - 8) = ecx;
    *(esp - 0xc) = arg2;
    *(esp - 0x10) = ebx;
    *(esp - 0x14) = esp - 0x10;
    *(esp - 0x18) = arg3;
    *(esp - 0x1c) = arg4;
    *(esp - 0x20) = edi;
    void* eax_3 = eax_1 * 2 + 0x6beb753;
    *(esp - 0x24) = eax_3;
    *(esp - 0x28) = ecx;
    *(esp - 0x2c) = arg2;
    *(esp - 0x30) = ebx;
    *(esp - 0x34) = esp - 0x30;
    *(esp - 0x38) = arg3;
    *(esp - 0x3c) = arg4;
    *(esp - 0x40) = edi;
    esp -= 0x40;
    *(eax_3 - 0x7e8cdfdf) += eax_3;
    *(eax_3 - 0x55b87dde);
    *(eax_3 - 0x55b87dde) &= eax_3;
    bool c_3 = false;
    
    while (true)
    {
        *(ecx - 0x985b656) = *(ecx - 0x985b656) + 0x1a;
        
        while (true)
        {
            ecx &= 0xa0;
            void* temp10_1 = edi;
            edi += 1;
            bool p_1 = /* bool p_1 = unimplemented  {inc edi} */;
            
            if (temp10_1 + 1 >= 0)
            {
                if (p_1)
                {
                    char temp13_1 = *(edi - 0x56);
                    *(edi - 0x56) += 0x48;
                    c_3 = temp13_1 >= 0xb8;
                    break;
                }
                
                *ebx[1] = *ebx[1] - *ecx[1];
            }
            else
            {
                int32_t eflags_2 = __sti(eflags);
                void* eax_4;
                
                while (true)
                {
                    eax_4 = 0xe1;
                    
                    if (!p_1)
                        break;
                    
                    eax_4 = *0x2ef67947;
                    eflags_2 = __sti(eflags_2);
                }
                
                ebx = eax_4;
                eax_1 = *0x28f67947;
                eflags = __sti(eflags_2);
                *edi = eax_1;
                edi -= 1;
                ecx_1 = ecx - 1;
                
                if (temp10_1 == 0xffffffff || ecx_1)
                    goto label_1df8b;
                
                if (!p_1)
                {
                    char temp1_2 = eax_1 % *eax_1[1];
                    eax_1 = eax_1 / *eax_1[1];
                    *eax_1[1] = temp1_2;
                    goto label_1df8c;
                }
                
                eax_1 = 0xa0;
                ecx_1 -= 1;
                *(esp - 4) = eax_1;
                void* eax_6 = eax_1 * 2 + 0x6beb762;
                esp -= 6;
                *(eax_6 - 0x7e8cdfdf) += eax_6;
                *(eax_6 - 0x62b87dde);
                *(eax_6 - 0x62b87dde) &= eax_6;
                bool c_5 = false;
                eax_1 = eax_6 - 1;
                
                while (true)
                {
                    *(ecx_1 - 0x985b665) = *(ecx_1 - 0x985b665) - 4;
                    label_1df8c:
                    bool p_2;
                    
                    do
                    {
                        bool d = true;
                        void* temp14_1 = ecx_1;
                        ecx_1 -= 1;
                        cond:1_1 = temp14_1 == 1;
                        label_1df92:
                        
                        if (!cond:1_1)
                        {
                            edi s>>= 0x82;
                            ecx = ecx_1 - 1;
                            
                            if (edi && !ecx)
                                goto label_1df99;
                            
                            *edi;
                            
                            if (d)
                                edi -= 4;
                            else
                                edi += 4;
                            
                            ecx -= 1;
                            *(esp - 4) = eax_1;
                            esp -= 4;
                            goto label_1df36;
                        }
                        
                        label_1df8b:
                        ecx_1 -= 1;
                        p_2 = /* p_2 = unimplemented  {dec ecx} */;
                    } while (!p_2);
                    char temp12_1 = *(edi - 0x63);
                    *(edi - 0x63) += 0x48;
                    c_5 = temp12_1 >= 0xb8;
                }
            }
        }
    }
}

int32_t __convention("regparm") sub_1df9f(void* arg1, int32_t arg2, int32_t arg3, int32_t arg4 @ ebp, int32_t arg5 @ esi, void* arg6 @ edi)
{
    bool z;
    
    if (z || arg3 != 1)
        /* jump -> 0x486d0a6 */
    
    void* ebx;
    *(arg1 - 0xf06feb8) &= ebx;
    *(arg6 + 0x65f67449) += arg2;
    void* esp_1 = arg1;
    char* eax = arg3 - 1;
    void var_1;
    void* ecx = &var_1;
    void* i;
    
    do
    {
        char temp1_1 = eax % *ebx;
        eax = eax / *ebx;
        *eax[1] = temp1_1;
        i = ecx & 0xffffff94;
        ecx = i - 1;
    } while (i == 1);
    int32_t gsbase;
    int32_t temp4 = *(gsbase + eax - 0x5f417f42);
    *(gsbase + eax - 0x5f417f42) += 1;
    bool p = /* bool p = unimplemented  {inc dword [gs:eax-0x5f417f42]} */;
    bool z_2 = temp4 == 0xffffffff;
    int32_t eflags;
    
    if (p)
    {
        eax = 0xa0;
        bool c_1 = /* bool c_1 = unimplemented  {imul esi, esi, 0x2c} */;
        __cli(eflags);
        
        for (; !c_1; c_1 = /* c_1 = unimplemented  {imul byte [edx+edi*8]} */)
        {
            eax = *0x6b47a0b0;
            *(arg2 + ((arg6 + 1) << 3));
            eax = eax * *(arg2 + ((arg6 + 1) << 3));
        }
        
        /* undefined */
    }
    
    eax = eax * *eax;
    label_1df67:
    int32_t eflags_2 = __sti(eflags);
    void* edi_1;
    bool d;
    
    if (d)
    {
        *arg6 = eax;
        edi_1 = arg6 - 1;
    }
    else
    {
        *arg6 = eax;
        edi_1 = arg6 + 1;
    }
    
    void* ecx_2 = ecx - 1;
    
    if (z_2 || ecx_2)
        goto label_1df8b;
    
    if (!p)
    {
        char temp1_2 = eax % *eax[1];
        eax = eax / *eax[1];
        *eax[1] = temp1_2;
        goto label_1df8c;
    }
    
    eax = 0xa0;
    ecx_2 -= 1;
    *(esp_1 - 4) = eax;
    void* eax_5 = eax * 2 + 0x6beb762;
    esp_1 -= 6;
    *(eax_5 - 0x7e8cdfdf) += eax_5;
    *(eax_5 - 0x62b87dde);
    *(eax_5 - 0x62b87dde) &= eax_5;
    bool c_5 = false;
    eax = eax_5 - 1;
    
    while (true)
    {
        *(ecx_2 - 0x985b665) = *(ecx_2 - 0x985b665) - 4;
        label_1df8c:
        bool p_1;
        
        do
        {
            void* temp13_1 = ecx_2;
            ecx_2 -= 1;
            bool cond:1_1 = temp13_1 == 1;
            
            while (!cond:1_1)
            {
                edi_1 s>>= 0x82;
                void* ecx_3 = ecx_2 - 1;
                
                if (!edi_1 || ecx_3)
                {
                    *edi_1;
                    arg6 = edi_1 - 4;
                    ecx = ecx_3 - 1;
                    *(esp_1 - 4) = eax;
                    *(esp_1 - 8) = eax;
                    *(esp_1 - 0xc) = ecx;
                    *(esp_1 - 0x10) = arg2;
                    *(esp_1 - 0x14) = ebx;
                    *(esp_1 - 0x18) = esp_1 - 0x14;
                    *(esp_1 - 0x1c) = arg4;
                    *(esp_1 - 0x20) = arg5;
                    *(esp_1 - 0x24) = arg6;
                    void* eax_2 = eax * 2 + 0x6beb753;
                    *(esp_1 - 0x28) = eax_2;
                    *(esp_1 - 0x2c) = ecx;
                    *(esp_1 - 0x30) = arg2;
                    *(esp_1 - 0x34) = ebx;
                    *(esp_1 - 0x38) = esp_1 - 0x34;
                    *(esp_1 - 0x3c) = arg4;
                    *(esp_1 - 0x40) = arg5;
                    *(esp_1 - 0x44) = arg6;
                    esp_1 -= 0x44;
                    *(eax_2 - 0x7e8cdfdf) += eax_2;
                    *(eax_2 - 0x55b87dde);
                    *(eax_2 - 0x55b87dde) &= eax_2;
                    bool c_3 = false;
                    
                    while (true)
                    {
                        *(ecx - 0x985b656) = *(ecx - 0x985b656) + 0x1a;
                        d = true;
                        
                        while (true)
                        {
                            ecx &= 0xa0;
                            void* temp19_1 = arg6;
                            arg6 += 1;
                            p = /* p = unimplemented  {inc edi} */;
                            z_2 = temp19_1 == 0xffffffff;
                            
                            if (temp19_1 + 1 < 0)
                            {
                                eflags = __sti(eflags_2);
                                void* eax_3;
                                
                                while (true)
                                {
                                    eax_3 = 0xe1;
                                    
                                    if (!p)
                                        break;
                                    
                                    eax_3 = *0x2ef67947;
                                    eflags = __sti(eflags);
                                }
                                
                                ebx = eax_3;
                                eax = *0x28f67947;
                                goto label_1df67;
                            }
                            
                            if (p)
                            {
                                char temp20_1 = *(arg6 - 0x56);
                                *(arg6 - 0x56) += 0x48;
                                c_3 = temp20_1 >= 0xb8;
                                break;
                            }
                            
                            *ebx[1] = *ebx[1] - *ecx[1];
                        }
                    }
                }
                else
                {
                    ecx_2 = ecx_3 - 1;
                    cond:1_1 = ecx_3 == 1;
                    
                    if (ecx_3 != 1)
                        /* undefined */
                }
            }
            
            label_1df8b:
            ecx_2 -= 1;
            p_1 = /* p_1 = unimplemented  {dec ecx} */;
        } while (!p_1);
        char temp9_1 = *(edi_1 - 0x63);
        *(edi_1 - 0x63) += 0x48;
        c_5 = temp9_1 >= 0xb8;
    }
}

int32_t __convention("regparm") sub_1eb6e(int32_t arg1, void* arg2, char* arg3, void* arg4 @ ebp, void* const arg5 @ esi, void* arg6 @ edi)
{
    void* eax_1 = arg1 - 1;
    void* var_4 = eax_1;
    char* var_8 = arg3;
    void* var_c = arg2;
    void* ebx;
    void* var_10 = ebx;
    int32_t* var_14 = &var_10;
    void* var_18 = arg4;
    void* const var_1c = arg5;
    void* var_20 = arg6;
    *(arg6 + 0x40) = eax_1;
    int32_t var_24 = 0x48b80b80;
    int32_t* esp = &var_24;
    bool c;
    *arg3 = RRCB(*arg3, 0xac, c);
    label_1eb7d:
    *(esp - 4) = eax_1 - 2;
    *(esp - 8) = arg3;
    *(esp - 0xc) = arg2;
    *(esp - 0x10) = ebx;
    *(esp - 0x14) = esp - 0x10;
    *(esp - 0x18) = arg4;
    *(esp - 0x1c) = arg5;
    *(esp - 0x20) = arg6;
    esp -= 0x20;
    eax_1 = *0xaab2c07e;
    
    while (true)
    {
        arg3 -= 1;
        *(eax_1 + (arg4 << 2) - 0x46);
        *(eax_1 - 0x3506feb8) &= arg4;
        *(arg4 + 0x20898049) += arg4;
        esp = *esp;
        
        while (true)
        {
            *(esp - 4) = arg3;
            esp -= 4;
            int32_t temp1_1 = *(ebx + 0x2184237f) ^ 0xff7bf679;
            *(ebx + 0x2184237f) = temp1_1;
            eax_1 = *0x8848a17e;
            bool c_1;
            bool z_2;
            bool s_2;
            
            if (!temp1_1)
            {
                char temp2_1 = *(arg5 + 0x2148e188);
                *(arg5 + 0x2148e188) |= eax_1;
                c_1 = false;
                z_2 = !(temp2_1 | eax_1);
                s_2 = (temp2_1 | eax_1) < 0;
                arg5 = 0x84860848;
                goto label_1eb35;
            }
            
            *(eax_1 + 0x74);
            *(eax_1 + 0x74) &= arg3;
            char temp4_1 = eax_1;
            eax_1 = temp4_1 - 7;
            c_1 = temp4_1 - 7 < temp4_1;
            bool z_1 = !(temp4_1 - 7);
            bool s_1 = temp4_1 - 7 < 0;
            bool o_1 = /* bool o_1 = unimplemented  {adc al, 0xf9} */;
            eax_1 = *0x61078001;
            
            if (z_1 || s_1 != o_1)
            {
                arg6 |= *(eax_1 - 0x53e63fb8);
                goto label_1eb7d;
            }
            
            arg3 -= 1;
            bool c_2;
            
            if (z_1 || arg3)
            {
                *(arg3 + 0x1dd18b29) -= 0x7f79f7b8;
                *(arg2 + 0x1dd18729) += eax_1;
                *(ebx + 0x1dd18329) -= 0x7f79f7b8;
                *(arg3 + arg4 + 0x49d3d0b1) += eax_1;
                char temp6_1 = *(arg2 - 0x2a);
                *(arg2 - 0x2a) += *arg3[1];
                c_2 = temp6_1 + *arg3[1] < temp6_1;
                label_1eae4:
                *(arg3 - 0x78) = arg4;
                int16_t eax_4 = eax_1 - 1 - *(arg4 - 0x2c2755d7);
                arg3[0xffffffcd] -= 0x48;
                *(arg2 - 0x6a) |= *eax_4[1];
                eax_4 = 0x81;
                int32_t eflags;
                int32_t eflags_1;
                char temp0_4;
                temp0_4 = __das(0x81, eflags);
                eax_4 = temp0_4;
                arg2 = eax_4;
                *(arg3 - 1);
                /* undefined */
            }
            
            arg5 = 0xbe80be80;
            *0x80860844 = eax_1;
            *0x80860840 = arg3;
            *0x8086083c = arg2;
            *0x80860838 = ebx;
            *0x80860834 = 0x80860838;
            *0x80860830 = arg4;
            *0x8086082c = 0xbe80be80;
            *0x80860828 = arg6;
            esp = 0x80860828;
            label_1eb45:
            
            if (s_1 == o_1)
            {
                while (true)
                {
                    eax_1 = 0xb8;
                    arg3 -= 1;
                    void* temp7_1 = eax_1;
                    eax_1 += 1;
                    
                    if (temp7_1 < 0xffffffff)
                    {
                        eax_1 = 0x48b67c5f + 0x7bfe6b07;
                        int32_t temp11_1 = *(arg3 + 0x49d3d0);
                        *(arg3 + 0x49d3d0) -= arg5;
                        c_2 = temp11_1 < arg5;
                        *(esp - 4) = 0xffffffd6;
                        goto label_1eae4;
                    }
                    
                    if (temp7_1 >= 0xffffffff)
                        /* undefined */
                    
                    int32_t temp9_1 = *(arg5 - 0x7b79f7b8);
                    *(arg5 - 0x7b79f7b8) &= arg6;
                    c_1 = false;
                    z_2 = !(temp9_1 & arg6);
                    s_2 = (temp9_1 & arg6) < 0;
                    label_1eb35:
                    arg3 -= 1;
                    
                    if (!z_2 && !arg3)
                    {
                        *(eax_1 + (arg3 << 1) - 0x1e7f79f8) &= arg6;
                        char temp5_1 = *(arg5 - 0x417f4180);
                        c_1 = temp5_1 < 0x60;
                        s_1 = temp5_1 - 0x60 < 0;
                        o_1 = temp5_1 - 0x60;
                        goto label_1eb45;
                    }
                    
                    if (!z_2 && !s_2)
                    {
                        arg2 = 0xaa;
                        break;
                    }
                    
                    arg5 = 0x7c60be80;
                    *(esp - 4) = eax_1;
                    esp -= 4;
                }
                
                break;
            }
        }
    }
}

int32_t sub_1ec11(void* arg1, void* arg2, void* arg3, void* arg4, char* arg5, void* arg6)
{
    void* const __return_addr_2 = __return_addr;
    void* esi = arg1;
    void* ebp = arg2;
    void* ebx = arg3;
    void* edx = arg4;
    void* eax = arg6;
    char temp0 = *(eax + 0x48);
    *(eax + 0x48) = arg5;
    char* ecx;
    ecx = temp0;
    arg6 = eax;
    arg5 = ecx;
    arg4 = edx;
    arg3 = ebx;
    int32_t* arg_c = &arg3;
    arg2 = ebp;
    arg1 = esi;
    __return_addr = __return_addr_2;
    void* const* __return_addr_1 = &__return_addr;
    bool p;
    bool c_2;
    
    if (p)
    {
        ebx u>>= 0x81;
        char* temp1_1 = ecx;
        ecx &= &__return_addr;
        c_2 = false;
        
        if (!(temp1_1 & &__return_addr) || (temp1_1 & &__return_addr) < 0)
            goto label_1eb49;
    }
    else
    {
        bool z_2;
        bool s;
        bool s_2;
        bool o;
        bool o_1;
        
        if (s != o)
        {
            if (!s)
            {
                __return_addr_1 = __return_addr;
                goto label_1eb97;
            }
            
            if (!p)
                /* jump -> *(eax + 0x8848a17e) */
            
            while (true)
            {
                eax = *0x8848a17e;
                bool z_1;
                bool s_1;
                bool cond:5;
                
                if (!cond:5)
                {
                    *(eax + 0x74);
                    *(eax + 0x74) &= ecx;
                    char temp13_1 = eax;
                    eax = temp13_1 - 7;
                    c_2 = temp13_1 - 7 < temp13_1;
                    z_2 = !(temp13_1 - 7);
                    s_2 = temp13_1 - 7 < 0;
                    o_1 = /* o_1 = unimplemented  {adc al, 0xf9} */;
                    label_1ebae:
                    eax = *0x61078001;
                    
                    if (z_2 || s_2 != o_1)
                    {
                        __return_addr_2 |= *(eax - 0x53e63fb8);
                        label_1eb7d:
                        *(__return_addr_1 - 4) = eax - 2;
                        *(__return_addr_1 - 8) = ecx;
                        *(__return_addr_1 - 0xc) = edx;
                        *(__return_addr_1 - 0x10) = ebx;
                        *(__return_addr_1 - 0x14) = __return_addr_1 - 0x10;
                        *(__return_addr_1 - 0x18) = ebp;
                        *(__return_addr_1 - 0x1c) = esi;
                        *(__return_addr_1 - 0x20) = __return_addr_2;
                        __return_addr_1 -= 0x20;
                        eax = *0xaab2c07e;
                        goto label_1eb83;
                    }
                    
                    ecx -= 1;
                    bool c_1;
                    
                    if (z_2 || ecx)
                    {
                        *(ecx + 0x1dd18b29) -= 0x7f79f7b8;
                        int32_t eax_1 = eax;
                        *(edx + 0x1dd18729) += eax_1;
                        *(ebx + 0x1dd18329) -= 0x7f79f7b8;
                        eax = eax_1;
                        *(ecx + ebp + 0x49d3d0b1) += eax;
                        char temp15_1 = *(edx - 0x2a);
                        *(edx - 0x2a) += *ecx[1];
                        c_1 = temp15_1 + *ecx[1] < temp15_1;
                    }
                    else
                    {
                        esi = 0xbe80be80;
                        *0x80860844 = eax;
                        *0x80860840 = ecx;
                        *0x8086083c = edx;
                        *0x80860838 = ebx;
                        *0x80860834 = 0x80860838;
                        *0x80860830 = ebp;
                        *0x8086082c = 0xbe80be80;
                        *0x80860828 = __return_addr_2;
                        __return_addr_1 = 0x80860828;
                        label_1eb45:
                        
                        if (s_2 != o_1)
                            goto label_1eb97;
                        
                        label_1eb47:
                        eax = 0xb8;
                        label_1eb49:
                        ecx -= 1;
                        void* temp2_1 = eax;
                        eax += 1;
                        
                        if (temp2_1 >= 0xffffffff)
                        {
                            if (temp2_1 >= 0xffffffff)
                                break;
                            
                            int32_t temp6_1 = *(esi - 0x7b79f7b8);
                            *(esi - 0x7b79f7b8) &= __return_addr_2;
                            c_2 = false;
                            z_1 = !(temp6_1 & __return_addr_2);
                            s_1 = (temp6_1 & __return_addr_2) < 0;
                            goto label_1eb35;
                        }
                        
                        eax = 0x48b67c5f + 0x7bfe6b07;
                        int32_t temp8_1 = *(ecx + 0x49d3d0);
                        *(ecx + 0x49d3d0) -= esi;
                        c_1 = temp8_1 < esi;
                        *(__return_addr_1 - 4) = 0xffffffd6;
                    }
                    
                    *(ecx - 0x78) = ebp;
                    int16_t eax_3 = eax - 1 - *(ebp - 0x2c2755d7);
                    ecx[0xffffffcd] -= 0x48;
                    *(edx - 0x6a) |= *eax_3[1];
                    eax_3 = 0x81;
                    int32_t eflags;
                    int32_t eflags_1;
                    char temp0_4;
                    temp0_4 = __das(0x81, eflags);
                    eax_3 = temp0_4;
                    edx = eax_3;
                    *(ecx - 1);
                    /* undefined */
                }
                
                char temp11_1 = *(esi + 0x2148e188);
                *(esi + 0x2148e188) |= eax;
                c_2 = false;
                z_1 = !(temp11_1 | eax);
                s_1 = (temp11_1 | eax) < 0;
                esi = 0x84860848;
                label_1eb35:
                ecx -= 1;
                
                if (!z_1 && !ecx)
                {
                    *(eax + (ecx << 1) - 0x1e7f79f8) &= __return_addr_2;
                    char temp14_1 = *(esi - 0x417f4180);
                    c_2 = temp14_1 < 0x60;
                    s_2 = temp14_1 - 0x60 < 0;
                    o_1 = temp14_1 - 0x60;
                    goto label_1eb45;
                }
                
                if (z_1 || s_1)
                {
                    esi = 0x7c60be80;
                    *(__return_addr_1 - 4) = eax;
                    __return_addr_1 -= 4;
                    goto label_1eb47;
                }
                
                edx = 0xaa;
                label_1eb83:
                ecx -= 1;
                *(eax + (ebp << 2) - 0x46);
                *(eax - 0x3506feb8) &= ebp;
                *(ebp + 0x20898049) += ebp;
                __return_addr_1 = *__return_addr_1;
                label_1eb97:
                *(__return_addr_1 - 4) = ecx;
                __return_addr_1 -= 4;
                int32_t temp9_1 = *(ebx + 0x2184237f) ^ 0xff7bf679;
                *(ebx + 0x2184237f) = temp9_1;
                cond:5 = !temp9_1;
            }
            
            goto label_1eb8e;
        }
        
        char temp3_1 = *eax[1];
        *eax[1] -= 1;
        ecx -= 1;
        
        if (temp3_1 == 1 || ecx)
        {
            eax = 0xac19c048;
            goto label_1eb7d;
        }
        
        ecx -= 1;
        char temp5_1 = ecx[0xffffff97];
        ecx[0xffffff97] -= 0x48;
        bool p_1 = /* bool p_1 = unimplemented  {sub byte [ecx-0x69], 0x48} */;
        z_2 = temp5_1 == 0x48;
        s_2 = temp5_1 - 0x48 < 0;
        o_1 = temp5_1 - 0x48;
        ecx[0x60] = *eax[1];
        
        if (s_2)
        {
            label_1eb8e:
            /* undefined */
        }
        
        if (p_1)
            /* tailcall */
            return sub_1eb6e(eax, edx, ecx, ebp, esi, __return_addr_2);
        
        if (!z_2)
        {
            c_2 = true;
            goto label_1ebae;
        }
    }
    void* eax_5;
    int32_t ecx_3;
    int16_t edx_3;
    eax_5 = 0x88657411();
    *(eax_5 - 0x3fb75df5);
    *(ebx - 0x5f) = *(esi - 1)[1];
    *(ecx_3 + 0x6e) -= 0xf6;
    *ebx[1] = *edx_3[1];
    breakpoint();
}

int32_t __convention("fastcall") sub_1ee93(int32_t arg1)
{
    int32_t edx;
    edx = 0x80;
    /* undefined */
}

int32_t __convention("regparm") sub_1eecd(int16_t arg1, int32_t, char* arg3, void* arg4 @ ebp, int32_t arg5 @ esi, int32_t arg6 @ edi)
{
    __int1();
    *0xea864fa5 = ROLB(*0xea864fa5, 0);
    arg1 += 0x45;
    *(arg4 - 0x80) |= 0xbe;
    *(arg5 - 0x1579b05e);
    arg1 += 0x55;
    char temp0 = *(arg4 - 0x38);
    *(arg4 - 0x38) = temp0 + 9;
    bool c = /* bool c = unimplemented  {sbb byte [ebp-0x38], 0xf7} */;
    int32_t eflags;
    int32_t eflags_1;
    char temp0_1;
    char temp1;
    temp0_1 = __aas(arg1, *arg1[1], eflags);
    arg1 = temp0_1;
    *arg1[1] = temp1;
    
    if (temp0 + 9 && !c)
        arg3[0xffffff83] += 0x47;
    
    int32_t ebx;
    int32_t var_4 = ebx;
    *arg3 ^= arg1;
    arg3[0xffffff90];
    int32_t var_8 = ebx;
    *arg3 ^= arg1;
    /* undefined */
}

int32_t __convention("regparm") sub_1ef08(int32_t arg1, int32_t arg2, int32_t arg3, void* arg4 @ ebp)
{
    bool z;
    
    if (z || arg3 == 1)
        arg1 -= 0x6a417ffe;
    
    *0x4d80f954 += arg1;
    *(arg4 - 0x14) += arg1;
    arg1 = 0x85;
    /* undefined */
}

int32_t __convention("regparm") sub_1ef2f(int32_t arg1, int32_t arg2, int16_t arg3, void* arg4 @ ebp, int32_t arg5 @ edi)
{
    *(arg4 - 0x73) += arg1;
    char temp0 = arg2;
    arg2 = *arg3[1];
    *arg3[1] = temp0;
    *((arg1 << 1) + 0x804d80f9) += arg1;
    char temp0_1 = arg2;
    arg2 = *arg3[1];
    *arg3[1] = temp0_1;
    *((arg2 << 1) + 0xcb5d80f9) += arg1;
    *(arg5 - 1);
    *0x4f89be07;
    /* undefined */
}

int32_t __convention("fastcall") sub_1ef8b(int32_t arg1, int32_t arg2, int32_t arg3 @ ebp, int32_t arg4 @ esi)
{
    int32_t esp_1 = 0x41806180;
    void* eax;
    eax = 0xb4;
    char* temp0 = *(arg3 + (eax << 2) - 0x16);
    *(arg3 + (eax << 2) - 0x16) = arg1;
    char* ecx = temp0;
    *0xe1832280;
    *0xe1832280 = ROLD(*0xe1832280, 0x85);
    bool c = /* bool c = unimplemented  {rol dword [0xffffffffe1832280], 0x85} */;
    *(eax - 0x24e2ff3b) = 0x41806180;
    int32_t* eax_1 = eax + 0x15cce22b;
    bool c_1 = /* bool c_1 = unimplemented  {sbb eax, 0xea331dd5} */;
    int32_t eflags;
    char temp0_1;
    char temp1_1;
    temp0_1 = __aad_immb(0xe, eax_1, *eax_1[1]);
    eax_1 = temp0_1;
    *eax_1[1] = temp1_1;
    
    if (!(eax + 0x15cce22b) || c_1)
    {
        *ecx -= 0x80;
        void* edi = *0x41806180;
        *0x41806184;
        *0x41806188;
        char* ebx_1 = *0x41806190;
        int32_t edx = *0x41806194;
        int32_t* ecx_1 = *0x41806198;
        char eax_2 = *0x4180619c;
        ecx_1[-0x14] -= 0x4c;
        int32_t temp4 = *(edi - 0x7f);
        *(edi - 0x7f) -= 0xf;
        *ecx_1 += 1;
        *(edx - 0x57417f4f) = *(edx - 0x57417f4f) + *ebx_1[1];
        *ebx_1 += eax_2;
        *0x4180619c = edx - 1;
        *0x3c0f182 -= 0xea;
        /* undefined */
    }
    
    char ebx;
    *0x1dd51ddb += ebx;
    void* ebp_2 = arg3 ^ arg2;
    bool c_4 = false;
    bool z_1 = arg3 == arg2;
    int32_t eflags_1;
    char temp0_3;
    char temp1_2;
    temp0_3 = __aad_immb(0xe, eax_1, *eax_1[1]);
    eax_1 = temp0_3;
    *eax_1[1] = temp1_2;
    int32_t* temp6_1;
    bool c_3;
    
    for (; z_1 || c_4; z_1 = !(temp6_1 - 0xed5ea33))
    {
        arg4 += 1;
        *(ebp_2 - 0x80) = *(ebp_2 - 0x80) + 0x42;
        *0xbc70719c &= 0x80;
        *(esp_1 - 4) = ecx;
        esp_1 -= 4;
        ecx[0xfffffff0] -= 0x4c;
        char* temp0_2 = *(ebp_2 + (eax_1 << 2) - 0x16);
        *(ebp_2 + (eax_1 << 2) - 0x16) = ecx;
        ecx = temp0_2;
        *0xe1842280 = ROLD(*0xe1842280, 0xb4);
        *(arg2 - 0x7a);
        int32_t temp5_1 = *eax_1;
        *eax_1 -= 0x2ae224e3;
        c_3 = temp5_1 >= 0x2ae224e3;
        temp6_1 = eax_1;
        eax_1 = temp6_1 - 0xed5ea33;
        c_4 = /* c_4 = unimplemented  {sbb eax, 0xed5ea33} */;
    }
    
    /* undefined */
}

int32_t __convention("regparm") sub_1efda(int32_t arg1, int32_t arg2 @ esi, int32_t arg3 @ edi)
{
    /* unimplemented  {enter 0xff7, 0x75} */
    *0xc0f1c241 = arg1;
    *(arg3 + 0xea854c);
    *(arg2 + 0x4c9cbe80);
    /* undefined */
}

int32_t __convention("regparm") sub_1f02a(int32_t arg1, int32_t arg2 @ ebp, int32_t arg3 @ esi)
{
    /* unimplemented  {enter 0xff7, 0x75} */
    *0xf5c241 = arg1;
    *(arg2 + (arg1 << 2) - 0x16);
    *0x2d80f944 += arg1;
    *(arg3 + 0x4c88be80);
    /* undefined */
}

int32_t sub_1f04c()
{
    /* undefined */
}

int32_t __convention("regparm") sub_1f04d(int32_t arg1, int32_t arg2, int32_t* arg3, void* arg4 @ ebp, char* arg5 @ esi, int32_t* arg6 @ edi)
{
    *arg6;
    char* ebx;
    char* eax_1 = arg1 + *(ebx + 0xea854c) + 0x2d80f944;
    arg5[0x180bcb0];
    label_1f065:
    void* esp;
    *(esp - 4) = arg3;
    esp -= 4;
    char temp1_1 = *(arg3 - 0x53);
    *(arg3 - 0x53) -= 0x18;
    int16_t ss;
    
    if (!(temp1_1 - 0x18))
    {
        char temp5_1;
        
        do
        {
            *(arg6 - 0x75);
            char* temp0_1 = esp;
            int32_t* esp_1 = eax_1;
            arg6 += 2;
            *0x86791647 = temp0_1;
            __int1();
            *arg3 = *esp_1;
            esp = &esp_1[1];
            char temp3_1 = *temp0_1 & 0x56;
            *temp0_1 = temp3_1;
            
            if (temp3_1 >= 0)
            {
                *0x2d80f944 += temp0_1;
                void* esi_1 = &arg5[4];
                void* ecx_4 = arg3 - 1;
                
                if (*arg5 != *arg6 && !ecx_4)
                {
                    *ebx += temp0_1;
                    *(esp - 5) = arg2;
                    *0x4300f582 -= 0xea;
                    eax_1 = 0x84;
                    /* undefined */
                }
                
                *eax_1[1] = 0x87;
                void* esp_5 = esp - 2;
                *0xe1832280;
                *0xe1832280 = ROLD(*0xe1832280, 0x85);
                bool c_3 = /* bool c_3 = unimplemented  {rol dword [0xffffffffe1832280], 0x85} */;
                *(eax_1 - 0x24e2ff3b) = esp_5;
                int32_t* eax_2 = eax_1 + 0x15cce22b;
                bool c_4 = /* bool c_4 = unimplemented  {sbb eax, 0xea331dd5} */;
                int32_t eflags_2;
                char temp0_5;
                char temp1_3;
                temp0_5 = __aad_immb(0xe, eax_2, *eax_2[1]);
                eax_2 = temp0_5;
                *eax_2[1] = temp1_3;
                
                if (!(eax_1 + 0x15cce22b) || c_4)
                {
                    *ecx_4 -= 0x80;
                    void* edi_4 = *esp_5;
                    *(esp_5 + 4);
                    *(esp_5 + 8);
                    char* ebx_2 = *(esp_5 + 0x10);
                    int32_t edx_2 = *(esp_5 + 0x14);
                    int32_t* ecx_5 = *(esp_5 + 0x18);
                    char eax_3 = *(esp_5 + 0x1c);
                    ecx_5[-0x14] -= 0x4c;
                    int32_t temp11 = *(edi_4 - 0x7f);
                    *(edi_4 - 0x7f) -= 0xf;
                    *ecx_5 += 1;
                    *(edx_2 - 0x57417f4f) = *(edx_2 - 0x57417f4f) + *ebx_2[1];
                    *ebx_2 += eax_3;
                    *(esp_5 + 0x1c) = edx_2 - 1;
                    *0x3c0f182 -= 0xea;
                    /* undefined */
                }
                
                *0x1dd51ddb += ebx;
                void* ebp_1 = arg4 ^ arg2;
                bool c_2 = false;
                bool z_3 = arg4 == arg2;
                int32_t eflags_1;
                char temp0_4;
                char temp1_2;
                temp0_4 = __aad_immb(0xe, eax_2, *eax_2[1]);
                eax_2 = temp0_4;
                *eax_2[1] = temp1_2;
                int32_t* temp13_1;
                bool c_1;
                
                for (; z_3 || c_2; z_3 = !(temp13_1 - 0xed5ea33))
                {
                    esi_1 += 1;
                    *(ebp_1 - 0x80) = *(ebp_1 - 0x80) + 0x42;
                    *0xbc70719c &= 0x80;
                    *(esp_5 - 4) = ecx_4;
                    esp_5 -= 4;
                    *(ecx_4 - 0x10) -= 0x4c;
                    void* temp0_3 = *(ebp_1 + (eax_2 << 2) - 0x16);
                    *(ebp_1 + (eax_2 << 2) - 0x16) = ecx_4;
                    ecx_4 = temp0_3;
                    *0xe1842280 = ROLD(*0xe1842280, 0xb4);
                    *(arg2 - 0x7a);
                    int32_t temp12_1 = *eax_2;
                    *eax_2 -= 0x2ae224e3;
                    c_1 = temp12_1 >= 0x2ae224e3;
                    temp13_1 = eax_2;
                    eax_2 = temp13_1 - 0xed5ea33;
                    c_2 = /* c_2 = unimplemented  {sbb eax, 0xed5ea33} */;
                }
                
                /* undefined */
            }
            
            __int1();
            *arg6 -= 0x4a;
            eax_1 = 0x81;
            int32_t eflags;
            char temp0_2;
            temp0_2 = __das(0x81, eflags);
            eax_1 = temp0_2;
            *arg6 -= 0x85;
            int32_t temp4_1 = *(ebx - 0x7b2f74d1);
            *(ebx - 0x7b2f74d1) = ROLD(*(ebx - 0x7b2f74d1), 1);
            arg3 = ss - 1;
            
            if (!ROLD(temp4_1, 1) || arg3)
            {
                *arg3 -= 0x80;
                goto label_1f065;
            }
            
            eax_1[0xffffff88] ^= 0xe1;
            temp5_1 = *eax_1;
            *eax_1 &= 0x86;
            arg3 -= 1;
        } while (!(temp5_1 & 0x86) || arg3);
        eax_1 = &eax_1[1];
        *(esp - 4) = eax_1;
        *(esp - 8) = arg3;
        *(esp - 0xc) = arg2;
        *(esp - 0x10) = ebx;
        *(esp - 0x14) = esp - 0x10;
        *(esp - 0x18) = arg4;
        *(esp - 0x1c) = arg5;
        *(esp - 0x20) = arg6;
        esp -= 0x20;
        char temp7_1 = eax_1[0xffffff80];
        eax_1[0xffffff80] += *eax_1[1];
        
        if (temp7_1 == -(*eax_1[1]) || (arg3 & 0xffffffcf) != 1)
        {
            *0xf5c241 = (eax_1 - 0x750ff7c8);
            *(arg4 + ((eax_1 - 0x750ff7c8) << 2) - 0x16);
            *0x2d80f944 += (eax_1 - 0x750ff7c8);
            arg5[0x4c88be80];
            /* undefined */
        }
        
        arg5 = 0xebc1be80;
    }
    
    *arg6 += 0x36;
    ebx = 0x5f;
    eax_1 = eax_1 + 0x3d;
    *arg5 += eax_1;
    char temp2 = *(arg4 + 0x11);
    *(arg4 + 0x11) -= 0x89;
    *(esp - 4) = ss;
    
    if (temp2 + 0x77 < 0)
    {
        eax_1[0x80d1f72f] = eax_1[0x80d1f72f] + eax_1;
        /* undefined */
    }
    
    *(esp - 4);
    *esp;
    void* ebp = *(esp + 4);
    *(esp + 0xc);
    *(esp + 0x10);
    *(esp + 0x14);
    int32_t result = *(esp + 0x18);
    int16_t es;
    *(esp + 0x18) = es;
    int32_t edx_1;
    *edx_1[1] = 0x69;
    *(ebp + 0x5f);
    return result;
}

int32_t __convention("fastcall") sub_1f0d0(int32_t arg1, char arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int16_t arg9, int32_t arg10) __pure
{
    *arg1[1] = arg2;
    int32_t edx;
    *edx[1] = 0x89;
    return arg8;
}

int32_t __convention("fastcall") sub_1f0de(char arg1)
{
    /* undefined */
}

void __convention("regparm") sub_1f0ea(int32_t arg1, int32_t arg2, char arg3, void* arg4 @ edi, int32_t arg5, int32_t arg6, int32_t arg7, int32_t* arg8, int32_t arg9, int32_t arg10) __noreturn
{
    int32_t eflags;
    int32_t eflags_1;
    int32_t eip;
    eip = __into(eflags);
    bool c = /* bool c = unimplemented  {sbb eax, 0x81f1a6} */;
    *(arg4 - 0x4a) = *(arg4 - 0x4a) - arg3;
    *arg8 -= 0xf95fd0c4;
    breakpoint();
}

int32_t __convention("fastcall") sub_1f10f(int32_t arg1, int16_t arg2, char* arg3 @ esi, void* arg4 @ edi)
{
    *(arg4 - 0x38) += *arg2[1];
    *arg4;
    int32_t result;
    *result[1] = 0x83;
    arg2 = *arg1[1];
    *0x6d80f94c += arg1;
    *(__return_addr - 0x4a);
    int32_t ebx;
    *(__return_addr - 7) = ebx;
    result = *arg3;
    return result;
}

int32_t __convention("fastcall") sub_1f12e(char arg1)
{
    /* undefined */
}

int32_t __convention("regparm") sub_1f18b(char arg1, uint16_t arg2, int32_t arg3, char arg4 @ ebp, char* arg5 @ edi, void* arg6, int32_t arg7, int32_t* arg8, int32_t arg9, void* const arg10)
{
    int32_t eflags;
    bool z;
    
    if (z || arg3 != 1)
    {
        int16_t* edi_2;
        int16_t temp0_2;
        temp0_2 = __insd(arg5, arg2, eflags);
        *edi_2 = temp0_2;
        /* undefined */
    }
    
    *0xcd80f95c += (arg3 - 1);
    /* unimplemented  {enter 0x3ff7, 0x79} */
    *arg5 = arg1;
    int16_t es;
    uint32_t var_4 = es;
    __int1();
    *(arg3 - 1) += (arg3 - 1);
    char* ecx;
    *ecx[1] = *(arg3 - 1)[1] | 0x80;
    *ecx[1] = arg4;
    *arg8 -= 0xf95fd0d5;
    void* const eax;
    eax = arg10 - 0x40;
    *var_4 += eax;
    *(arg6 - 0x3a) -= 0xf5;
    int16_t gs;
    *(var_4 - 0x38) += *gs[1];
    *var_4;
    eax = __in_al_dx(gs, eflags);
    *(eax + 0x4c0d00ea) |= 0xf9;
    *(arg6 + 0x44) -= 0x47;
    *__return_addr += eax;
    arg10 = __return_addr;
    *(arg6 - 0x38) -= 0xf7;
    /* undefined */
}

int32_t j_sub_1f18b(void* arg6, int32_t arg7, int32_t* arg8, int32_t arg9, void* const arg10)
{
    char arg1;
    int32_t arg3;
    uint16_t arg2;
    char arg4;
    char* arg5;
    /* tailcall */
    return sub_1f18b(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
}

int32_t sub_1f201(char* arg1 @ edi)
{
    __int1();
    *arg1 = ROLB(*arg1, 0x88);
    /* undefined */
}

int32_t __convention("fastcall") sub_1f213(void* arg1, char* arg2 @ esi, char* arg3 @ edi)
{
    bool c;
    *(arg1 + (arg3 << 3) - 0x80) = RRCB(*(arg1 + (arg3 << 3) - 0x80), 0xc1, c);
    bool c_5 = /* bool c_5 = unimplemented  {rcr byte [ecx+edi*8-0x80], 0xc1} */;
    int16_t gs;
    void* edx = gs;
    *0x6180f92c = *0x6180f92c + 0x42;
    *(edx - 0x600f7e28) -= edx;
    char temp1 = *arg2;
    char temp2 = *arg3;
    bool p = /* bool p = unimplemented  {cmpsb byte [esi], [edi]} */;
    bool a = /* bool a = unimplemented  {cmpsb byte [esi], [edi]} */;
    void* edi = &arg3[1];
    __int1();
    int32_t eax;
    *eax[1] = (temp1 - temp2 < 0 ? 1 : 0) << 7 | (temp1 == temp2 ? 1 : 0) << 6 | (a ? 1 : 0) << 4
        | (p ? 1 : 0) << 2 | (temp1 < temp2 ? 1 : 0);
    *(arg1 - 0x3e15b9d9) += eax;
    int32_t ebx;
    ebx = 0xc6;
    char temp4 = *(edi + 0x5f);
    *(edi + 0x5f) -= 7;
    bool c_2 = temp4 >= 7;
    bool p_1 = /* bool p_1 = unimplemented  {add byte [edi+0x5f], 0xf9} */;
    bool a_1 = /* bool a_1 = unimplemented  {add byte [edi+0x5f], 0xf9} */;
    bool d;
    __return_addr = (temp4 - 7 ? 1 : 0) << 0xb | (d ? 1 : 0) << 0xa | (temp4 - 7 < 0 ? 1 : 0) << 7
        | (temp4 == 7 ? 1 : 0) << 6 | (a_1 ? 1 : 0) << 4 | (p_1 ? 1 : 0) << 2 | (c_2 ? 1 : 0);
    *(arg1 + (edi << 3) - 0x80) = RRCB(*(arg1 + (edi << 3) - 0x80), 0xc1, c_2);
    bool c_3 = /* bool c_3 = unimplemented  {rcr byte [ecx+edi*8-0x80], 0xc1} */;
    char temp6 = *0x6184f92c;
    *0x6184f92c = temp6 + 0x72;
    /* unimplemented  {sbb byte [0x6184f92c], 0x8e} */
    
    if (!(temp6 + 0x72) || arg1 != 1)
        /* undefined */
    
    /* undefined */
}

int32_t __convention("regparm") sub_1f268(int32_t arg1, int32_t arg2, void* arg3, int32_t arg4 @ ebp, char* arg5 @ esi, char* arg6, char arg7, int16_t arg8, int16_t arg9, int32_t arg10)
{
    int32_t fsbase;
    *(fsbase + arg3 + (__return_addr << 3) - 0x80);
    *(fsbase + arg3 + (__return_addr << 3) - 0x80) =
        RORD(*(fsbase + arg3 + (__return_addr << 3) - 0x80), 0x61);
    bool c = /* bool c = unimplemented  {ror dword [fs:ecx+edi*8-0x80], 0x61} */;
    *(arg3 - 0x7649b04a) = *(arg3 - 0x7649b04a) + arg3;
    *(arg3 + (arg6 << 3) - 0x80) = RRCD(*(arg3 + (arg6 << 3) - 0x80), 0xc1, true);
    bool c_1 = /* bool c_1 = unimplemented  {rcr dword [ecx+edi*8-0x80], 0xc1} */;
    int16_t gs;
    void* edx = gs;
    *0x6188f92c = *0x6188f92c + 0x42;
    *(edx - 0x600f7e28) -= edx;
    char temp2 = *arg5;
    char temp3 = *arg6;
    bool p = /* bool p = unimplemented  {cmpsb byte [esi], [edi]} */;
    bool a = /* bool a = unimplemented  {cmpsb byte [esi], [edi]} */;
    void* edi_2 = &arg6[1];
    __int1();
    char eax = (temp2 - temp3 < 0 ? 1 : 0) << 7 | (temp2 == temp3 ? 1 : 0) << 6 | (a ? 1 : 0) << 4
        | (p ? 1 : 0) << 2 | (temp2 < temp3 ? 1 : 0);
    *(arg3 - 0x3e15b9d9) += eax;
    int32_t ebx;
    ebx = 0xc6;
    *(edi_2 + 0x5f) -= 7;
    arg3 ^= eax;
    arg3 -= 0x74;
    /* undefined */
}

int32_t __convention("regparm") sub_1f2b4(int32_t arg1)
{
    int32_t eflags;
    int32_t eflags_1;
    int32_t eip;
    eip = __into(eflags);
    /* undefined */
}

int32_t __convention("regparm") sub_1f2bd(int32_t arg1, int32_t arg2, int16_t arg3, int32_t* arg4 @ edi)
{
    char temp0_1 = COMBINE(arg2, arg1) / *(arg4 + 0x77);
    *(arg4 + 0x77);
    char ebx;
    *arg3[1] = ebx;
    *arg4 <<= 0x5f;
    arg3 = arg3 + temp0_1;
    arg3 -= 0x74;
    /* undefined */
}

void __convention("regparm") sub_1f2d4(int32_t, int32_t* arg2) __noreturn
{
    *arg2 -= 0xbe80d0a3;
    trap(0xd);
}

int32_t __convention("regparm") sub_1fd0f(int32_t* arg1, int32_t arg2, char* arg3, void* arg4 @ esi, int32_t* arg5 @ edi)
{
    arg1 += 6;
    *arg3 &= 0x80;
    void* ebp = *0x2180060c;
    void** esp = 0x21800610;
    void* ebx;
    
    while (true)
    {
        arg3[0xfffffff0] -= 0x4c;
        *(arg5 - 0x73);
        arg3[0xffffffcf] -= *ebx[1];
        arg3[0xffffff88] = *arg2[1];
        arg5 += 2;
        arg3[0xffffff81];
        arg1 = (arg1 - 1) * *arg4;
        void** temp2_1 = esp;
        esp = temp2_1 + arg3;
        bool o_1 = /* bool o_1 = unimplemented  {adc esp, ecx} */;
        
        if (temp2_1 + arg3 && arg3 != 1)
        {
            if (!o_1)
                goto label_1fd62;
            
            arg3[0xffffff9e];
            arg5 += 1;
            *(esp - 4) = esp;
            esp -= 4;
            *(arg1 + 1) &= arg2;
            arg4 += 1;
            *(arg4 + 0x48a62180);
            *(arg1 + 1);
            arg3 = *(arg1 + 1) * 0xa5be8081;
            bool c_3 = /* bool c_3 = unimplemented  {imul ecx, dword [eax], 0xa5be8081} */;
            *(arg3 - 0x38) = ebp;
            int32_t temp1_2 = COMBINE(arg2, arg1) % *arg5;
            arg1 = COMBINE(arg2, arg1) / *arg5;
            arg2 = temp1_2;
            bool c_2;
            
            if (!c_3)
            {
                *(arg4 - 0x80) = *(arg4 - 0x80) + arg1;
                arg4 = 0x48c02180;
                *(arg3 + 8) = ebp;
                int32_t temp7_1 = *(arg1 - 0x76b74042);
                *(arg1 - 0x76b74042) += 0x3ff7c869;
                c_2 = temp7_1 >= 0xc0083797;
            }
            else
            {
                arg4 += 1;
                label_1fd62:
                *(arg4 + 0x48c02180);
                *arg1;
                arg3 = *arg1 * 0xbfbe8081;
                c_2 = /* c_2 = unimplemented  {imul ecx, dword [eax], 0xbfbe8081} */;
                *(arg3 - 0x38) = ebp;
                int32_t temp1_1 = COMBINE(arg2, arg1 - 1) % *arg5;
                arg1 = COMBINE(arg2, arg1 - 1) / *arg5;
                arg2 = temp1_1;
            }
            
            if (!c_2)
                arg1 = 0x82;
            
            arg1 &= esp;
            break;
        }
        
        *(arg3 - 1) -= 0x82;
        int32_t temp3_1 = ROLD(*(ebx - 0x4d2f07d7), 1);
        *(ebx - 0x4d2f07d7) = temp3_1;
        
        if (!temp3_1 || arg3 != 2)
            /* undefined */
        
        char temp6_1 = arg3[0x5d];
        int16_t ds_1;
        arg3 = __lds_gprz_memp(*(arg3 - 0x83));
        
        if (temp6_1 + 0x50 >= 0)
        {
            arg4 = 0x4986be80;
            arg3[0xffffff90];
            *arg3;
            *arg3 &= 0xe0;
            break;
        }
        
        if (!(temp6_1 + 0x50))
            goto label_1fcd6;
        
        arg1 &= esp;
    }
    
    int16_t es;
    *(esp - 4) = es;
    esp -= 4;
    *arg3 &= 8;
    
    while (true)
    {
        *(esp - 4) = es;
        esp -= 4;
        *arg3 &= 0xc0;
        ebp = *esp;
        arg3[0xfffffff0] += 0x46;
        *(arg5 - 0x7f) -= 0x16;
        *arg2 += arg1;
        arg1 ^= 0xe0;
        *(arg1 - 0x7ffefc16) += arg1;
        ebx = 0xf0;
        arg4 += 1;
        *arg3 -= 0x10;
        arg5 += 1;
        arg2 = 0xbab88968;
        arg3[0xffffff80] -= *ebx[1];
        __int1();
        *arg3 += 1;
        void** temp0_7 = &esp[1];
        esp = arg3;
        arg1 = temp0_7 - 1;
        arg3[0xffffffe0] = *arg2[1];
        bool o_3;
        
        if (temp0_7 - 1 >= 0)
        {
            arg1 -= 1;
            *arg1 ^= ebx;
            arg4 += 1;
            *arg3 &= 0xf0;
            esp = 0x6040180;
            label_1fc5a:
            char i;
            
            do
            {
                *arg3 &= 0x80;
                ebp = *esp;
                esp = &esp[1];
                i = arg3[0xffffff80];
                arg3[0xffffff80] -= 0x4c;
            } while (i != 0x4c && i < 0x4c);
            
            int32_t eflags;
            int32_t eflags_1;
            char temp0_5;
            temp0_5 = __daa(arg1, eflags);
            arg1 = temp0_5;
            eflags = __sti(eflags_1);
            arg3[0x40] = arg3;
            
            if (i - 0x4c >= 0)
            {
                arg1 = 0xe1;
                arg3 -= 1;
                
                if (arg5 == arg2 || !arg3)
                {
                    *arg3 -= 0xffffff85;
                    *(arg1 - 0x5fb86edd) = ROLB(*(arg1 - 0x5fb86edd), 1);
                    arg5 += 1;
                    *(esp - 4) = esp;
                    esp -= 4;
                    arg1 -= 1;
                    *arg1 ^= ebx;
                    arg4 += 1;
                    break;
                }
            }
            
            int32_t temp17_1 = *(ebx - 0x77b77830);
            *(ebx - 0x77b77830) -= arg3;
            o_3 = temp17_1 + -(arg3);
        }
        else
        {
            int32_t temp15_1 = *(&arg1[arg2 * 2] + 0x47a047a9);
            *(&arg1[arg2 * 2] + 0x47a047a9) -= arg1;
            
            if (temp15_1 > arg1)
            {
                *arg3 -= 0xffffff84;
                arg3[0x7f47a047] u>>= 1;
                *(ebx - 7) = -(*(ebx - 7));
            }
            else
            {
                ebx = *esp;
                esp = &esp[1];
            }
            
            arg3 -= 1;
            
            if (TEST_BITB(*arg1[1], 6) || arg3)
            {
                *(esp - 4) = es;
                esp -= 4;
                goto label_1fc5a;
            }
            
            arg4 = 0x488f2180;
            label_1fcd6:
            *(arg3 + 8) = ebp;
            int32_t temp9_1 = *(arg1 - 0x76b77142);
            *(arg1 - 0x76b77142) += 0x3ff7c869;
            o_3 = temp9_1 + 0x3ff7c869;
            
            if (temp9_1 < 0xc0083797)
            {
                char* temp0_6 = arg1[-0x1e];
                arg1[-0x1e] = arg3;
                arg3 = temp0_6;
            }
        }
        
        if (!o_3)
            break;
        
        *(arg4 - 0x798e77b8) &= arg1;
        *(arg3 - 1) -= 0xb3;
        arg3 = (arg3 - 1) << 0x90;
        *(arg1 + (arg3 << 1) - 0x437f9e78) += arg1;
        arg1 = arg1;
        *(arg1 - 0x7ff9f5df) += arg1;
        *arg1 &= arg3;
    }
    
    *(arg4 + 0x48942180);
    *arg1;
    void* ecx_6 = *arg1 * 0x93be8081;
    bool c_4 = /* bool c_4 = unimplemented  {imul ecx, dword [eax], 0x93be8081} */;
    *(ecx_6 - 0x38) = ebp;
    
    if (!c_4)
    {
        int32_t eax_3;
        eax_3 = 0xb0;
        /* undefined */
    }
    
    int32_t temp0_3 =
        COMBINE(COMBINE(arg2, arg1 - 1) % *arg5, COMBINE(arg2, arg1 - 1) / *arg5) / *(arg5 + 0x31);
    *(arg5 + 0x31);
    *(temp0_3 - 0x78) |= 0x61;
    *(ecx_6 + 0x7f);
    *(arg4 + (arg5 << 3) + 0x180bc9c) = -(*(arg4 + (arg5 << 3) + 0x180bc9c));
    int32_t ebx_1;
    int16_t es_1;
    ebx_1 = __les_gprz_memp(*(ebp - 0x80));
    *(esp - 4) = es_1;
    *(ecx_6 + 1) &= 0x98;
    *(temp0_3 - 0x7b4b0fdf) += temp0_3;
    *(arg5 - 0x79);
    /* undefined */
}

int32_t __convention("regparm") sub_1fd9d(int32_t* arg1, char* arg2, void* arg3, void* arg4, int32_t arg5, int32_t arg6)
{
    *arg1 += arg1;
    __int1();
    void* const __return_addr_1 = __return_addr;
    char* esi = arg2;
    void* arg_1c;
    void* eax = arg_1c;
    void arg_20;
    void* esp = &arg_20;
    esi[0xe1d9be80];
    *(arg6 + 0x5f);
    *(arg6 - 1);
    *(arg6 - 1) &= 0xe0;
    esi[0x48c02180];
    *eax;
    void* ecx_3 = *eax * 0xbfbe8081;
    bool c_6 = /* bool c_6 = unimplemented  {imul ecx, dword [eax], 0xbfbe8081} */;
    *(ecx_3 - 0x38) = arg3;
    int32_t temp1_4 = COMBINE(arg5, eax - 1) % *__return_addr_1;
    eax = COMBINE(arg5, eax - 1) / *__return_addr_1;
    int32_t edx = temp1_4;
    
    if (!c_6)
        eax = 0x82;
    
    void** eax_7 = eax & esp;
    int16_t es;
    *(esp - 4) = es;
    void** esp_2 = esp - 4;
    *ecx_3 &= 8;
    void* eax_5;
    void* ebp;
    
    while (true)
    {
        *(esp_2 - 4) = es;
        esp = esp_2 - 4;
        *ecx_3 &= 0xc0;
        ebp = *esp;
        esp += 4;
        *(ecx_3 - 0x10) += 0x46;
        *(__return_addr_1 - 0x7f) -= 0x16;
        *edx += eax_7;
        eax_7 ^= 0xe0;
        *(eax_7 - 0x7ffefc16) += eax_7;
        void* ebx;
        ebx = 0xf0;
        esi = &esi[1];
        *ecx_3 -= 0x10;
        __return_addr_1 += 1;
        edx = 0xbab88968;
        *(ecx_3 - 0x80) -= *ebx[1];
        __int1();
        *ecx_3 += 1;
        esp_2 = ecx_3;
        eax_5 = esp - 1;
        *(ecx_3 - 0x20) = *edx[1];
        bool o_1;
        
        if (esp - 1 >= 0)
        {
            eax_5 -= 1;
            *eax_5 ^= ebx;
            esi = &esi[1];
            *ecx_3 &= 0xf0;
            esp_2 = 0x6040180;
            label_1fc5a:
            char i;
            
            do
            {
                *ecx_3 &= 0x80;
                ebp = *esp_2;
                esp_2 = &esp_2[1];
                i = *(ecx_3 - 0x80);
                *(ecx_3 - 0x80) -= 0x4c;
            } while (i != 0x4c && i < 0x4c);
            
            int32_t eflags;
            int32_t eflags_1;
            char temp0_4;
            temp0_4 = __daa(eax_5, eflags);
            eax_5 = temp0_4;
            eflags = __sti(eflags_1);
            *(ecx_3 + 0x40) = ecx_3;
            
            if (i - 0x4c >= 0)
            {
                eax_5 = 0xe1;
                ecx_3 -= 1;
                
                if (__return_addr_1 == edx || !ecx_3)
                {
                    *ecx_3 -= 0xffffff85;
                    *(eax_5 - 0x5fb86edd) = ROLB(*(eax_5 - 0x5fb86edd), 1);
                    __return_addr_1 += 1;
                    *(esp_2 - 4) = esp_2;
                    esp_2 -= 4;
                    eax_5 -= 1;
                    *eax_5 ^= ebx;
                    esi = &esi[1];
                    break;
                }
            }
            
            int32_t temp11_1 = *(ebx - 0x77b77830);
            *(ebx - 0x77b77830) -= ecx_3;
            o_1 = temp11_1 + -(ecx_3);
        }
        else
        {
            int32_t temp9_1 = *(eax_5 + (edx << 3) + 0x47a047a9);
            *(eax_5 + (edx << 3) + 0x47a047a9) -= eax_5;
            
            if (temp9_1 > eax_5)
            {
                *ecx_3 -= 0xffffff84;
                *(ecx_3 + 0x7f47a047) u>>= 1;
                *(ebx - 7) = -(*(ebx - 7));
            }
            else
            {
                ebx = *esp_2;
                esp_2 = &esp_2[1];
            }
            
            ecx_3 -= 1;
            
            if (TEST_BITB(*eax_5[1], 6) || ecx_3)
            {
                *(esp_2 - 4) = es;
                esp_2 -= 4;
                goto label_1fc5a;
            }
            
            esi = 0x488f2180;
            *(ecx_3 + 8) = ebp;
            int32_t temp12_1 = *(eax_5 - 0x76b77142);
            *(eax_5 - 0x76b77142) += 0x3ff7c869;
            o_1 = temp12_1 + 0x3ff7c869;
            
            if (temp12_1 < 0xc0083797)
            {
                void* temp0_5 = *(eax_5 - 0x78);
                *(eax_5 - 0x78) = ecx_3;
                ecx_3 = temp0_5;
            }
        }
        
        if (!o_1)
            break;
        
        *(esi - 0x798e77b8) &= eax_5;
        *(ecx_3 - 1) -= 0xb3;
        ecx_3 = (ecx_3 - 1) << 0x90;
        *(eax_5 + (ecx_3 << 1) - 0x437f9e78) += eax_5;
        eax_7 = eax_5;
        *(eax_7 - 0x7ff9f5df) += eax_7;
        *eax_7 &= ecx_3;
    }
    
    esi[0x48942180];
    *eax_5;
    void* ecx_5 = *eax_5 * 0x93be8081;
    bool c_2 = /* bool c_2 = unimplemented  {imul ecx, dword [eax], 0x93be8081} */;
    *(ecx_5 - 0x38) = ebp;
    
    if (!c_2)
    {
        int32_t eax_3;
        eax_3 = 0xb0;
        /* undefined */
    }
    
    int32_t temp0_2 = COMBINE(COMBINE(edx, eax_5 - 1) % *__return_addr_1, 
        COMBINE(edx, eax_5 - 1) / *__return_addr_1) / *(__return_addr_1 + 0x31);
    *(__return_addr_1 + 0x31);
    *(temp0_2 - 0x78) |= 0x61;
    *(ecx_5 + 0x7f);
    esi[(__return_addr_1 << 3) + 0x180bc9c] = -(esi[(__return_addr_1 << 3) + 0x180bc9c]);
    int32_t ebx_1;
    int16_t es_1;
    ebx_1 = __les_gprz_memp(*(ebp - 0x80));
    *(esp_2 - 4) = es_1;
    *(ecx_5 + 1) &= 0x98;
    *(temp0_2 - 0x7b4b0fdf) += temp0_2;
    *(__return_addr_1 - 0x79);
    /* undefined */
}

int32_t __convention("regparm") sub_1fe4f(int32_t* arg1, int32_t arg2, void* arg3, void* arg4)
{
    *arg1 += arg1;
    __int1();
    int32_t ebx;
    *(ebx - 0x6f);
    void* const __return_addr_1 = __return_addr;
    uint32_t* arg_14;
    void** edx = arg_14;
    uint32_t arg_18;
    char* ecx = arg_18;
    *(arg2 - 0x1e7f4180);
    void* esi_1 = 0xbcf0be80;
    int16_t es;
    arg_18 = es;
    *ecx &= 4;
    arg_14 = es;
    *ecx &= 0x80;
    uint32_t* ebp = arg_14;
    uint32_t* esp = &arg_18;
    ecx[0xfffffff0] += 0x46;
    *ecx -= 0x10;
    void* eax;
    *eax[1] = 0x85;
    int32_t eflags;
    int32_t temp2_1;
    
    do
    {
        __return_addr_1 += 1;
        *(__return_addr_1 - 0x80) = es;
        char temp0_1;
        temp0_1 = __daa(eax, eflags);
        eax = temp0_1;
        eax = *0x9ff18079;
        *(eax - 0x5cd67e50) += &arg_18;
        temp2_1 = ROLD(*(edx - 0x492f1ad7), 1);
        *(edx - 0x492f1ad7) = temp2_1;
        ecx -= 1;
    } while (!temp2_1 || ecx);
    
    bool c_6;
    bool c;
    bool c_7;
    bool z;
    
    if (temp2_1 >= 0)
    {
        esi_1 = 0x48942180;
        *(ecx + 8) = ebp;
        int32_t temp3_1 = *(eax - 0x76b76c42);
        *(eax - 0x76b76c42) += 0x3ff7c869;
        c = temp3_1 >= 0xc0083797;
        z = temp3_1 == 0xc0083797;
        label_1fe25:
        
        while (!c)
        {
            if (*(esi_1 + 0x49ade1d9) + 0x80 < 0)
            {
                eax = 0x71e02182;
                *__return_addr_1 = 0x71e02182;
                ecx[0xffffff9f];
                __return_addr_1 += 5;
                arg_14 = &arg_18;
                esp = &arg_14;
                *(eax + 1) &= edx;
                esi_1 += 1;
                *(esi_1 + 0x48a62180);
                *(eax + 1);
                ecx = *(eax + 1) * 0xa5be8081;
                c_7 = /* c_7 = unimplemented  {imul ecx, dword [eax], 0xa5be8081} */;
                *(ecx - 0x38) = ebp;
                int32_t temp1_4 = COMBINE(edx, eax) % *__return_addr_1;
                eax = COMBINE(edx, eax) / *__return_addr_1;
                edx = temp1_4;
                goto label_1fddb;
            }
            
            esi_1 += 1;
            *(esi_1 + 0x48942180);
            *eax;
            ecx = *eax * 0x93be8081;
            c = /* c = unimplemented  {imul ecx, dword [eax], 0x93be8081} */;
            z = eax == 1;
            *(ecx - 0x38) = ebp;
            int32_t temp1_5 = COMBINE(edx, eax - 1) % *__return_addr_1;
            eax = COMBINE(edx, eax - 1) / *__return_addr_1;
            edx = temp1_5;
        }
        
        if (z || ecx != 1)
        {
            eax = *0x3cf95447;
            *eax &= edx;
            label_1fd61:
            esi_1 += 1;
        }
        else
        {
            ecx -= 2;
            ecx[0x60];
            *ecx;
            *ecx &= 0xe0;
        }
        
        *(esi_1 + 0x48c02180);
        *eax;
        ecx = *eax * 0xbfbe8081;
        c_6 = /* c_6 = unimplemented  {imul ecx, dword [eax], 0xbfbe8081} */;
        *(ecx - 0x38) = ebp;
        int32_t temp1_3 = COMBINE(edx, eax - 1) % *__return_addr_1;
        eax = COMBINE(edx, eax - 1) / *__return_addr_1;
        edx = temp1_3;
    }
    else
    {
        *(edx - 0x67d67c2f) -= eax;
        char temp4_1 = *(eax - 0x1f417f1f);
        *(eax - 0x1f417f1f) = ROLB(*(eax - 0x1f417f1f), 1);
        c = /* c = unimplemented  {rol byte [eax-0x1f417f1f], 0x1} */;
        z = !ROLB(temp4_1, 1);
        bool o_1 = /* bool o_1 = unimplemented  {rol byte [eax-0x1f417f1f], 0x1} */;
        *(ecx + 0x68d09229) = eax;
        
        if (!o_1)
            goto label_1fe25;
        
        esi_1 = 0x48af2180;
        *(ecx + 8) = ebp;
        int32_t temp5_1 = *(eax - 0x76b75142);
        *(eax - 0x76b75142) += 0x3ff7c869;
        
        if (temp5_1 < 0xc0083797)
            *ecx &= 0x8a;
        
        eax -= 1;
        *(ecx + 8) = ebp;
        int32_t temp8_1 = *(eax - 0x76b77642);
        *(eax - 0x76b77642) += 0x3ff7c869;
        
        if (temp8_1 < 0xc0083797)
            *(ecx + 8) = ebp;
        
        int32_t temp12_1 = *(eax - 0x76b75a42);
        *(eax - 0x76b75a42) += 0x3ff7c869;
        c_7 = temp12_1 >= 0xc0083797;
        label_1fddb:
        
        if (c_7)
            goto label_1fd61;
        
        *(esi_1 - 0x80) = *(esi_1 - 0x80) + eax;
        esi_1 = 0x48c02180;
        *(ecx + 8) = ebp;
        int32_t temp13_1 = *(eax - 0x76b74042);
        *(eax - 0x76b74042) += 0x3ff7c869;
        c_6 = temp13_1 >= 0xc0083797;
    }
    
    if (!c_6)
        eax = 0x82;
    
    void** eax_5 = eax & esp;
    *(esp - 4) = es;
    int32_t* esp_2 = esp - 4;
    *ecx &= 8;
    void* eax_3;
    
    while (true)
    {
        *(esp_2 - 4) = es;
        esp = esp_2 - 4;
        *ecx &= 0xc0;
        ebp = *esp;
        esp = &esp[1];
        ecx[0xfffffff0] += 0x46;
        *(__return_addr_1 - 0x7f) -= 0x16;
        *edx += eax_5;
        eax_5 ^= 0xe0;
        *(eax_5 - 0x7ffefc16) += eax_5;
        void* ebx_1;
        ebx_1 = 0xf0;
        esi_1 += 1;
        *ecx -= 0x10;
        __return_addr_1 += 1;
        edx = 0xbab88968;
        ecx[0xffffff80] -= *ebx_1[1];
        __int1();
        *ecx += 1;
        esp_2 = ecx;
        eax_3 = esp - 1;
        ecx[0xffffffe0] = *edx[1];
        bool o_2;
        
        if (esp - 1 >= 0)
        {
            eax_3 -= 1;
            *eax_3 ^= ebx_1;
            esi_1 += 1;
            *ecx &= 0xf0;
            esp_2 = 0x6040180;
            label_1fc5a:
            char i;
            
            do
            {
                *ecx &= 0x80;
                ebp = *esp_2;
                esp_2 = &esp_2[1];
                i = ecx[0xffffff80];
                ecx[0xffffff80] -= 0x4c;
            } while (i != 0x4c && i < 0x4c);
            
            int32_t eflags_1;
            char temp0_4;
            temp0_4 = __daa(eax_3, eflags);
            eax_3 = temp0_4;
            eflags = __sti(eflags_1);
            ecx[0x40] = ecx;
            
            if (i - 0x4c >= 0)
            {
                eax_3 = 0xe1;
                ecx -= 1;
                
                if (__return_addr_1 == edx || !ecx)
                {
                    *ecx -= 0xffffff85;
                    *(eax_3 - 0x5fb86edd) = ROLB(*(eax_3 - 0x5fb86edd), 1);
                    __return_addr_1 += 1;
                    *(esp_2 - 4) = esp_2;
                    esp_2 -= 4;
                    eax_3 -= 1;
                    *eax_3 ^= ebx_1;
                    esi_1 += 1;
                    break;
                }
            }
            
            int32_t temp19_1 = *(ebx_1 - 0x77b77830);
            *(ebx_1 - 0x77b77830) -= ecx;
            o_2 = temp19_1 + -(ecx);
        }
        else
        {
            int32_t temp17_1 = *(eax_3 + (edx << 3) + 0x47a047a9);
            *(eax_3 + (edx << 3) + 0x47a047a9) -= eax_3;
            
            if (temp17_1 > eax_3)
            {
                *ecx -= 0xffffff84;
                ecx[0x7f47a047] u>>= 1;
                *(ebx_1 - 7) = -(*(ebx_1 - 7));
            }
            else
            {
                ebx_1 = *esp_2;
                esp_2 = &esp_2[1];
            }
            
            ecx -= 1;
            
            if (TEST_BITB(*eax_3[1], 6) || ecx)
            {
                *(esp_2 - 4) = es;
                esp_2 -= 4;
                goto label_1fc5a;
            }
            
            esi_1 = 0x488f2180;
            *(ecx + 8) = ebp;
            int32_t temp20_1 = *(eax_3 - 0x76b77142);
            *(eax_3 - 0x76b77142) += 0x3ff7c869;
            o_2 = temp20_1 + 0x3ff7c869;
            
            if (temp20_1 < 0xc0083797)
            {
                char* temp0_5 = *(eax_3 - 0x78);
                *(eax_3 - 0x78) = ecx;
                ecx = temp0_5;
            }
        }
        
        if (!o_2)
            break;
        
        *(esi_1 - 0x798e77b8) &= eax_3;
        *(ecx - 1) -= 0xb3;
        ecx = (ecx - 1) << 0x90;
        *(eax_3 + (ecx << 1) - 0x437f9e78) += eax_3;
        eax_5 = eax_3;
        *(eax_5 - 0x7ff9f5df) += eax_5;
        *eax_5 &= ecx;
    }
    
    *(esi_1 + 0x48942180);
    *eax_3;
    void* ecx_2 = *eax_3 * 0x93be8081;
    bool c_2 = /* bool c_2 = unimplemented  {imul ecx, dword [eax], 0x93be8081} */;
    *(ecx_2 - 0x38) = ebp;
    
    if (!c_2)
    {
        int32_t eax_1;
        eax_1 = 0xb0;
        /* undefined */
    }
    
    int32_t temp0_2 = COMBINE(COMBINE(edx, eax_3 - 1) % *__return_addr_1, 
        COMBINE(edx, eax_3 - 1) / *__return_addr_1) / *(__return_addr_1 + 0x31);
    *(__return_addr_1 + 0x31);
    *(temp0_2 - 0x78) |= 0x61;
    *(ecx_2 + 0x7f);
    *(esi_1 + (__return_addr_1 << 3) + 0x180bc9c) =
        -(*(esi_1 + (__return_addr_1 << 3) + 0x180bc9c));
    int32_t ebx_2;
    int16_t es_1;
    ebx_2 = __les_gprz_memp(*(ebp - 0x80));
    *(esp_2 - 4) = es_1;
    *(ecx_2 + 1) &= 0x98;
    *(temp0_2 - 0x7b4b0fdf) += temp0_2;
    *(__return_addr_1 - 0x79);
    /* undefined */
}

int32_t __convention("regparm") sub_1ff18(void* arg1, int32_t arg2, int32_t arg3, int32_t arg4 @ ebp, char* arg5 @ esi, int32_t arg6 @ edi, int32_t arg7, void* arg8, char* arg9, void* arg10)
{
    bool c;
    bool p;
    bool a;
    bool z;
    bool s;
    bool d;
    bool o;
    int32_t var_4 = (o ? 1 : 0) << 0xb | (d ? 1 : 0) << 0xa | (s ? 1 : 0) << 7 | (z ? 1 : 0) << 6
        | (a ? 1 : 0) << 4 | (p ? 1 : 0) << 2 | (c ? 1 : 0);
    int32_t* esp_1 = &var_4;
    char* ecx = arg3 - 1;
    int32_t eflags;
    void* ebx;
    bool c_10;
    
    if (z || ecx)
    {
        ecx -= 1;
        
        if (z || ecx)
            goto label_1fea3;
        
        if (s)
        {
            if (s)
                goto label_1fe6a;
            
            goto label_1fee9;
        }
        
        if (s)
        {
            *(arg2 - 0x5bd67c2f) -= arg1;
            *(arg6 + 0xb0aee1);
            *(arg6 + 0xb0aee1) = ROLB(*(arg6 + 0xb0aee1), 1);
            c_10 = /* c_10 = unimplemented  {rol byte [edi+0xb0aee1], 0x1} */;
            label_1ff0d:
            int32_t eflags_2;
            char temp0_11;
            temp0_11 = __das(arg1, eflags);
            arg1 = temp0_11;
            
            while (true)
            {
                ecx = ecx - 0x5f;
                arg6 += 1;
                
                if ((arg1 & 0x47) > 0)
                    break;
                
                char temp19_1 = *arg6;
                *arg6 += *ecx[1];
                c_10 = temp19_1 + *ecx[1] < temp19_1;
            }
            
            /* undefined */
        }
        
        arg1 = 0x81;
        *(ebx - 0x1ad67d2f) -= &var_4;
        arg5[0x8279e8e1] <<= 1;
        label_1fe91:
        *(arg2 - 0x67d67c2f) -= arg1;
        char temp11_1 = *(arg1 - 0x1f417f1f);
        *(arg1 - 0x1f417f1f) = ROLB(*(arg1 - 0x1f417f1f), 1);
        c = /* c = unimplemented  {rol byte [eax-0x1f417f1f], 0x1} */;
        z = !ROLB(temp11_1, 1);
        o = /* o = unimplemented  {rol byte [eax-0x1f417f1f], 0x1} */;
        *(ecx + 0x68d09229) = arg1;
        label_1fea3:
        
        if (!o)
            goto label_1fe25;
        
        arg5 = 0x48af2180;
        *(ecx + 8) = arg4;
        int32_t temp2_1 = *(arg1 - 0x76b75142);
        *(arg1 - 0x76b75142) += 0x3ff7c869;
        
        if (temp2_1 < 0xc0083797)
            *ecx &= 0x8a;
        
        goto label_1fe3d;
    }
    
    *(arg1 + 0xb0aeb8) = arg5;
    char temp0_1;
    temp0_1 = __das(arg1, eflags);
    arg1 = temp0_1;
    
    while (true)
    {
        ecx = ecx - 0x4f;
        arg6 += 1;
        
        if ((arg1 & 0x47) <= 0)
            break;
        
        char temp3_1 = *arg6;
        *arg6 += *ecx[1];
        c = temp3_1 + *ecx[1] < temp3_1;
    }
    
    *(arg4 + 0x8698948) &= ecx;
    int32_t temp4_1 = *(arg1 - 0x76b77342);
    *(arg1 - 0x76b77342) += 0x3ff7c869;
    bool z_5;
    bool s_2;
    bool o_2;
    
    if (temp4_1 < 0xc0083797)
    {
        arg6 = var_4;
        arg4 = arg7;
        ebx = arg8;
        void arg_1c;
        esp_1 = &arg_1c;
        *(__return_addr - 0x1e7f4180);
        arg5 = 0xe1c8be80;
        int32_t ecx_6;
        arg1 = 0x822b814e();
        int32_t temp7_1 = ROLD(*(ebx - 0x7b2f72d7), 1);
        *(ebx - 0x7b2f72d7) = temp7_1;
        ecx = ecx_6 - 1;
        
        if (!temp7_1 || ecx)
        {
            ecx ^= 0x9f;
            goto label_1fe81;
        }
        
        arg6 += 1;
        z_5 = !(arg1 & 0x47);
        s_2 = (arg1 & 0x47) < 0;
        o_2 = false;
        goto label_1fee0;
    }
    
    int16_t es;
    bool c_6;
    bool c_7;
    
    if (*0xc3497d00 + 0x18 >= 0)
    {
        arg6 = var_4;
        int32_t arg_10;
        arg2 = arg_10;
        ecx = arg9;
        *(__return_addr - 0x1e7f4180);
        arg5 = 0xbcf0be80;
        arg9 = es;
        *ecx &= 4;
        arg_10 = es;
        esp_1 = &arg_10;
        label_1fe6a:
        *ecx &= 0x80;
        arg4 = *esp_1;
        esp_1 = &esp_1[1];
        ecx[0xfffffff0] += 0x46;
        *ecx -= 0x10;
        *arg1[1] = 0x85;
        int32_t temp13_1;
        
        do
        {
            arg6 += 1;
            *(arg6 - 0x80) = es;
            char temp0_10;
            temp0_10 = __daa(arg1, eflags);
            arg1 = temp0_10;
            arg1 = *0x9ff18079;
            label_1fe81:
            *(arg1 - 0x5cd67e50) += esp_1;
            temp13_1 = ROLD(*(arg2 - 0x492f1ad7), 1);
            *(arg2 - 0x492f1ad7) = temp13_1;
            ecx -= 1;
        } while (!temp13_1 || ecx);
        
        if (temp13_1 < 0)
            goto label_1fe91;
        
        arg5 = 0x48942180;
        *(ecx + 8) = arg4;
        int32_t temp20_1 = *(arg1 - 0x76b76c42);
        *(arg1 - 0x76b76c42) += 0x3ff7c869;
        c = temp20_1 >= 0xc0083797;
        z = temp20_1 == 0xc0083797;
        label_1fe25:
        
        while (!c)
        {
            if (arg5[0x49ade1d9] + 0x80 < 0)
            {
                arg1 = 0x71e02182;
                *arg6 = 0x71e02182;
                ecx[0xffffff9f];
                arg6 += 5;
                *(esp_1 - 4) = esp_1;
                esp_1 -= 4;
                *(arg1 + 1) &= arg2;
                arg5 = &arg5[1];
                arg5[0x48a62180];
                *(arg1 + 1);
                ecx = *(arg1 + 1) * 0xa5be8081;
                c_7 = /* c_7 = unimplemented  {imul ecx, dword [eax], 0xa5be8081} */;
                *(ecx - 0x38) = arg4;
                int32_t temp1_4 = COMBINE(arg2, arg1) % *arg6;
                arg1 = COMBINE(arg2, arg1) / *arg6;
                arg2 = temp1_4;
                goto label_1fddb;
            }
            
            arg5 = &arg5[1];
            arg5[0x48942180];
            *arg1;
            ecx = *arg1 * 0x93be8081;
            c = /* c = unimplemented  {imul ecx, dword [eax], 0x93be8081} */;
            z = arg1 == 1;
            *(ecx - 0x38) = arg4;
            int32_t temp1_5 = COMBINE(arg2, arg1 - 1) % *arg6;
            arg1 = COMBINE(arg2, arg1 - 1) / *arg6;
            arg2 = temp1_5;
        }
        
        if (z || ecx != 1)
        {
            arg1 = *0x3cf95447;
            *arg1 &= arg2;
            label_1fd61:
            arg5 = &arg5[1];
        }
        else
        {
            ecx -= 2;
            ecx[0x60];
            *ecx;
            *ecx &= 0xe0;
        }
        
        arg5[0x48c02180];
        *arg1;
        ecx = *arg1 * 0xbfbe8081;
        c_6 = /* c_6 = unimplemented  {imul ecx, dword [eax], 0xbfbe8081} */;
        *(ecx - 0x38) = arg4;
        int32_t temp1_3 = COMBINE(arg2, arg1 - 1) % *arg6;
        arg1 = COMBINE(arg2, arg1 - 1) / *arg6;
        arg2 = temp1_3;
    }
    else
    {
        *(arg2 - 0x72d67c2f) -= arg1;
        char temp15_1 = ecx[0x47a847a1];
        ecx[0x47a847a1] = ROLB(ecx[0x47a847a1], 1);
        z_5 = !ROLB(temp15_1, 1);
        s_2 = ROLB(temp15_1, 1) < 0;
        o_2 = /* o_2 = unimplemented  {rol byte [ecx+0x47a847a1], 0x1} */;
        label_1fee0:
        
        if (z_5 || s_2 != o_2)
            /* undefined */
        
        *(esp_1 - 4) = arg1;
        esp_1 -= 4;
        *(arg1 - 0x7e875f1f) -= 1;
        label_1fee9:
        *(ebx - 0x57b85e28) -= arg1;
        int32_t temp5_1 = arg6;
        arg6 += 1;
        
        for (bool cond:3_1 = temp5_1 <= 0xffffffff; cond:3_1; cond:3_1 = (arg1 & 0x47) <= 0)
            *ecx -= 0x47a1d883;
        
        *(arg1 - 0x7f417f20) += 1;
        arg5 = 0x78a6e1b2;
        int32_t ecx_7;
        arg1 = 0x822b817c();
        int32_t temp14_1 = *(ebx - 0x782f5bd7);
        *(ebx - 0x782f5bd7) = ROLD(*(ebx - 0x782f5bd7), 1);
        c_10 = /* c_10 = unimplemented  {rol dword [ebx-0x782f5bd7], sub_0+1} */;
        ecx = ecx_7 - 1;
        
        if (ROLD(temp14_1, 1) && !ecx)
        {
            arg1 = 0;
            goto label_1ff0d;
        }
        
        label_1fe3d:
        arg1 -= 1;
        *(ecx + 8) = arg4;
        int32_t temp10_1 = *(arg1 - 0x76b77642);
        *(arg1 - 0x76b77642) += 0x3ff7c869;
        
        if (temp10_1 < 0xc0083797)
            *(ecx + 8) = arg4;
        
        int32_t temp18_1 = *(arg1 - 0x76b75a42);
        *(arg1 - 0x76b75a42) += 0x3ff7c869;
        c_7 = temp18_1 >= 0xc0083797;
        label_1fddb:
        
        if (c_7)
            goto label_1fd61;
        
        arg5[0xffffff80] = arg5[0xffffff80] + arg1;
        arg5 = 0x48c02180;
        *(ecx + 8) = arg4;
        int32_t temp21_1 = *(arg1 - 0x76b74042);
        *(arg1 - 0x76b74042) += 0x3ff7c869;
        c_6 = temp21_1 >= 0xc0083797;
    }
    
    if (!c_6)
        arg1 = 0x82;
    
    int32_t* eax_4 = arg1 & esp_1;
    *(esp_1 - 4) = es;
    void** esp_3 = esp_1 - 4;
    *ecx &= 8;
    int32_t* eax_2;
    
    while (true)
    {
        *(esp_3 - 4) = es;
        esp_1 = esp_3 - 4;
        *ecx &= 0xc0;
        arg4 = *esp_1;
        esp_1 = &esp_1[1];
        ecx[0xfffffff0] += 0x46;
        *(arg6 - 0x7f) -= 0x16;
        *arg2 += eax_4;
        eax_4 ^= 0xe0;
        *(eax_4 - 0x7ffefc16) += eax_4;
        ebx = 0xf0;
        arg5 = &arg5[1];
        *ecx -= 0x10;
        arg6 += 1;
        arg2 = 0xbab88968;
        ecx[0xffffff80] -= *ebx[1];
        __int1();
        *ecx += 1;
        esp_3 = ecx;
        eax_2 = esp_1 - 1;
        ecx[0xffffffe0] = *arg2[1];
        bool o_1;
        
        if (esp_1 - 1 >= 0)
        {
            eax_2 -= 1;
            *eax_2 ^= ebx;
            arg5 = &arg5[1];
            *ecx &= 0xf0;
            esp_3 = 0x6040180;
            label_1fc5a:
            char i;
            
            do
            {
                *ecx &= 0x80;
                arg4 = *esp_3;
                esp_3 = &esp_3[1];
                i = ecx[0xffffff80];
                ecx[0xffffff80] -= 0x4c;
            } while (i != 0x4c && i < 0x4c);
            
            int32_t eflags_1;
            char temp0_4;
            temp0_4 = __daa(eax_2, eflags);
            eax_2 = temp0_4;
            eflags = __sti(eflags_1);
            ecx[0x40] = ecx;
            
            if (i - 0x4c >= 0)
            {
                eax_2 = 0xe1;
                ecx -= 1;
                
                if (arg6 == arg2 || !ecx)
                {
                    *ecx -= 0xffffff85;
                    *(eax_2 - 0x5fb86edd) = ROLB(*(eax_2 - 0x5fb86edd), 1);
                    arg6 += 1;
                    *(esp_3 - 4) = esp_3;
                    esp_3 -= 4;
                    eax_2 -= 1;
                    *eax_2 ^= ebx;
                    arg5 = &arg5[1];
                    break;
                }
            }
            
            int32_t temp27_1 = *(ebx - 0x77b77830);
            *(ebx - 0x77b77830) -= ecx;
            o_1 = temp27_1 + -(ecx);
        }
        else
        {
            int32_t temp25_1 = *(&eax_2[arg2 * 2] + 0x47a047a9);
            *(&eax_2[arg2 * 2] + 0x47a047a9) -= eax_2;
            
            if (temp25_1 > eax_2)
            {
                *ecx -= 0xffffff84;
                ecx[0x7f47a047] u>>= 1;
                *(ebx - 7) = -(*(ebx - 7));
            }
            else
            {
                ebx = *esp_3;
                esp_3 = &esp_3[1];
            }
            
            ecx -= 1;
            
            if (TEST_BITB(*eax_2[1], 6) || ecx)
            {
                *(esp_3 - 4) = es;
                esp_3 -= 4;
                goto label_1fc5a;
            }
            
            arg5 = 0x488f2180;
            *(ecx + 8) = arg4;
            int32_t temp28_1 = *(eax_2 - 0x76b77142);
            *(eax_2 - 0x76b77142) += 0x3ff7c869;
            o_1 = temp28_1 + 0x3ff7c869;
            
            if (temp28_1 < 0xc0083797)
            {
                char* temp0_5 = eax_2[-0x1e];
                eax_2[-0x1e] = ecx;
                ecx = temp0_5;
            }
        }
        
        if (!o_1)
            break;
        
        *(arg5 - 0x798e77b8) &= eax_2;
        *(ecx - 1) -= 0xb3;
        ecx = (ecx - 1) << 0x90;
        *(eax_2 + (ecx << 1) - 0x437f9e78) += eax_2;
        eax_4 = eax_2;
        *(eax_4 - 0x7ff9f5df) += eax_4;
        *eax_4 &= ecx;
    }
    
    arg5[0x48942180];
    *eax_2;
    void* ecx_2 = *eax_2 * 0x93be8081;
    bool c_2 = /* bool c_2 = unimplemented  {imul ecx, dword [eax], 0x93be8081} */;
    *(ecx_2 - 0x38) = arg4;
    
    if (!c_2)
    {
        int32_t eax;
        eax = 0xb0;
        /* undefined */
    }
    
    int32_t temp0_2 = COMBINE(COMBINE(arg2, eax_2 - 1) % *arg6, COMBINE(arg2, eax_2 - 1) / *arg6) /
        *(arg6 + 0x31);
    *(arg6 + 0x31);
    *(temp0_2 - 0x78) |= 0x61;
    *(ecx_2 + 0x7f);
    arg5[(arg6 << 3) + 0x180bc9c] = -(arg5[(arg6 << 3) + 0x180bc9c]);
    int32_t ebx_1;
    int16_t es_1;
    ebx_1 = __les_gprz_memp(*(arg4 - 0x80));
    *(esp_3 - 4) = es_1;
    *(ecx_2 + 1) &= 0x98;
    *(temp0_2 - 0x7b4b0fdf) += temp0_2;
    *(arg6 - 0x79);
    /* undefined */
}

void* __convention("regparm") sub_1ffcd(void* arg1, int32_t, char* arg3, void* arg4 @ edi)
{
    *(arg1 - 0x7f417f1f) += 1;
    arg1 += 6;
    *arg3 &= 0x80;
    arg3[0xffffff90] -= 0x4c;
    *(arg4 - 0x70) += 0x1c;
    *(arg3 - 0x75);
    return arg1;
}

int32_t sub_1fff3()
{
    /* undefined */
}

int32_t sub_1fffa() __pure
{
    return;
}

int32_t sub_1fffd()
{
    /* undefined */
}

int32_t __convention("regparm") sub_20004(int32_t* arg1, void* arg2, int32_t arg3, void* arg4 @ ebp, char* arg5 @ esi, int32_t* arg6 @ edi, int32_t arg7, void* arg8, void** arg9, int32_t arg10, int32_t arg11, int32_t arg12)
{
    void* ebx;
    void** ebx_1 = ebx + 1;
    
    if (ebx + 1 >= 0)
        /* undefined */
    
    void* ecx_1 = arg3 - 1;
    void** edx_2;
    void* esp;
    void* esi;
    void* __return_addr_1;
    bool z_5;
    bool s_2;
    bool o_3;
    
    if (ebx == 0xffffffff || ecx_1)
    {
        int32_t temp4_1 = *(arg1 - 0x76b77342);
        *(arg1 - 0x76b77342) += 0x3ff7c869;
        
        if (temp4_1 < 0xc0083797)
        {
            __return_addr_1 = __return_addr;
            arg4 = arg8;
            ebx_1 = arg9;
            void arg_20;
            esp = &arg_20;
            *(arg7 - 0x1e7f4180);
            esi = 0xe1c8be80;
            int32_t ecx_6;
            arg1 = 0x822b814e();
            int32_t temp5_1 = ROLD(*(ebx_1 - 0x7b2f72d7), 1);
            *(ebx_1 - 0x7b2f72d7) = temp5_1;
            ecx_1 = ecx_6 - 1;
            
            if (!temp5_1 || ecx_1)
            {
                ecx_1 ^= 0x9f;
                goto label_1fe81;
            }
            
            arg6 = __return_addr_1 + 1;
            z_5 = !(arg1 & 0x47);
            s_2 = (arg1 & 0x47) < 0;
            o_3 = false;
            goto label_1fee0;
        }
    }
    else
    {
        if (ebx + 1 < 0)
        {
            int16_t eax_13 = *0x7e47a847;
            char temp2 = *arg5;
            uint8_t temp1_6 = eax_13 % temp2;
            eax_13 = eax_13 / temp2;
            *eax_13[1] = temp1_6;
            /* undefined */
        }
        
        *(ecx_1 + 0x44f954d9) -= ebx_1;
        arg1[-0x17ee1594] += &__return_addr;
        arg6 += 1;
        void* const* var_4 = &__return_addr;
        esp = &*var_4[1];
        *arg1 &= arg2;
        arg5[0x488c2181];
        *arg1;
        bool c_11 = /* bool c_11 = unimplemented  {imul ecx, dword [eax], 0x8bbe8081} */;
        *(*arg1 * 0x8bbe8081 - 0x38) = arg4;
        char temp1_7 = COMBINE(arg2, arg1 - 1) % *arg6;
        arg1 = COMBINE(arg2, arg1 - 1) / *arg6;
        arg2 = temp1_7;
        int16_t cs;
        
        if (!c_11)
            *(arg1 - 0x77) = cs;
        ecx_1 = arg1 * 0x81733ff7;
    }
    
    int32_t eflags;
    int16_t es;
    bool c_4;
    bool c_5;
    
    if (*0xc3497d00 + 0x18 >= 0)
    {
        __return_addr_1 = *esp;
        *(esp + 0x10);
        edx_2 = *(esp + 0x14);
        ecx_1 = *(esp + 0x18);
        (*(esp + 4))[-0x79fd060];
        esi = 0xbcf0be80;
        *(esp + 0x1c) = *(esp + 0x1c);
        *(esp + 0x18) = es;
        *ecx_1 &= 4;
        *(esp + 0x14) = es;
        *ecx_1 &= 0x80;
        arg4 = *(esp + 0x14);
        esp += 0x18;
        *(ecx_1 - 0x10) += 0x46;
        *ecx_1 -= 0x10;
        *arg1[1] = 0x85;
        int32_t temp7_1;
        
        do
        {
            __return_addr_1 += 1;
            *(__return_addr_1 - 0x80) = es;
            char temp0_9;
            temp0_9 = __daa(arg1, eflags);
            arg1 = temp0_9;
            arg1 = *0x9ff18079;
            label_1fe81:
            arg1[-0x17359f94] += esp;
            temp7_1 = ROLD(*(edx_2 - 0x492f1ad7), 1);
            *(edx_2 - 0x492f1ad7) = temp7_1;
            ecx_1 -= 1;
        } while (!temp7_1 || ecx_1);
        
        bool c_6;
        bool z_4;
        
        if (temp7_1 < 0)
        {
            *(edx_2 - 0x67d67c2f) -= arg1;
            char temp11_1 = *(arg1 - 0x1f417f1f);
            *(arg1 - 0x1f417f1f) = ROLB(*(arg1 - 0x1f417f1f), 1);
            c_6 = /* c_6 = unimplemented  {rol byte [eax-0x1f417f1f], 0x1} */;
            z_4 = !ROLB(temp11_1, 1);
            bool o_2 = /* bool o_2 = unimplemented  {rol byte [eax-0x1f417f1f], 0x1} */;
            *(ecx_1 + 0x68d09229) = arg1;
            
            if (!o_2)
                goto label_1fe25;
            
            esi = 0x48af2180;
            *(ecx_1 + 8) = arg4;
            int32_t temp12_1 = *(arg1 - 0x76b75142);
            *(arg1 - 0x76b75142) += 0x3ff7c869;
            
            if (temp12_1 < 0xc0083797)
                *ecx_1 &= 0x8a;
            
            goto label_1fe3d;
        }
        
        esi = 0x48942180;
        *(ecx_1 + 8) = arg4;
        int32_t temp10_1 = *(arg1 - 0x76b76c42);
        *(arg1 - 0x76b76c42) += 0x3ff7c869;
        c_6 = temp10_1 >= 0xc0083797;
        z_4 = temp10_1 == 0xc0083797;
        label_1fe25:
        
        while (!c_6)
        {
            if (*(esi + 0x49ade1d9) + 0x80 < 0)
            {
                arg1 = 0x71e02182;
                *__return_addr_1 = 0x71e02182;
                *(ecx_1 - 0x61);
                __return_addr_1 += 5;
                *(esp - 4) = esp;
                esp -= 4;
                *(arg1 + 1) &= edx_2;
                esi += 1;
                *(esi + 0x48a62180);
                *(arg1 + 1);
                ecx_1 = *(arg1 + 1) * 0xa5be8081;
                c_5 = /* c_5 = unimplemented  {imul ecx, dword [eax], 0xa5be8081} */;
                *(ecx_1 - 0x38) = arg4;
                char temp1_4 = COMBINE(edx_2, arg1) % *__return_addr_1;
                arg1 = COMBINE(edx_2, arg1) / *__return_addr_1;
                edx_2 = temp1_4;
                goto label_1fddb;
            }
            
            esi += 1;
            *(esi + 0x48942180);
            *arg1;
            ecx_1 = *arg1 * 0x93be8081;
            c_6 = /* c_6 = unimplemented  {imul ecx, dword [eax], 0x93be8081} */;
            z_4 = arg1 == 1;
            *(ecx_1 - 0x38) = arg4;
            char temp1_5 = COMBINE(edx_2, arg1 - 1) % *__return_addr_1;
            arg1 = COMBINE(edx_2, arg1 - 1) / *__return_addr_1;
            edx_2 = temp1_5;
        }
        
        if (z_4 || ecx_1 != 1)
        {
            arg1 = *0x3cf95447;
            *arg1 &= edx_2;
            label_1fd61:
            esi += 1;
        }
        else
        {
            ecx_1 -= 2;
            *(ecx_1 + 0x60);
            *ecx_1;
            *ecx_1 &= 0xe0;
        }
        
        *(esi + 0x48c02180);
        *arg1;
        ecx_1 = *arg1 * 0xbfbe8081;
        c_4 = /* c_4 = unimplemented  {imul ecx, dword [eax], 0xbfbe8081} */;
        *(ecx_1 - 0x38) = arg4;
        char temp1_3 = COMBINE(edx_2, arg1 - 1) % *__return_addr_1;
        arg1 = COMBINE(edx_2, arg1 - 1) / *__return_addr_1;
        edx_2 = temp1_3;
    }
    else
    {
        *(arg2 - 0x72d67c2f) -= arg1;
        char temp8_1 = *(ecx_1 + 0x47a847a1);
        *(ecx_1 + 0x47a847a1) = ROLB(*(ecx_1 + 0x47a847a1), 1);
        z_5 = !ROLB(temp8_1, 1);
        s_2 = ROLB(temp8_1, 1) < 0;
        o_3 = /* o_3 = unimplemented  {rol byte [ecx+0x47a847a1], 0x1} */;
        label_1fee0:
        
        if (z_5 || s_2 != o_3)
            /* undefined */
        
        *(esp - 4) = arg1;
        esp -= 4;
        *(arg1 - 0x7e875f1f) -= 1;
        ebx_1[-0x15ee178a] -= arg1;
        __return_addr_1 = arg6 + 1;
        
        for (bool cond:5_1 = arg6 <= 0xffffffff; cond:5_1; cond:5_1 = (arg1 & 0x47) <= 0)
            *ecx_1 -= 0x47a1d883;
        
        arg1[-0x1fd05fc8] += 1;
        esi = 0x78a6e1b2;
        int32_t ecx_7;
        arg1 = 0x822b817c();
        int32_t temp13_1 = *(ebx_1 - 0x782f5bd7);
        *(ebx_1 - 0x782f5bd7) = ROLD(*(ebx_1 - 0x782f5bd7), 1);
        bool c_9 = /* bool c_9 = unimplemented  {rol dword [ebx-0x782f5bd7], sub_0+1} */;
        ecx_1 = ecx_7 - 1;
        
        if (ROLD(temp13_1, 1) && !ecx_1)
        {
            arg1 = 0;
            int32_t eflags_2;
            char temp0_10;
            temp0_10 = __das(0, eflags);
            arg1 = temp0_10;
            
            while (true)
            {
                ecx_1 = ecx_1 - 0x5f;
                __return_addr_1 += 1;
                
                if ((arg1 & 0x47) > 0)
                    break;
                
                char temp18_1 = *__return_addr_1;
                *__return_addr_1 += *ecx_1[1];
                c_9 = temp18_1 + *ecx_1[1] < temp18_1;
            }
            
            /* undefined */
        }
        
        label_1fe3d:
        arg1 -= 1;
        *(ecx_1 + 8) = arg4;
        int32_t temp16_1 = *(arg1 - 0x76b77642);
        *(arg1 - 0x76b77642) += 0x3ff7c869;
        
        if (temp16_1 < 0xc0083797)
            *(ecx_1 + 8) = arg4;
        
        int32_t temp21_1 = *(arg1 - 0x76b75a42);
        *(arg1 - 0x76b75a42) += 0x3ff7c869;
        c_5 = temp21_1 >= 0xc0083797;
        label_1fddb:
        
        if (c_5)
            goto label_1fd61;
        
        *(esi - 0x80) = *(esi - 0x80) + arg1;
        esi = 0x48c02180;
        *(ecx_1 + 8) = arg4;
        int32_t temp22_1 = *(arg1 - 0x76b74042);
        *(arg1 - 0x76b74042) += 0x3ff7c869;
        c_4 = temp22_1 >= 0xc0083797;
    }
    
    if (!c_4)
        arg1 = 0x82;
    
    void** eax_4 = arg1 & esp;
    *(esp - 4) = es;
    void** esp_2 = esp - 4;
    *ecx_1 &= 8;
    int32_t* eax_2;
    
    while (true)
    {
        *(esp_2 - 4) = es;
        esp = esp_2 - 4;
        *ecx_1 &= 0xc0;
        arg4 = *esp;
        esp += 4;
        *(ecx_1 - 0x10) += 0x46;
        *(__return_addr_1 - 0x7f) -= 0x16;
        *edx_2 += eax_4;
        eax_4 ^= 0xe0;
        *(eax_4 - 0x7ffefc16) += eax_4;
        ebx_1 = 0xf0;
        esi += 1;
        *ecx_1 -= 0x10;
        __return_addr_1 += 1;
        edx_2 = 0xbab88968;
        *(ecx_1 - 0x80) -= *ebx_1[1];
        __int1();
        *ecx_1 += 1;
        esp_2 = ecx_1;
        eax_2 = esp - 1;
        *(ecx_1 - 0x20) = *edx_2[1];
        bool o_1;
        
        if (esp - 1 >= 0)
        {
            eax_2 -= 1;
            *eax_2 ^= ebx_1;
            esi += 1;
            *ecx_1 &= 0xf0;
            esp_2 = 0x6040180;
            label_1fc5a:
            char i;
            
            do
            {
                *ecx_1 &= 0x80;
                arg4 = *esp_2;
                esp_2 = &esp_2[1];
                i = *(ecx_1 - 0x80);
                *(ecx_1 - 0x80) -= 0x4c;
            } while (i != 0x4c && i < 0x4c);
            
            int32_t eflags_1;
            char temp0_3;
            temp0_3 = __daa(eax_2, eflags);
            eax_2 = temp0_3;
            eflags = __sti(eflags_1);
            *(ecx_1 + 0x40) = ecx_1;
            
            if (i - 0x4c >= 0)
            {
                eax_2 = 0xe1;
                ecx_1 -= 1;
                
                if (__return_addr_1 == edx_2 || !ecx_1)
                {
                    *ecx_1 -= 0xffffff85;
                    *(eax_2 - 0x5fb86edd) = ROLB(*(eax_2 - 0x5fb86edd), 1);
                    __return_addr_1 += 1;
                    *(esp_2 - 4) = esp_2;
                    esp_2 -= 4;
                    eax_2 -= 1;
                    *eax_2 ^= ebx_1;
                    esi += 1;
                    break;
                }
            }
            
            int32_t temp28_1 = ebx_1[-0x1dedde0c];
            ebx_1[-0x1dedde0c] -= ecx_1;
            o_1 = temp28_1 + -(ecx_1);
        }
        else
        {
            int32_t temp26_1 = *(&eax_2[edx_2 * 2] + 0x47a047a9);
            *(&eax_2[edx_2 * 2] + 0x47a047a9) -= eax_2;
            
            if (temp26_1 > eax_2)
            {
                *ecx_1 -= 0xffffff84;
                *(ecx_1 + 0x7f47a047) u>>= 1;
                *(ebx_1 - 7) = -(*(ebx_1 - 7));
            }
            else
            {
                ebx_1 = *esp_2;
                esp_2 = &esp_2[1];
            }
            
            ecx_1 -= 1;
            
            if (TEST_BITB(*eax_2[1], 6) || ecx_1)
            {
                *(esp_2 - 4) = es;
                esp_2 -= 4;
                goto label_1fc5a;
            }
            
            esi = 0x488f2180;
            *(ecx_1 + 8) = arg4;
            int32_t temp29_1 = *(eax_2 - 0x76b77142);
            *(eax_2 - 0x76b77142) += 0x3ff7c869;
            o_1 = temp29_1 + 0x3ff7c869;
            
            if (temp29_1 < 0xc0083797)
            {
                void* temp0_4 = eax_2[-0x1e];
                eax_2[-0x1e] = ecx_1;
                ecx_1 = temp0_4;
            }
        }
        
        if (!o_1)
            break;
        
        *(esi - 0x798e77b8) &= eax_2;
        *(ecx_1 - 1) -= 0xb3;
        ecx_1 = (ecx_1 - 1) << 0x90;
        *(eax_2 + (ecx_1 << 1) - 0x437f9e78) += eax_2;
        eax_4 = eax_2;
        *(eax_4 - 0x7ff9f5df) += eax_4;
        *eax_4 &= ecx_1;
    }
    
    *(esi + 0x48942180);
    *eax_2;
    void* ecx_2 = *eax_2 * 0x93be8081;
    bool c = /* bool c = unimplemented  {imul ecx, dword [eax], 0x93be8081} */;
    *(ecx_2 - 0x38) = arg4;
    
    if (!c)
    {
        int32_t eax;
        eax = 0xb0;
        /* undefined */
    }
    
    int32_t temp0_1 = COMBINE(COMBINE(edx_2, eax_2 - 1) % *__return_addr_1, 
        COMBINE(edx_2, eax_2 - 1) / *__return_addr_1) / *(__return_addr_1 + 0x31);
    *(__return_addr_1 + 0x31);
    *(temp0_1 - 0x78) |= 0x61;
    *(ecx_2 + 0x7f);
    *(esi + (__return_addr_1 << 3) + 0x180bc9c) = -(*(esi + (__return_addr_1 << 3) + 0x180bc9c));
    int32_t ebx_2;
    int16_t es_1;
    ebx_2 = __les_gprz_memp(*(arg4 - 0x80));
    *(esp_2 - 4) = es_1;
    *(ecx_2 + 1) &= 0x98;
    *(temp0_1 - 0x7b4b0fdf) += temp0_1;
    *(__return_addr_1 - 0x79);
    /* undefined */
}

void __convention("fastcall") sub_200f3(void* arg1, int32_t arg2 @ esi, int32_t arg3 @ edi) __noreturn
{
    int32_t eax;
    *eax[1] = 0x82;
    int32_t ebp = *(arg1 - 0x24);
    void* eax_1;
    bool c;
    eax_1 = (eax - 0x6890b88c) ^ 0x88;
    *(eax_1 - 0x3b963f1f) += eax_1;
    void var_2785bce4;
    *(&var_2785bce4 + (ebp << 1));
    breakpoint();
}

int32_t __convention("fastcall") sub_20117(int32_t* arg1)
{
    int32_t ebp = *(*arg1 * 0xc1610861 + 8);
    bool c = /* bool c = unimplemented  {imul esp, esp, 0x9061941d} */;
    int32_t* esp;
    int32_t temp2 = *(esp[4] + 0xb);
    bool c_1 = ebp + temp2 < ebp || (c && ebp + temp2 == ebp);
    int32_t ebp_1 = *0x61ca69ca;
    int32_t temp4 = *(*0x61ca69da - 0x27);
    int32_t* edi = *0x61ca69e2;
    int32_t esi = *0x61ca69e6;
    int32_t ebp_2 = *0x61ca69ea;
    int32_t ebx = *0x61ca69f2;
    int32_t edx = *0x61ca69f6;
    void* ecx_2 = *0x61ca69fa;
    int32_t eax = *0x61ca69fe;
    *(ecx_2 - 0x78) = *(ecx_2 - 0x78) + 0x61ca6a02;
    *0x61ca69fe = eax;
    *0x61ca69fa = ecx_2;
    *0x61ca69f6 = edx;
    *0x61ca69f2 = ebx;
    *0x61ca69ee = 0x61ca69f2;
    *0x61ca69ea = ebp_2;
    *0x61ca69e6 = esi;
    *0x61ca69e2 = edi;
    *(ecx_2 - 0x25) -= 0x1d;
    *(ecx_2 - 0x10) &= 0x46;
    *(esi - 0xdffde30);
    *edi = edi;
    /* undefined */
}

int32_t __convention("regparm") sub_2014c(void* arg1, uint16_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int16_t arg6, char* arg7, char arg8)
{
    int32_t eflags;
    int32_t eflags_1;
    char temp0_1;
    char temp1;
    temp0_1 = __aas(arg1, *arg1[1], eflags);
    arg1 = temp0_1;
    *arg1[1] = temp1;
    __out_dx_oeax(arg2, arg1, eflags_1);
    *(arg1 - 0x7fb67142);
    *(__return_addr - 0x80) = arg8;
    int32_t ebx;
    ebx = 0x88;
    *arg7 &= 0xd0;
    int16_t edx;
    edx = arg6 + *arg6[1];
    *__return_addr = __return_addr;
    /* undefined */
}

int32_t __convention("regparm") sub_20180(void* arg1, uint16_t arg2, char* arg3, int32_t arg4 @ esi, int32_t* arg5 @ edi)
{
    int32_t eflags;
    int32_t eflags_1;
    char temp0_1;
    char temp1;
    temp0_1 = __aas(arg1, *arg1[1], eflags);
    arg1 = temp0_1;
    *arg1[1] = temp1;
    __out_dx_oeax(arg2, arg1, eflags_1);
    *(arg1 + 0x7ebe80be);
    __out_immb_al(0xf0, arg1, eflags_1);
    *(arg4 + 1);
    *arg3 &= 0x84;
    arg1 = __in_al_dx(arg2, eflags_1);
    arg3 &= 0x8d;
    arg3[0xffffffcf] -= 0xb8;
    *(arg4 - 0xdffde2f);
    *arg5 = arg5;
    /* undefined */
}

int32_t __convention("regparm") sub_201a6(void* arg1, uint16_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int16_t arg6, char* arg7, void* arg8)
{
    int32_t eflags;
    int32_t eflags_2;
    char temp0_2;
    char temp1_1;
    temp0_2 = __aas(arg1, *arg1[1], eflags);
    arg1 = temp0_2;
    *arg1[1] = temp1_1;
    __out_dx_oeax(arg2, arg1, eflags_2);
    *(arg1 + 0x7ebe80be);
    __out_immb_al(0x86, arg1, eflags_2);
    *(arg3 - 0x41) -= 0x1f;
    *(arg1 - 0x78);
    *(__return_addr - 0x80) = arg8;
    void* esp = *(arg8 + 0x2180b8) * 0x808991f2;
    *0x46f0be80;
    *arg7 &= 0xf0;
    void* eax;
    *eax[1] = 0x86;
    char* ecx_1;
    *ecx_1[1] = 0x47;
    *(__return_addr + 1) -= 0xc4;
    *(eax - 0x5db853c4) = RORD(*(eax - 0x5db853c4), 1);
    
    if (eax == 1 || ecx_1 == 1)
    {
        *(ecx_1 - 0x79) = arg4;
        *(eax - 0x1e7fde80) = *arg6[1];
        *ecx_1 &= 0xd0;
        int16_t edx;
        edx = arg6 + *arg6[1];
        *(__return_addr + 1) = __return_addr + 1;
        /* undefined */
    }
    
    *(eax - 0x79) = ecx_1 - 1;
    void* ecx_5 = *(esp + 0x18);
    __sti(eflags_2);
    char temp0_1 = *(ecx_5 - 0x80);
    *(ecx_5 - 0x80) = ecx_5;
    ecx_5 = temp0_1;
    *(esp + 0x20);
    *(esp + 0x24);
    *(esp + 0x28);
    *(esp + 0x30);
    *(esp + 0x34);
    *(esp + 0x38);
    *(esp + 0x3c);
    /* undefined */
}

int32_t __convention("regparm") sub_201fc(void* arg1, uint16_t arg2, int32_t* arg3 @ edi)
{
    int32_t eflags;
    int32_t eflags_1;
    char temp0_1;
    char temp1;
    temp0_1 = __aas(arg1, *arg1[1], eflags);
    arg1 = temp0_1;
    *arg1[1] = temp1;
    __out_dx_oeax(arg2, arg1, eflags_1);
    *(arg1 + 0x7ebe80be);
    __out_immb_al(0xa0, arg1, eflags_1);
    arg2 += *arg2[1];
    *(arg1 - 0x7fde7e48);
    *arg3 = arg3;
    /* undefined */
}

int32_t __convention("regparm") sub_20265(void* arg1, int32_t arg2, char* arg3, int32_t arg4 @ ebp, void* arg5 @ esi, int32_t arg6 @ edi)
{
    *arg3 &= 0x70;
    *arg3 &= 0x7c;
    int16_t es = *0x6800182;
    *arg3 &= 0x80;
    void* edi = arg6 & arg3;
    __int1();
    *0x6800180 = arg1;
    *0x680017c = arg3;
    *0x6800178 = arg2;
    int32_t ebx;
    *0x6800174 = ebx;
    *0x6800170 = 0x6800174;
    *0x680016c = arg4;
    *0x6800168 = arg5;
    *0x6800164 = edi;
    int32_t* esp = 0x6800164;
    *(arg1 - 0x799ff7a0) &= arg3;
    
    while (true)
    {
        arg3 -= 1;
        char temp1_1 = arg3[0xffffffcf];
        arg3[0xffffffcf] -= 0xf5;
        bool o_1 = temp1_1 + 0xb;
        int32_t eflags;
        int32_t eflags_1 = __cli(eflags);
        
        if (o_1)
            break;
        
        eflags = __cli(eflags_1);
        
        if (o_1)
        {
            *edi = RRCB(*edi, 0xcf, temp1_1 < 0xf5);
            __int1();
            *(esp - 4) = arg1;
            *(esp - 8) = arg3;
            *(esp - 0xc) = arg2;
            *(esp - 0x10) = ebx;
            *(esp - 0x14) = esp - 0x10;
            *(esp - 0x18) = arg4;
            *(esp - 0x1c) = arg5;
            *(esp - 0x20) = edi;
            arg1 &= arg3;
            *(esp - 0x24) = arg1;
            *(esp - 0x28) = arg3;
            *(esp - 0x2c) = arg2;
            *(esp - 0x30) = ebx;
            *(esp - 0x34) = esp - 0x30;
            *(esp - 0x38) = arg4;
            *(esp - 0x3c) = arg5;
            *(esp - 0x40) = edi;
            int32_t temp0 = *arg3;
            *arg3 = esp - 0x40;
            *(arg1 - 0x10) = *arg1[1];
            *(temp0 - 4) = arg1;
            *(temp0 - 8) = arg3;
            *(temp0 - 0xc) = arg2;
            *(temp0 - 0x10) = ebx;
            *(temp0 - 0x14) = temp0 - 0x10;
            *(temp0 - 0x18) = arg4;
            *(temp0 - 0x1c) = arg5 + 1;
            *(temp0 - 0x20) = edi;
            *(temp0 - 0x24) = es;
            *arg3 &= 0xf0;
            *arg1[1] = 0x84;
            *(edi + 1) = *(arg5 + 1);
            void* edi_2 = edi + 5;
            int32_t eflags_2;
            char temp0_1;
            char temp1_2;
            temp0_1 = __aad_immb(0xb8, arg1, 0x84);
            arg1 = temp0_1;
            *arg1[1] = temp1_2;
            *(arg5 - 0xdffde2b);
            *(edi_2 + 1) = edi_2 + 1;
            /* undefined */
        }
        
        *(esp - 4) = arg1;
        *(esp - 8) = arg3;
        *(esp - 0xc) = arg2;
        *(esp - 0x10) = ebx;
        *(esp - 0x14) = esp - 0x10;
        *(esp - 0x18) = arg4;
        *(esp - 0x1c) = arg5;
        *(esp - 0x20) = edi;
        esp -= 0x20;
        *(arg1 - 0x7a) |= *arg1[1];
    }
    
    do
        arg3 ^= 0x84;
     while ((arg1 & 0x47) > 0);
    
    char temp2 = *arg3 & 0x8e;
    *arg3 = temp2;
    
    if (!temp2 || arg3 != 1)
    {
        arg3[0xffffffbf] -= 0x1d;
        *(arg1 - 0x7e430f7a);
        *esp;
        esp[1];
        esp[2];
        esp[4];
        esp[5];
        esp[6];
        esp[7];
        /* undefined */
    }
    
    *(ebx - 0x25fdbf17) &= (arg1 - 0x7e430f02) & *(arg4 - 0x4f063cb6);
    esp[2];
    esp[4];
    void* edx = esp[5];
    int32_t ecx_1;
    ecx_1 = esp[6] & 0xc0;
    esp[7];
    *(esp[1] + 0x71a046f0);
    int16_t eax_4;
    *eax_4[1] = 0x84;
    int32_t* edi_6 = *esp + 1;
    *(&esp[8] + (edx << 1)) &= 0xb0;
    *(ecx_1 - 0x79) -= 0xb8;
    *(ecx_1 - 1) &= 0x2180e180;
    *(edx + 0x21d0be80) s>>= 1;
    int16_t edx_1;
    edx_1 = eax_4 + *eax_4[1];
    *edi_6 = edi_6;
    /* undefined */
}

int32_t __convention("regparm") sub_202b0(void* arg1, uint16_t arg2, char* arg3, int32_t arg4 @ ebp, int32_t arg5 @ edi, int32_t arg6, int32_t arg7, int32_t arg8, void* arg9, int32_t arg10, int32_t arg11)
{
    int32_t eflags;
    int32_t eflags_1;
    char temp0_2;
    char temp1_1;
    temp0_2 = __aas(arg1, *arg1[1], eflags);
    arg1 = temp0_2;
    *arg1[1] = temp1_1;
    __out_dx_oeax(arg2, arg1, eflags_1);
    *(arg1 + 0x7ebe80be);
    __out_immb_al(0xa8, arg1, eflags_1);
    
    do
        arg3 ^= 0x84;
     while ((arg1 & 0x47) > 0);
    
    char temp1 = *arg3 & 0x8e;
    *arg3 = temp1;
    
    if (!temp1 || arg3 != 1)
    {
        arg3[0xffffffbf] -= 0x1d;
        *(arg1 - 0x7e430f7a);
        /* undefined */
    }
    
    int32_t ebx;
    *(ebx - 0x25fdbf17) &= (arg1 - 0x7e430f02) & *(arg4 - 0x4f063cb6);
    int32_t ecx_1;
    ecx_1 = arg10 & 0xc0;
    *(arg6 + 0x71a046f0);
    int16_t eax_4;
    *eax_4[1] = 0x84;
    void arg_20;
    *(&arg_20 + (arg9 << 1)) &= 0xb0;
    *(ecx_1 - 0x79) -= 0xb8;
    *(ecx_1 - 1) &= 0x2180e180;
    *(arg9 + 0x21d0be80) s>>= 1;
    int16_t edx_1;
    edx_1 = eax_4 + *eax_4[1];
    *(__return_addr + 1) = __return_addr + 1;
    /* undefined */
}

int32_t __convention("regparm") sub_2031a(char* arg1, uint16_t arg2, int32_t arg3, int32_t arg4 @ edi, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, int16_t arg10)
{
    int32_t eflags;
    int32_t eflags_2;
    char temp0_2;
    char temp1_1;
    temp0_2 = __aas(arg1, *arg1[1], eflags);
    arg1 = temp0_2;
    *arg1[1] = temp1_1;
    __out_dx_oeax(arg2, arg1, eflags_2);
    *(arg1 + 0x7ebe80be);
    __out_immb_al(0x80, arg1, eflags_2);
    __int1();
    arg1 -= 8;
    
    while (true)
    {
        *arg1 &= 0xa0;
        int32_t temp0 = arg4;
        arg4 += 1;
        
        if (temp0 == 0xffffffff)
            break;
        
        arg3 ^= 4;
    }
    
    if (arg3 != 1)
        arg1[0xe2f67547] &= *arg1[1];
    
    *(arg4 - 0x43);
    *0x5100f157;
    int32_t eflags_1;
    char temp0_1;
    char temp1;
    temp0_1 = __aas(arg10, *arg10[1], eflags_2);
    int16_t eax;
    eax = temp0_1;
    *eax[1] = temp1;
    /* undefined */
}

int32_t __convention("fastcall") sub_20349(char* arg1, int16_t arg2, int32_t arg3 @ ebp)
{
    *arg1 &= 0x84;
    int32_t eflags;
    int32_t eax;
    eax = __in_al_dx(arg2, eflags);
    arg1 &= 0x83;
    *(arg1 - 0x7f) = arg3;
    void* edi = *0x7600180;
    *0x7600184;
    *0x7600188;
    *0x7600190;
    int16_t edx = *0x7600194;
    char* ecx = *0x7600198;
    void* eax_1 = *0x760019c;
    *(eax_1 - 0x77) |= 0x69;
    *(ecx - 0x10) <<= 0x46;
    *ecx += 0x50;
    *ecx &= 0x3c;
    *ecx &= 0x81;
    *(ecx - 0xf9e77b8) &= eax_1;
    *0x76001a3;
    *ecx &= 0xf0;
    edx += *edx[1];
    *(edi + 1) = edi + 1;
    /* undefined */
}

int32_t __convention("regparm") sub_203bb(int32_t* arg1, int16_t arg2, int32_t arg3, int32_t arg4 @ ebp, int16_t arg5 @ esi, int32_t* arg6 @ edi, int32_t arg7, int32_t arg8, void* arg9, int32_t arg10, int32_t arg11, int32_t arg12, int32_t arg13, int32_t arg14, char arg15, void* arg16)
{
    __int1();
    int32_t temp1 = *arg1 | 0xd1e02f80;
    *arg1 = temp1;
    
    if (!temp1 || arg3 == 1)
    {
        arg1[0x8742fa0] s>>= 1;
        arg2 += *arg2[1];
        *arg6 = arg6;
        /* undefined */
    }
    
    *arg1 |= arg1;
    arg2 -= 1;
    int16_t eax_2;
    eax_2 = arg5 + *arg5[1];
    *(arg3 - 1);
    *(arg3 - 1) &= 0x2180e180;
    *(arg3 - 1);
    *(arg3 - 1) &= 0x488e4108;
    *arg3 = arg4;
    int16_t cs;
    *(arg3 - 0x80) = cs;
    char temp5 = arg10;
    int32_t eax_3;
    eax_3 = temp5 - 7;
    eax_3 = *__return_addr;
    *(arg9 - 0x76bef7df) = *(arg9 - 0x76bef7df) + eax_3;
    *(arg9 - 0x78) = arg7;
    *(eax_3 - 0x79) = arg9;
    *(arg16 - 0x7bfffe16);
    void arg_5c;
    *(arg16 - 0x2d0980e4) += &arg_5c;
    /* undefined */
}

int32_t __convention("regparm") sub_203d2(int32_t* arg1, int32_t arg2, int32_t arg3, void* arg4 @ ebp, int32_t arg5 @ edi)
{
    int32_t eflags;
    int32_t eflags_1;
    char temp0_2;
    char temp1;
    temp0_2 = __aas(arg1, *arg1[1], eflags);
    arg1 = temp0_2;
    *arg1[1] = temp1;
    __out_dx_oeax(arg2, arg1, eflags_1);
    *(arg1 + 0x7ebe80be);
    __out_immb_al(0xa0, arg1, eflags_1);
    uint8_t* edi;
    uint8_t temp0;
    temp0 = __insb(arg5, arg2, eflags_1);
    *edi = temp0;
    int32_t ebx;
    *(ebx - 0x7f);
    *(arg4 - 0x5a1e7fb9) s>>= arg3;
    uint8_t* edi_1;
    uint8_t temp0_1;
    temp0_1 = __insb(edi, arg2, eflags_1);
    *edi_1 = temp0_1;
    int32_t* var_4 = arg1;
    int32_t var_8 = arg3;
    int32_t var_c = arg2;
    int32_t var_10 = ebx;
    int32_t* var_14 = &var_10;
    void* var_18 = arg4;
    uint8_t* var_20 = edi_1;
    *arg1;
    /* undefined */
}

int32_t __convention("fastcall") sub_203ef(int32_t* arg1, uint16_t arg2, int32_t arg3 @ edi)
{
    int32_t eflags;
    uint8_t* edi;
    uint8_t temp0_1;
    temp0_1 = __insb(arg3, arg2, eflags);
    *edi = temp0_1;
    *arg1 -= 0x49a4d0c7;
    arg1[1] -= 0x43;
    char* ecx = arg1 - 0x1e7fde7f;
    *ecx &= 0xd0;
    arg2 += *arg2[1];
    *edi = edi;
    /* undefined */
}

int32_t __convention("regparm") sub_20410(void* arg1, uint16_t arg2, void** arg3, void* arg4 @ ebp, char* arg5 @ esi)
{
    int32_t eflags;
    int32_t eflags_1;
    char temp0_1;
    char temp1;
    temp0_1 = __aas(arg1, *arg1[1], eflags);
    arg1 = temp0_1;
    *arg1[1] = temp1;
    __out_dx_oeax(arg2, arg1, eflags_1);
    *(arg1 + 0x7ebe80be);
    __out_immb_al(0x54, arg1, eflags_1);
    arg1 = *arg5;
    *(arg4 + 0x63) &= 0xf1806820;
    arg3[-0x1c] -= 0x48;
    void* temp0 = *arg3;
    *arg3 = arg1;
    *(temp0 - 0x78) &= *temp0[1];
    /* undefined */
}

int32_t __convention("regparm") sub_204ed(int32_t* arg1, void* arg2)
{
    *(arg2 + 0x40698049) u>>= 1;
    *arg1;
    int32_t ecx;
    char ebx;
    ecx = ebx;
    /* undefined */
}

int32_t __convention("regparm") sub_204f9(int32_t* arg1, uint16_t arg2, int32_t* arg3, void* arg4 @ ebp, uint8_t* arg5 @ esi, int32_t arg6 @ edi)
{
    __int1();
    *arg1 |= 0x49a6e185;
    arg3[1] -= 0x43;
    int32_t eax = arg1 + 0x881f1cf;
    void* ebx;
    *(ebx + arg6 + 0x6b);
    int32_t eflags;
    uint8_t* edi;
    uint8_t temp0;
    temp0 = __insb(arg6, arg2, eflags);
    *edi = temp0;
    *(ebx - 0x80) |= eax;
    *(arg4 + 0x63) <<= 1;
    *edi = *arg5;
    int32_t fsbase;
    *(fsbase + eax - 0x80) &= *arg3[1];
    __int1();
    arg3[-0x1c] -= 0x48;
    int16_t temp0_1 = *arg3;
    *arg3 = eax;
    void* eax_1 = temp0_1;
    *(eax_1 - 0x79) &= *eax_1[1];
    /* undefined */
}

int32_t __convention("regparm") sub_20563(int16_t arg1, char arg2, void* arg3, char* arg4 @ esi, int32_t arg5 @ edi)
{
    *(arg3 + 0x61) = *(arg1 - 1)[1];
    int16_t eax = *(arg3 - 0x74fffe16) * 0x4b;
    *(arg3 + 0x58f67f1c) += &__return_addr;
    *arg4 |= 0x87;
    __int1();
    *(arg3 - 0x78) += arg2 - 1;
    *(arg3 + 0x3f) = *(eax - 1)[1];
    /* undefined */
}

int32_t __convention("regparm") sub_205d0(void* arg1, void* arg2, void* arg3, int32_t* arg4 @ edi)
{
    int32_t eflags;
    int32_t eflags_1;
    char temp0_1;
    char temp1_1;
    temp0_1 = __aas(arg1, *arg1[1], eflags);
    arg1 = temp0_1;
    *arg1[1] = temp1_1;
    int32_t ebx;
    char temp1;
    
    do
    {
        __out_dx_oeax(arg2, arg1, eflags_1);
        *(arg1 + 0x7ff1cfbe);
        *(arg2 - 0x7e9e77b8) ^= arg2;
        *(arg3 - 0x7f9e77b8) &= arg2;
        *(arg3 - 0x7e9e77b8) &= arg2;
        __int1();
        temp1 = arg4;
        arg4 -= ebx;
        arg3 -= 1;
    } while (temp1 == ebx || arg3);
    arg3 &= 0x80;
    arg2 += *arg2[1];
    *arg4 = arg4;
    /* undefined */
}

void __convention("regparm") sub_20608(void* arg1, uint16_t arg2, int32_t* arg3 @ ebp) __noreturn
{
    int32_t eflags;
    int32_t eflags_1;
    char temp0;
    char temp1;
    temp0 = __aas(arg1, *arg1[1], eflags);
    arg1 = temp0;
    *arg1[1] = temp1;
    __out_dx_oeax(arg2, arg1, eflags_1);
    *(arg1 + 0x7ebe80be);
    __out_immb_al(0x9c, arg1, eflags_1);
    *arg3;
    breakpoint();
}

void* __convention("regparm") sub_2114d(int32_t arg1, int32_t arg2, char* arg3, void* arg4 @ ebp, int32_t arg5 @ esi, int32_t arg6 @ edi)
{
    *arg3 &= 0xf8;
    *arg3 &= 0x80;
    *(arg3 - 0x5c);
    *(arg3 - 0x5c) -= 0x7de8000;
    *arg3 &= 0xd7;
    int32_t eflags;
    int32_t eax_3;
    eax_3 = __salc(eflags);
    int32_t esp = *0x34800181;
    *arg3 &= 0xe6;
    *(esp - 4) = eax_3 ^ 0x35742180;
    *(esp - 8) = arg3;
    *(esp - 0xc) = arg2;
    int32_t ebx;
    *(esp - 0x10) = ebx;
    *(esp - 0x14) = esp - 0x10;
    *(esp - 0x18) = arg4;
    *(esp - 0x1c) = arg5;
    *(esp - 0x20) = arg6;
    
    if (arg3)
        breakpoint();
    
    *(arg4 + 0x7f698049) &= arg2;
    *arg4;
    *(arg4 + 0x7e) -= 0xf6;
    return arg3 - 1;
}

int32_t __convention("fastcall") sub_2118f(void* arg1, int32_t arg2, void* arg3 @ ebp, int32_t* arg4 @ esi, int32_t* arg5 @ edi)
{
    void* var_8 = arg1;
    int32_t var_c = arg2;
    void* ebx;
    void* var_10 = ebx;
    int32_t* var_14 = &var_10;
    void* var_18 = arg3;
    int32_t* var_1c = arg4;
    int32_t* var_20 = arg5;
    int32_t* esp = &var_20;
    *0x20477821 = *0x20477821;
    int32_t temp3 = *0x206b2ab4;
    *0x206b2ab4 &= arg2;
    
    if ((temp3 & arg2) < 0)
    {
        *(arg4 - 0x6dd6772f) -= 0xa0218000;
        *(ebx - 0x702e4fd7) = RORD(*(ebx - 0x702e4fd7), 1);
        *(ebx - 0x5adf7c1f) = RRCB(*(ebx - 0x5adf7c1f), 1, 0xa0218000 < arg1);
        
        while (true)
        {
            arg1 -= 1;
            *(arg1 + 0x7f) -= 0xf6;
            *arg5 = *arg4;
            arg5 = &arg5[1];
            arg4 = &arg4[1];
        }
        
        return;
    }
    
    void* eax_1 = 0xa0217fff;
    bool z_1 = false;
    bool o_1 = 0xa0218000 - 1;
    *(arg1 - 0x7e) = *arg2[1];
    
    while (true)
    {
        void* ecx_3 = arg1 - 1;
        
        if (!z_1 && !ecx_3)
        {
            *(ecx_3 - 0x308e77b8);
            *(ecx_3 - 0x308e77b8) &= ecx_3;
            label_21136:
            *(eax_1 - 0x75) += arg2;
            *(eax_1 - 5) = -(*(eax_1 - 5));
            int32_t eflags_1;
            uint16_t temp0_5;
            temp0_5 = __arpl_gpr16_gpr16(arg4, arg4);
            arg4 = temp0_5;
            /* undefined */
        }
        
        if (o_1)
            goto label_21136;
        
        *(eax_1 - 0x5c) &= 0x49;
        
        while (true)
        {
            char temp2_1 = *(ecx_3 - 5);
            uint8_t temp1_2 = eax_1 % temp2_1;
            eax_1 = eax_1 / temp2_1;
            *eax_1[1] = temp1_2;
            eax_1 = *0x80798049;
            *(ebx - 0x30) -= esp;
            char temp1_3 = eax_1 % arg4[-2];
            eax_1 = eax_1 / arg4[-2];
            *eax_1[1] = temp1_3;
            char temp7_1 = *(eax_1 + 0x488d2100);
            *(eax_1 + 0x488d2100) <<= 1;
            z_1 = !(temp7_1 & 0x7f);
            o_1 = /* o_1 = unimplemented  {shl byte [eax+0x488d2100], 0x1} */;
            *(ecx_3 - 0x7a) = *arg2[1];
            arg1 = ecx_3 - 1;
            
            if (!z_1 && !arg1)
            {
                int32_t temp8_1 = *(ebx - 0x7d8e77b8);
                *(ebx - 0x7d8e77b8) &= arg1;
                z_1 = !(temp8_1 & arg1);
                o_1 = false;
                break;
            }
            
            if (o_1)
                break;
            
            *(eax_1 - 0x498e77b8) += arg5;
            void* ecx = arg1 - 1;
            *(ecx - 0x60);
            *ecx &= 0xb4;
            *(ecx + 0x63) = *arg2[1];
            *arg4;
            char temp9_1 = *ecx;
            *ecx &= 0x7f;
            bool z = !(temp9_1 & 0x7f);
            bool s_1 = (temp9_1 & 0x7f) < 0;
            arg5[-0xfed9442] = ~arg5[-0xfed9442];
            *(arg3 + 0x8690948);
            arg3 = *(arg3 + 0x8690948) * 0x43;
            bool o = /* bool o = unimplemented  {imul ebp, dword [ebp+0x8690948], 0x43} */;
            
            while (!z && s_1 == o)
            {
                ecx -= 1;
                *(ebx - 0x53) u>>= 0x48;
                *(ecx + 8) |= arg3;
                void* temp11_1 = ebx;
                ebx += 1;
                z = temp11_1 == 0xffffffff;
                s_1 = temp11_1 + 1 < 0;
                o = temp11_1 + 1;
            }
            
            int32_t eflags = __cli(eflags);
            *arg5;
            char* edi;
            bool d;
            
            if (d)
                edi = arg5 - 1;
            else
                edi = arg5 + 1;
            
            *(arg4 + 0x2182e197);
            *(ebx - 0x7fb65308);
            ecx ^= 0x81;
            *(eax_1 - 0x7f0a3049) += esp;
            *(esp - 4) = eax_1 - 1;
            *(esp - 8) = ecx;
            *(esp - 0xc) = arg2;
            *(esp - 0x10) = ebx;
            *(esp - 0x14) = esp - 0x10;
            *(esp - 0x18) = arg3;
            *(esp - 0x1c) = arg4;
            *(esp - 0x20) = edi;
            int16_t temp0_1 = *(esp - 0x20);
            esp -= 0x1c;
            d = TEST_BITD(temp0_1, 0xa);
            char temp1_1 = (eax_1 - 1) % *(ebx + (edi << 3) - 0x59);
            eax_1 = (eax_1 - 1) / *(ebx + (edi << 3) - 0x59);
            *eax_1[1] = temp1_1;
            *(ecx - 0x82);
            *(ecx - 2) -= 0x7e;
            *(ecx - 2 + (arg2 << 3) + 0x6080f5cf) -= eax_1;
            
            if (d)
            {
                *edi = *arg4;
                arg5 = edi - 1;
                arg4 -= 1;
            }
            else
            {
                *edi = *arg4;
                arg5 = &edi[1];
                arg4 += 1;
            }
            
            ecx_3 = ecx - 3;
        }
    }
}

int32_t __convention("regparm") sub_211d9(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4 @ esi, int32_t* arg5 @ edi)
{
    arg1 = arg1 * arg1;
    int32_t eflags;
    __sti(eflags);
    bool cond:0 = !(*arg1 & *arg1[1]);
    void* eax;
    int32_t ecx_1;
    int32_t edx;
    eax = 0x7f6b9232();
    *arg5 = eax;
    int32_t ebx;
    
    if (!cond:0 && ecx_1 == 1)
    {
        *(ebx - 0x7c);
        int16_t ss;
        int32_t* eax_1 = ss;
        *eax_1 &= 0xffffff95;
        *(ecx_1 + 0x7c) -= 0xf6;
        /* undefined */
    }
    
    *(eax - 0x1bde8000) &= arg4;
    void* var_4 = eax;
    int32_t var_8 = ecx_1 - 1;
    int32_t var_c = edx;
    int32_t var_10 = ebx;
    int32_t* var_14 = &var_10;
    int32_t var_1c = arg4;
    void* var_20 = &arg5[1];
    trap(0xd);
}

int32_t __convention("regparm") sub_21389(char* arg1, int32_t, void* arg3)
{
    *(arg3 - 0x35ff3c16) ^= arg1;
    *(arg3 - 0x7fdc7f1f) |= 0xea;
    *arg1 = ROLB(*arg1, 0x81);
    /* undefined */
}

long double __convention("regparm") sub_213a0(int32_t* arg1, int32_t arg2, void* arg3, void* arg4 @ ebp, void* arg5 @ esi, void** arg6 @ edi, long double arg7 @ st0)
{
    *0x2984b348 = RRCD(*0x2984b348, 0x59, arg2 < 0x82ca00c3);
    bool c = /* bool c = unimplemented  {rcr dword [0x2984b348], 0x59} */;
    void* ebx;
    
    if (c)
    {
        long double result = arg7 + *(arg3 - 0x77b7a8df) + *arg3;
        void* eax = 0xf9304972;
        
        while (true)
        {
            *arg3 += eax;
            *(arg2 - 0x3a5adf42) &= *(arg2 + 0x7d35ff3d)[1];
            char temp6_1 = *(ebx - 0x50);
            *(ebx - 0x50) |= *(arg2 + 0x7d35ff3d)[1];
            arg3 -= 1;
            
            if (temp6_1 | *(arg2 + 0x7d35ff3d)[1] && !arg3)
            {
                *(ebx - 0x7f) += *ebx[1];
                *(eax + ((arg2 + 0x7d35ff3d) << 3) - 0x1e5cde80) -= arg4;
                void* edx_1;
                edx_1 = (arg2 + 0x7d35ff3d) + 0x40;
                *(arg3 + 0x691380e9) += eax;
                /* undefined */
            }
            
            if (true)
                break;
            
            arg3 = (arg3 - 1) ^ *ebx[1];
        }
        
        int32_t eflags;
        int32_t eflags_1;
        char temp0_1;
        temp0_1 = __daa(eax, eflags);
        eax = temp0_1;
        return result;
    }
    
    *arg1;
    *arg1 &= arg3;
    arg3 = arg3 + *ebx[1];
    
    while (true)
    {
        *ebx[1] = 1;
        *(arg1 - 0x6efb6c2) s>>= 0xdd;
        arg1[0x4124f2e] += &__return_addr;
        void* eax_1 = arg1 + *arg3;
        char temp7_1 = *(eax_1 + 0x493ae197);
        bool cond:0_1 = temp7_1 >= 0xc0;
        
        if (temp7_1 < 0xc0)
            break;
        
        while (true)
        {
            *(arg4 - 0x3fb6bd04) = ~*(arg4 - 0x3fb6bd04);
            
            if (!cond:0_1)
                break;
            
            eax_1 &= *(arg5 + 0x67494a20);
            *arg5;
            *arg3 &= 0x67;
            *(ebx + 0x7421b0fc) = -(*(ebx + 0x7421b0fc));
            char temp1_1 = eax_1 % *(arg5 - 1);
            eax_1 = eax_1 / *(arg5 - 1);
            *eax_1[1] = temp1_1;
            char temp9_1 = *arg3 & 0x67;
            *arg3 = temp9_1;
            cond:0_1 = temp9_1 >= 0;
        }
        
        arg1 = 0xf9104940;
    }
    
    *arg3;
    bool o_2;
    
    do
    {
        *arg3;
        int32_t eax_2;
        eax_2 = *0x822f84b0;
        *(arg2 - 0x7a81cfa2);
        *(arg2 - 0x7a81cfa2) = ROLB(*(arg2 - 0x7a81cfa2), 1);
        /* unimplemented  {rol byte [edx+0x8483121], 0x1} */
        o_2 = /* o_2 = unimplemented  {rol byte [edx+0x8483121], 0x1} */;
    } while (o_2);
    *(arg5 - 0x1e35d880);
    *arg6 &= arg4;
    *(arg3 - 0x80) = *(arg2 + 0x7d35ff3d)[1];
    *(arg5 - 0x7ee23e1f) &= arg2 + 0x7d35ff3d;
    *(arg2 - 0x57c63bd9);
    *(arg2 - 0x57c63bd9);
    *(arg4 - 0x80) = *(arg4 - 0x80) - (arg2 + 0x7d35ff3c);
    /* undefined */
}

int32_t __convention("regparm") sub_2147a(int32_t arg1)
{
    /* undefined */
}

int32_t __convention("regparm") sub_214ca(int32_t arg1)
{
    *0x16f67421 = arg1;
    int32_t ebx;
    /* jump -> *(ebx + 0xabf66621) */
}

int32_t sub_217ce() __pure
{
    return;
}

int32_t __convention("regparm") sub_2185f(void* arg1, void* arg2, int32_t arg3, void* arg4 @ ebp, void* arg5 @ esi, int32_t* arg6 @ edi, long double arg7 @ st0)
{
    if (arg1 >= arg3)
    {
        *arg3;
        void* var_4_1 = arg1;
        *(arg2 + (arg4 << 3) + 0x1dc001c4);
        int32_t ebx;
        ebx = 0x4a;
        *(arg4 - 0x18);
        char* ecx_3 = arg3 & *(arg4 - 0x18);
        *ecx_3 = *ecx_3 + 3;
        *(arg5 + 0x21) &= *(ebx - 1)[1];
        void* var_8_1 = arg1;
        char* var_c_1 = ecx_3;
        void* var_10_1 = arg2 - 1;
        char* var_14 = ebx - 1;
        int32_t* var_18_1 = &var_14;
        void* var_1c_1 = arg4;
        void* var_20_1 = arg5;
        int32_t* var_24_1 = arg6;
        ecx_3[0x7c4785ff];
        int32_t eax_5 = 0x8047abff & *(arg5 + 0x66494520);
        char temp1_2 = eax_5 % *(arg2 - 1)[1];
        eax_5 = eax_5 / *(arg2 - 1)[1];
        *eax_5[1] = temp1_2;
        *(ecx_3 - 0x3100982) += 1;
        *ecx_3 &= 0x3f;
        ecx_3[0xffffff81] = *(arg2 - 1)[1];
        *arg6 &= arg6;
        arg2 -= 2;
        *arg6;
        void* edi_2 = arg6 + 1;
        *(arg4 - 0x18);
        void* ecx = ecx_3 & *(arg4 - 0x18);
        *ecx = *ecx - 0x7d;
        *(arg5 + 0x21) &= *(ebx - 1)[1];
        void* var_28_1 = eax_5 - 1;
        void* var_2c_1 = ecx;
        void* var_30_1 = arg2;
        char* var_34 = ebx - 1;
        int32_t* var_38_1 = &var_34;
        void* var_3c_1 = arg4;
        void* var_40_1 = arg5;
        void* var_44_1 = edi_2;
        void* eax_6;
        eax_6 = (eax_5 - 1) * *(ecx - 4);
        *(edi_2 + 0x7c);
        eax_6 = eax_6 * *(eax_6 - 0x7fb85401);
        arg1 = (eax_6 & *(arg5 + 0x66493920)) * *arg2[1];
        *(ecx - 0x3280982) += 1;
        *(arg5 + 0x398e4936);
        bool p_1 = /* bool p_1 = unimplemented  {cmp byte [esi+0x398e4936], 0xc0} */;
        
        if (p_1)
        {
            arg2 = 0x80;
            *ecx &= 0x32;
            /* undefined */
        }
        
        void* edi = edi_2 + 1;
        bool cond:1_1 = edi_2 == 0xffffffff;
        int32_t eflags;
        char* var_54;
        
        if (edi_2 >= 0xffffffff)
        {
            void* var_48_2 = arg1;
            void* var_4c_2 = ecx;
            void* var_50_2 = arg2;
            var_54 = ebx - 1;
            int32_t* var_58_2 = &var_54;
            void* var_5c_2 = arg4;
            void* var_60_2 = arg5;
            void* var_64_2 = edi;
            label_218b8:
            *edi = arg1;
            edi += 5;
            *(ebx - 1) &= 0x86;
            *ecx &= (ebx - 1);
            arg1 = arg1 * *(arg5 + 0x672185ff);
            char temp2_1 = *(ebx - 1);
            uint8_t temp1_1 = arg1 % temp2_1;
            arg1 = arg1 / temp2_1;
            *arg1[1] = temp1_1;
            eflags = __sti(eflags);
            arg1 = 0x21;
            ecx = (ecx - 1) & 0x91;
            cond:1_1 = !ecx;
        }
        else if (edi_2 > 0xffffffff)
        {
            void* var_48_1 = arg1;
            void* var_4c_1 = ecx;
            void* var_50_1 = arg2;
            var_54 = ebx - 1;
            char** var_58_1 = &var_54;
            void* var_5c_1 = arg4;
            void* var_60_1 = arg5;
            void* var_64_1 = edi;
            arg1 = arg1 * *ecx;
            *(edi + 0x7c);
            arg1 = arg1 * *(arg1 - 4);
            goto label_218b8;
        }
        
        if (cond:1_1 || ecx != 1)
            /* undefined */
        
        *((edi << 3) + 0xf66521b0) = ~*((edi << 3) + 0xf66521b0);
        
        if (arg1 & 0x89b080ff && ecx == 2)
        {
            int32_t eflags_1;
            char temp0_2;
            temp0_2 = __das(arg1, eflags);
            arg1 = temp0_2;
            void** eax_1 = arg1 - 0x7e;
            *eax_1 &= arg2;
            /* undefined */
        }
    }
    
    *0x80718848 &= arg4;
    *(arg4 - 0x7ee23e1f) &= arg2;
    *(arg2 + 0x2903c4ea);
    *(arg2 + 0x2903c4ea);
    *(arg4 - 0x80) = *(arg4 - 0x80) - (arg2 - 1);
    /* undefined */
}

int32_t __convention("regparm") sub_21880(void* arg1, int32_t, int32_t arg3)
{
    *(arg1 - 0x7f) -= arg3;
    /* undefined */
}

int32_t __convention("regparm") sub_2193c(int32_t arg1, int32_t arg2)
{
    int32_t eflags;
    __cli(eflags);
    int32_t eax_1;
    uint64_t* ebx;
    int16_t es;
    eax_1 = __les_gprz_memp(*ebx);
    *(arg2 - 0x7c0900c2) &= 0x83;
    /* undefined */
}

int32_t __convention("regparm") sub_21952(int32_t arg1, int32_t arg2, void* arg3)
{
    arg2 -= 0xc0;
    *(arg3 - 0xcec7f16) += arg1;
    int32_t eax_1;
    uint64_t* ebx;
    int16_t es;
    eax_1 = __les_gprz_memp(*ebx);
    *(arg2 - 0x7d8900c2) &= 0xffffff83;
    /* undefined */
}

int32_t __convention("regparm") sub_21970(int32_t arg1, int32_t arg2, void* arg3, void* arg4 @ ebp)
{
    arg2 -= 0xc0;
    *(arg3 - 0x14ec7f16) += arg1;
    int32_t* ebx;
    *ebx = arg2 + 0x7476ff3e;
    int32_t result;
    int16_t es;
    result = __les_gprz_memp(*ebx);
    *(arg2 + 0x7476ff3e);
    arg3 &= 0xa1;
    
    if (!arg3 || arg3 != 1)
        return result;
    
    *(&__return_addr + ebx - 4) = arg4;
    int32_t edx_2;
    edx_2 = (arg2 + 0x7476ff7b) + 0x40;
    *(arg3 - 0x1dec7f17) += result;
    int32_t eax_2;
    int16_t es_1;
    eax_2 = __les_gprz_memp(*ebx);
    *(edx_2 - 0x7c8900c2);
    *(arg4 - 0x80) = *(arg4 - 0x80) - (edx_2 - 0x7c890085);
    /* undefined */
}

int32_t __convention("regparm") sub_219ba(void* arg1, long double arg2 @ st0)
{
    *(arg1 - 0x7f) = arg2;
    /* undefined */
}

void __convention("fastcall") sub_219c4(uint64_t* arg1, char* arg2, void* arg3 @ ebp, int32_t arg4 @ esi, long double arg5 @ st0) __noreturn
{
    int32_t eax;
    uint64_t* ebx;
    int16_t es;
    eax = __les_gprz_memp(*ebx);
    char temp0 = *arg2;
    *arg2 = *eax[1];
    *eax[1] = temp0;
    int32_t edx_2 = arg2 + 0x3e + ebx - 1;
    *(arg3 - 0x1f) = *(arg3 - 0x1f) - edx_2;
    bool c_1 = /* bool c_1 = unimplemented  {sbb dword [ebp-0x1f], edx} */;
    ebx = 0x84;
    *(eax - 0x1dc1b34c - 1) -= edx_2;
    (eax - 0x1dc1b34c - 1)[arg4];
    int32_t eax_3;
    int16_t es_1;
    eax_3 = __les_gprz_memp(*arg1);
    *arg1;
    *arg1 = ROLB(*arg1, 0xc0);
    /* unimplemented  {rol byte [ecx], 0xc0} */
    breakpoint();
}

int32_t sub_21a3a() __pure
{
    return;
}

int32_t __convention("regparm") sub_21a43(int32_t arg1, int32_t arg2, void* arg3)
{
    int32_t eax = arg1 + 0x15bb4cb6;
    char temp1 = arg3;
    char temp2 = arg3;
    arg3 *= 2;
    arg2 -= 0xc0;
    *(arg3 - 0x4dec7f16) += (eax - 0x55da4ab2);
    /* undefined */
}

int32_t __convention("regparm") sub_21a6e(int32_t arg1, int32_t arg2, void* arg3)
{
    arg2 -= 0xc0;
    *(arg3 - 0x53ec7f16) += arg1;
    int32_t edx;
    char* ebx;
    edx = *ebx;
    /* undefined */
}

int32_t __convention("regparm") sub_21a88(int32_t arg1, int32_t arg2, void* arg3)
{
    arg2 -= 0xc0;
    *(arg3 - 0x5aec7f16) += arg1;
    /* undefined */
}

int32_t __convention("regparm") sub_21aa0(int32_t arg1, int32_t arg2, void* arg3)
{
    arg2 -= 0xc0;
    *(arg3 - 0x60ec7f16) += arg1;
    int32_t edx;
    char* ebx;
    edx = *ebx;
    /* undefined */
}

int32_t __convention("regparm") sub_21aba(int32_t arg1, int32_t arg2, int32_t arg3)
{
    arg3 &= 0x99;
    
    if (arg3 && arg3 == 1)
        /* undefined */
    
    arg2 = 0xb9;
    /* undefined */
}

int32_t __convention("regparm") sub_21ac6(int16_t arg1, int32_t arg2)
{
    /* undefined */
}

int32_t __convention("regparm") sub_21ad6(int32_t arg1, int32_t arg2, void* arg3)
{
    arg2 -= 0xc0;
    *(arg3 - 0x6dec7f16) += arg1;
    /* undefined */
}

void* __convention("regparm") sub_21aee(int32_t arg1, void* arg2, int32_t arg3, void* arg4 @ esi, void** arg5 @ edi, int64_t arg6 @ st7)
{
    bool z;
    int32_t* ebx;
    bool c;
    
    if (z || arg3 != 1)
    {
        *ebx = *ebx + arg1;
        *(arg4 + 0x21) &= *ebx[1];
        int32_t var_4_1 = arg1;
        int32_t var_8_1 = arg3 - 1;
        void* var_c_1 = arg2;
        int32_t* var_10 = ebx;
        int32_t** var_14_1 = &var_10;
        int32_t ebp;
        int32_t var_18_1 = ebp;
        void* var_1c_1 = arg4;
        void** var_20 = arg5;
        char temp2_1 = *ebx[1];
        uint8_t temp1_1 = arg1 % temp2_1;
        arg1 = arg1 / temp2_1;
        *arg1[1] = temp1_1;
        
        if (!(arg5[-0x1e] & arg1) || arg3 != 2)
        {
            *(arg3 - 0x7faa25e6) += (arg3 - 2);
            /* undefined */
        }
        
        *(arg3 - 2) &= 0x60;
        *(arg3 - 2) &= 0x80;
        *(arg2 - 0x7fffedbf) += arg1 + &var_20 - 1;
        *(arg4 * 9 + 0x24) &= arg5;
        *arg5 = arg1 + &var_20 - 1;
        void* edi = arg5 - 4;
        *(ebx - 1) &= 0x86;
        char temp3_1 = *(arg2 + 0x6af66649) & (arg1 + &var_20 - 1);
        *(arg2 + 0x6af66649) = temp3_1;
        
        if (temp3_1 > 0)
        {
            *(arg3 - 2) -= 0x80;
            *(arg2 - 0x2d4b63bf) += arg1 + &var_20 - 1;
            *(arg3 - 0x31) -= 0x48;
            ebx[-0x20] |= (arg1 + &var_20 - 1);
            *(arg3 - 0x7f1e7fe2) = ROLD(*(arg3 - 0x7f1e7fe2), 1);
            arg2 += *arg2[1];
            *(edi + 1) = edi + 1;
            /* undefined */
        }
        
        if (temp3_1 < 0)
            return arg1 + &var_20 - 1;
    }
    else
    {
        ebx = 0xc1;
        __pminub_mmxq_memq(arg6, *(arg1 - 0x2984b348 + (arg4 << 2) + 0x44));
    }
    /* undefined */
}

int32_t __convention("regparm") sub_21b64(void* arg1, uint16_t arg2, int32_t arg3, int32_t* arg4 @ ebp, int32_t* arg5 @ edi)
{
    int32_t eflags;
    int32_t eflags_1;
    char temp0_1;
    char temp1;
    temp0_1 = __aas(arg1, *arg1[1], eflags);
    arg1 = temp0_1;
    *arg1[1] = temp1;
    __out_dx_oeax(arg2, arg1, eflags_1);
    *(arg1 + 0x7ebe80be);
    __out_immb_al(0xc8, arg1, eflags_1);
    *(arg3 - 0x39) -= 0x48;
    *arg4;
    arg4[1];
    void* ebx;
    *(ebx - 0x7f) |= arg1;
    *(arg3 - 0x7f1e7fe0) = ROLD(*(arg3 - 0x7f1e7fe0), 1);
    arg2 += *arg2[1];
    *arg5 = arg5;
    /* undefined */
}

int16_t __convention("regparm") sub_21c2e(void* arg1, uint16_t arg2, int32_t arg3, void* arg4, void* arg5, int32_t arg6, void* arg7, int32_t arg8, int32_t arg9, int32_t arg10, int32_t arg11, void* arg12, int32_t arg13)
{
    int32_t eflags;
    int32_t eflags_2;
    char temp0_1;
    char temp1_1;
    temp0_1 = __aas(arg1, *arg1[1], eflags);
    arg1 = temp0_1;
    *arg1[1] = temp1_1;
    __out_dx_oeax(arg2, arg1, eflags_2);
    *(arg1 + 0x7ebe80be);
    __out_immb_al(0x99, arg1, eflags_2);
    *(arg3 - 0x81) -= 3;
    *(arg4 + 0x6160f580);
    *(arg4 + 0x6160f580) |= 0x90;
    *(arg7 + 0x498f7190) = *(arg7 + 0x498f7190) - 0x698031a0;
    void* ecx_2;
    *ecx_2[1] = *arg7[1] << 0xf0;
    int32_t temp2 = *(arg6 + (ecx_2 << 1) + 0x618830a0);
    *(arg6 + (ecx_2 << 1) + 0x618830a0) += ecx_2;
    *(arg5 - 0x80) = arg6;
    bool o = /* bool o = unimplemented  {imul eax, eax, 0x8841f0f1} */;
    
    if (temp2 == -(ecx_2) || temp2 + ecx_2 < 0 != o)
    {
        *(arg12 - 0x40) -= 0xf1;
        /* undefined */
    }
    
    *(arg13 + (arg12 << 1) - 0x9a19e78) &= arg12;
    char* ecx_4 = *(arg12 - 0x80);
    ecx_4[0x5e] = *(arg13 * -0x3f0f - 1)[1];
    __sti(eflags_2);
    *ecx_4 &= 0x9c;
    ecx_4 &= 0xf1;
    return (arg13 * -0x3f0f - 1) * *arg11[1];
}

int32_t __convention("regparm") sub_21c96(void* arg1, int16_t arg2, int32_t arg3, int32_t* arg4 @ edi)
{
    *(arg1 - 0x80) = __return_addr;
    int32_t eflags;
    int32_t* eax = __in_oeax_immb(0x80, eflags);
    bool z;
    
    if (z || arg3 != 1)
    {
        *eax &= eax;
        *arg4 = arg4;
        /* undefined */
    }
    
    int16_t __return_addr_1;
    __return_addr = __return_addr_1;
    *(arg3 - 1) &= 0x8c;
    *(arg3 - 1) &= 0x84;
    *(arg3 - 1) &= 0xb4;
    __out_dx_al(arg2, eax, eflags);
    char* ecx;
    ecx = (arg3 - 1) & 0xad;
    char* eax_1;
    char ecx_1;
    eax_1 = 0x47865d22(__return_addr_1, __return_addr_1);
    *arg4 &= 0x47a22680;
    *eax_1 &= 0x81;
    *(eax_1 - 0x7a06780f) &= eax_1;
    void* edi = arg4 + 1;
    bool cond:0 = (eax_1 & 0x47) >= 0;
    
    while (cond:0)
    {
        ecx_1 ^= 0x87;
        cond:0 = (*(edi - 0x58) & eax_1) >= 0;
        edi += 1;
    }
    
    int16_t ebx;
    *ebx[1] = *eax_1[1];
    int32_t eax_2;
    char* ecx_2;
    int16_t edx;
    eax_2 = 0x47875f4c();
    *(edi - 0x69);
    *ecx_2 &= 0xd0;
    edx += *edx[1];
    *(edi + 1) = edi + 1;
    /* undefined */
}

int32_t __convention("regparm") sub_21cee(void* arg1, uint16_t arg2, char* arg3)
{
    int32_t eflags;
    int32_t eflags_2;
    char temp0_1;
    char temp1_1;
    temp0_1 = __aas(arg1, *arg1[1], eflags);
    arg1 = temp0_1;
    *arg1[1] = temp1_1;
    __out_dx_oeax(arg2, arg1, eflags_2);
    *(arg1 + 0x7ebe80be);
    __out_immb_al(0x85, arg1, eflags_2);
    __cli(eflags_2);
    bool c_1;
    
    do
    {
        char temp0 = arg3;
        int16_t ebx;
        arg3 = *ebx[1];
        *ebx[1] = temp0;
        arg1 = *arg2[1];
        *arg3;
        *arg3 = ROLB(*arg3, 1);
        c_1 = /* c_1 = unimplemented  {rol byte [ecx], 0x1} */;
    } while (!c_1);
    /* undefined */
}

int32_t sub_21d09(void* arg1 @ ebp, char* arg2 @ esi, void* arg3 @ edi)
{
    *arg2 = RORB(*arg2, 1);
    *(arg1 - 0x294098d) = *(arg1 - 0x294098d) - 0x60;
    *(arg3 - 0x50);
    int32_t eflags;
    char temp0;
    char temp1;
    temp0 = __aam_immb(0xb8, 0x85);
    arg2[0xf20021d0];
    *(arg3 + 5) = arg3 + 5;
    /* undefined */
}

int32_t __convention("regparm") sub_21d98(int32_t arg1, uint16_t arg2, int32_t* arg3, void* arg4 @ esi, char* arg5 @ edi)
{
    int32_t eflags;
    int32_t eflags_1;
    char temp0_1;
    char temp1_1;
    temp0_1 = __aas(arg1, *arg1[1], eflags);
    arg1 = temp0_1;
    *arg1[1] = temp1_1;
    __out_dx_oeax(arg2, arg1, eflags_1);
    
    while (true)
    {
        *(arg5 - 0x6f0f7b1f);
        *(arg4 - 0xa) = &arg5[*(arg4 - 0xa)];
        bool z_1;
        bool s_1;
        bool o_1;
        
        do
        {
            int16_t* esp;
            *esp;
            esp = &esp[1];
            label_21da8:
            *arg5 = *arg4;
            arg5 = &arg5[1];
            arg4 += 1;
            char temp1 = *(arg4 - 0xa);
            *(arg4 - 0xa) = &arg5[*(arg4 - 0xa)];
            bool c_1 = &arg5[temp1] < temp1;
            
            do
            {
                char* temp2_1 = arg5;
                bool cond:0_1 = c_1;
                arg5 = temp2_1 + arg1;
                c_1 = temp2_1 + arg1 < temp2_1 || (cond:0_1 && temp2_1 + arg1 == temp2_1);
                z_1 = !(temp2_1 + arg1);
                s_1 = temp2_1 + arg1 < 0;
                o_1 = /* o_1 = unimplemented  {adc edi, eax} */;
                
                if (z_1 || s_1 != o_1)
                    goto label_21da8;
                
                if (o_1)
                {
                    *arg3 &= 0x180bcf0;
                    arg3 &= 0xad;
                    char eax = 0xb1056041();
                    arg5[8];
                    arg5[8] = eax;
                    /* undefined */
                }
            } while (!z_1 && s_1 == o_1);
        } while (!z_1 && s_1 == o_1);
        __out_dx_oeax(arg2, arg1, eflags_1);
    }
}

int32_t __convention("regparm") sub_21dc9(char* arg1, int32_t arg2 @ esi, void* arg3 @ edi)
{
    __int1();
    *arg1 |= 0xb4;
    int32_t eflags;
    char temp0;
    char temp1;
    temp0 = __aam_immb(0xb8, arg1);
    arg1 = temp0;
    *arg1[1] = temp1;
    *(arg2 - 0xdffde30);
    *(arg3 + 1) = arg3 + 1;
    /* undefined */
}

int32_t __convention("regparm") sub_21ddc(void* arg1, uint16_t arg2, char* arg3 @ esi, int32_t* arg4 @ edi)
{
    int32_t eflags;
    int32_t eflags_1;
    char temp0_1;
    char temp1;
    temp0_1 = __aas(arg1, *arg1[1], eflags);
    arg1 = temp0_1;
    *arg1[1] = temp1;
    __out_dx_oeax(arg2, arg1, eflags_1);
    *(arg1 + 0x7ebe80be);
    __out_immb_al(0x38, arg1, eflags_1);
    *arg3 |= 0x81;
    *(arg1 - 0x7e477793) <<= 1;
    *(arg1 - 0x2fde7f1f) &= arg1;
    arg2 += *arg2[1];
    *arg4 = arg4;
    /* undefined */
}

int32_t __convention("regparm") sub_21e04(void* arg1, uint16_t arg2, int32_t* arg3, int32_t* arg4 @ edi)
{
    int32_t eflags;
    int32_t eflags_1;
    char temp0_1;
    char temp1;
    temp0_1 = __aas(arg1, *arg1[1], eflags);
    arg1 = temp0_1;
    *arg1[1] = temp1;
    __out_dx_oeax(arg2, arg1, eflags_1);
    *(arg1 + 0x7ebe80be);
    __out_immb_al(0x82, arg1, eflags_1);
    arg1 -= 0x82;
    *(arg1 + 0x6a) <<= 1;
    *arg3 -= 0x2181d081;
    arg3 &= 0x80;
    arg2 += *arg2[1];
    *arg4 = arg4;
    /* undefined */
}

int32_t __convention("regparm") sub_21e2c(void* arg1, uint16_t arg2, int32_t* arg3, int32_t* arg4 @ edi)
{
    int32_t eflags;
    int32_t eflags_1;
    char temp0_1;
    char temp1;
    temp0_1 = __aas(arg1, *arg1[1], eflags);
    arg1 = temp0_1;
    *arg1[1] = temp1;
    __out_dx_oeax(arg2, arg1, eflags_1);
    *(arg1 + 0x7ebe80be);
    __out_immb_al(0x80, arg1, eflags_1);
    __int1();
    int16_t ebx;
    *(arg1 - 0x4777667b) = *ebx[1];
    *arg3 &= 0x2180e180;
    *(arg1 + 0x21d0be80) s>>= 1;
    arg2 += *arg2[1];
    *arg4 = arg4;
    /* undefined */
}

int32_t __convention("regparm") sub_21e54(void* arg1, void* arg2, int16_t arg3, void* arg4 @ edi)
{
    int32_t eflags;
    int32_t eflags_2;
    char temp0_1;
    char temp1_1;
    temp0_1 = __aas(arg1, *arg1[1], eflags);
    arg1 = temp0_1;
    *arg1[1] = temp1_1;
    __out_dx_oeax(arg2, arg1, eflags_2);
    *(arg1 + 0x7ebe80be);
    __out_immb_al(0x80, arg1, eflags_2);
    *(arg2 + 0x61);
    *(arg2 + 0x61) &= *arg3[1];
    int32_t var_4 = 8;
    bool c_1;
    
    do
    {
        *arg4 = arg1;
        arg4 += 2;
        *(arg4 - 0x60);
        *(arg4 - 0x60) = ROLD(*(arg4 - 0x60), 0x47);
        c_1 = /* c_1 = unimplemented  {rol dword [edi-0x60], 0x47} */;
    } while (!c_1);
    void* temp0 = *(arg4 - 0x20);
    *(arg4 - 0x20) = arg1;
    char* ecx = *(temp0 - 0x7fde7e48) * 0xffffffe1;
    *ecx &= 0xe8;
    ecx ^= 0xb0;
    __cli(eflags_2);
    *0x52a5e253 |= *((arg2 - 0x2f57d37e) | arg4)[1];
    int16_t edx_1;
    edx_1 = 0x48;
    ecx[0x3f] = 0;
    /* undefined */
}

int32_t __convention("regparm") sub_21ea2(int16_t arg1, int32_t* arg2 @ esi)
{
    void* ecx;
    ecx = *arg1[1];
    void* var_4 = ecx;
    *(ecx + 0x3f) = *(*arg2 - 1)[1];
    /* undefined */
}

int32_t __convention("regparm") sub_21f09(void* arg1, uint16_t arg2, char* arg3, char* arg4 @ esi, int32_t arg5 @ edi)
{
    *(arg1 - 0xe7f567f);
    arg1 = *0x58f67347;
    *(arg1 + 0x190f084) &= *arg2[1];
    *(arg1 - 0x4560982);
    arg1 = *0x98f67347;
    arg3 ^= 0xac;
    int32_t eflags;
    __cli(eflags);
    *arg3 -= 0x15;
    int16_t ebx;
    *ebx[1] = RORB(*ebx[1], 1);
    __int1();
    arg3[0xffffff89] += arg2;
    arg3[0x3f] = *(arg1 - 1)[1];
    /* undefined */
}

int32_t __convention("regparm") sub_21f44(int32_t arg1, int16_t arg2, char* arg3, char arg4 @ esi, void* arg5 @ edi)
{
    arg1 |= 0xe6;
    arg1 = *0x88f67347;
    int32_t eflags;
    
    do
    {
        arg3 ^= 0x9c;
        eflags = __cli(eflags);
        int32_t esp;
        int16_t es;
        *(esp - 4) = es;
        esp -= 4;
        __out_immb_al(0xa0, arg1, eflags);
        arg5 += 1;
    } while (arg3 >= 0);
    
    __int1();
    int32_t eflags_1 = __cli(eflags);
    *arg3 &= 0x2d;
    __out_immb_al(0x84, arg4, eflags_1);
    __in_al_dx(arg2, eflags_1);
    arg3 &= 0xad;
    char* ecx;
    int16_t edx;
    edx = 0xb1045fdd();
    *(arg5 - 0x31);
    __int1();
    *ecx |= 0xac;
    *(arg5 + 1) &= 0xd4;
    edx += *edx[1];
    *(arg5 + 1) = arg5 + 1;
    /* undefined */
}

int32_t __convention("regparm") sub_21f82(void* arg1, uint16_t arg2, char* arg3, int32_t arg4 @ edi)
{
    int32_t eflags;
    int32_t eflags_1;
    char temp0_2;
    char temp1;
    temp0_2 = __aas(arg1, *arg1[1], eflags);
    arg1 = temp0_2;
    *arg1[1] = temp1;
    __out_dx_oeax(arg2, arg1, eflags_1);
    *(arg1 + 0x7ebe80be);
    __out_immb_al(0xa0, arg1, eflags_1);
    int32_t* edi;
    int32_t temp0;
    temp0 = __insd(arg4, arg2, eflags_1);
    *edi = temp0;
    int16_t ebx;
    *(arg1 - 0x1e7fde7f) = *ebx[1];
    *arg3 &= 0xd0;
    arg2 += *arg2[1];
    *edi = edi;
    /* undefined */
}

int32_t __convention("regparm") sub_21fa4(void* arg1, uint16_t arg2, int32_t* arg3, void** arg4 @ edi)
{
    int32_t eflags;
    int32_t eflags_1;
    char temp0_1;
    char temp1;
    temp0_1 = __aas(arg1, *arg1[1], eflags);
    arg1 = temp0_1;
    *arg1[1] = temp1;
    __out_dx_oeax(arg2, arg1, eflags_1);
    *(arg1 + 0x7ebe80be);
    __out_immb_al(0x80, arg1, eflags_1);
    __int1();
    *arg4 = arg1;
    void* edi = &arg4[1];
    int16_t ebx;
    *(arg1 - 0x4777667d) = *ebx[1];
    *arg3 &= 0x2180e180;
    *(arg1 + 0x21d0be80) s>>= 1;
    arg2 += *arg2[1];
    *edi = edi;
    /* undefined */
}

int32_t __convention("regparm") sub_21fcc(void* arg1, void* arg2, int32_t arg3)
{
    int32_t eflags;
    int32_t eflags_3;
    char temp0_1;
    char temp1;
    temp0_1 = __aas(arg1, *arg1[1], eflags);
    arg1 = temp0_1;
    *arg1[1] = temp1;
    __out_dx_oeax(arg2, arg1, eflags_3);
    *(arg1 + 0x7ebe80be);
    __out_immb_al(0x80, arg1, eflags_3);
    int32_t eflags_1;
    char temp0;
    temp0 = __daa(arg1, eflags_3);
    arg1 = temp0;
    int32_t var_4 = 0x7f;
    arg1 = 0xf8;
    *(arg2 - 0x60) &= *arg1[1];
    *(arg1 + 0x1cf673b8);
    int32_t var_6 = 0x2181b888;
    arg3 &= 0x80;
    arg3 ^= 0xf7;
    __sti(eflags_1);
    int32_t var_a = arg3;
    return 0xf1cfb0;
}

int32_t __convention("regparm") sub_22009(int16_t arg1, int32_t, void* arg3)
{
    *(arg3 + 0x3f) = *(arg1 - 1)[1];
    /* undefined */
}

int32_t sub_22057()
{
    /* undefined */
}

int32_t sub_220d6(int32_t arg1 @ esi)
{
    /* jump -> arg1 */
}

int32_t sub_22241(int32_t arg1, void* arg2, int32_t arg3, int32_t* arg4, int32_t arg5)
{
    arg4[-0x1e] -= 0xb8;
    *arg4 &= 0x2180e180;
    *(arg2 + 0x21d0be80) s>>= 1;
    int32_t edx;
    edx = 0xa;
    *__return_addr = __return_addr;
    /* undefined */
}

int32_t __convention("regparm") sub_22260(void* arg1, void* arg2, void* arg3, int32_t arg4 @ ebp, void* arg5 @ esi, void** arg6 @ edi)
{
    int32_t eflags;
    int32_t eflags_1;
    char temp0_3;
    char temp1_2;
    temp0_3 = __aas(arg1, *arg1[1], eflags);
    arg1 = temp0_3;
    *arg1[1] = temp1_2;
    __out_dx_oeax(arg2, arg1, eflags_1);
    void* ebx;
    bool c_1;
    int32_t temp7_1;
    
    do
    {
        *(arg1 + 0x7ebe80be);
        __out_immb_al(0xb8, arg1, eflags_1);
        int32_t temp0 = *(arg3 - 0x49);
        *(arg3 - 0x49) = arg4;
        arg4 = temp0;
        *(arg3 - 0x4c) -= 0x48;
        *(arg3 - 0x4c) = *arg1[1];
        int32_t esp;
        *(arg3 - 0x4d) = esp;
        *(arg3 - 0x44) -= 0x1d;
        *arg1[1] = 0x48;
        *(arg3 + 0x6f) = 0x48;
        char temp2_1 = *(arg1 - 0x4c417f06);
        uint8_t temp1 = arg1 % temp2_1;
        arg1 = arg1 / temp2_1;
        *arg1[1] = temp1;
        *arg3 -= 0x43;
        *(arg3 - 0x86) -= 0x69;
        *(arg1 - 0x1e7fde7f) = *ebx[1];
        char temp3_1 = *(arg3 - 6) & 0xa0;
        *(arg3 - 6) = temp3_1;
        arg1 = 0xcf;
        __int1();
        
        if (temp3_1 > 0)
        {
            *arg1;
            *arg1 &= arg3 - 6;
            bool p = /* bool p = unimplemented  {inc ecx} */;
            bool a = /* bool a = unimplemented  {inc ecx} */;
            *arg1[1] = (arg3 - 5 < 0 ? 1 : 0) << 7 | (arg3 == 5 ? 1 : 0) << 6 | (a ? 1 : 0) << 4
                | (p ? 1 : 0) << 2;
            *(arg3 - 0x7d) = arg4;
            *(arg3 + 0x5c) = *(arg1 - 2)[1];
            *(arg3 - 0x63fffe1b);
            *(arg3 - 0x670982e9) -= 0x52417f2e;
            /* undefined */
        }
        
        *arg6 = arg1;
        arg6 = &arg6[1];
        void* temp6_1 = arg1;
        arg1 -= 1;
        *(arg3 - 0x59) = *arg1[1];
        
        if (temp6_1 == 1 || arg3 != 7)
        {
            *(arg3 - 7) <<= 1;
            arg2 += *arg2[1];
            *arg6 = arg6;
            /* undefined */
        }
        
        *(arg3 + 0x38) -= 0x69;
        esp = arg5 * 0x82433569;
        temp7_1 = *(arg5 - 0x5c9e79b7);
        *(arg5 - 0x5c9e79b7) <<= (arg3 - 8);
        c_1 = /* c_1 = unimplemented  {shl dword [esi-0x5c9e79b7], cl} */;
    } while (!(temp7_1 << (arg3 - 8)) || arg3 != 9);
    arg1 = arg1 - 0x7d;
    char temp2_2 = *(arg2 - 1);
    uint8_t temp1_1 = arg1 % temp2_2;
    arg1 = arg1 / temp2_2;
    *arg1[1] = temp1_1;
    *(ebx - 0x68) &= *(arg3 - 9)[1];
    arg1 = 0x84;
    /* undefined */
}

int32_t __convention("regparm") sub_22333(void* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, void* arg6, int16_t arg7, char* arg8, int32_t* arg9, int16_t arg10, int16_t arg11)
{
    *(arg3 - 0x41) -= 0x1d;
    int16_t cs;
    *(arg1 - 0x78) = cs;
    *(__return_addr + 0x3d);
    *(__return_addr + 0x3d) = ROLB(*(__return_addr + 0x3d), 0xe9);
    bool o = /* bool o = unimplemented  {rol byte [edi+0x3d], 0xe9} */;
    
    if (o)
    {
        int32_t* eax;
        eax = *0x72f67d1c;
        /* jump -> *eax */
    }
    
    *arg8 += 0x60;
    *arg8 &= 0x3c;
    *arg8 &= 0x2c;
    *arg8 &= 0x30;
    *arg8 &= 0x50;
    *arg8 &= 0x58;
    *arg8 &= 0x40;
    *arg8;
    *arg8 &= 0xe0;
    arg8[0x61] = *(arg9 - 1)[1];
    *(arg8 - 0x63fffe16);
    int16_t edx;
    edx = arg7 - 1;
    int16_t arg_2e;
    *(arg8 - 0x670982e4) += &arg_2e;
    /* undefined */
}

int32_t __convention("regparm") sub_224e3(int32_t* arg1, int32_t arg2, int32_t arg3, int32_t* arg4 @ edi, long double arg5 @ st0)
{
    char* ecx = arg3 - 1;
    bool z;
    
    if (!z && ecx)
    {
        int32_t ecx_2 = *arg1 * 0x43;
        *(ecx_2 + (arg1 << 2)) &= 0x88488721;
        *0x21800728;
        *0x2180072c;
        *0x21800730;
        *0x21800738;
        *0x2180073c;
        *0x21800740;
        arg1 = *0x21800744;
    }
    else
    {
        *ecx &= 0x40;
        *0x21800728;
        
        while (true)
        {
            *ecx &= 0xf0;
            *arg1[1] = 0x86;
            int32_t* temp1_1 = arg4;
            arg4 += 1;
            
            if (!(temp1_1 + 1))
            {
                *arg1 &= arg1;
                *arg4 = arg4;
                /* undefined */
            }
            
            arg5 = arg5 + *(ecx - 0x78de7edc);
            int32_t* temp2_1 = arg1;
            arg1 -= 1;
            ecx[0xffffff80] = *arg1[1];
            ecx -= 1;
            
            if (temp2_1 != 1 && !ecx)
                break;
            
            *(arg1 + 7) &= arg1;
        }
    }
    
    arg1 &= 0xa8;
    /* undefined */
}

int32_t __convention("regparm") sub_225a0(void* arg1, uint16_t arg2, int32_t arg3, char* arg4 @ esi, int32_t arg5 @ edi)
{
    int32_t eflags;
    int32_t eflags_1;
    char temp0;
    char temp1;
    temp0 = __aas(arg1, *arg1[1], eflags);
    arg1 = temp0;
    *arg1[1] = temp1;
    __out_dx_oeax(arg2, arg1, eflags_1);
    *(arg1 + 0x7ebe80be);
    __out_immb_al(0x7d, arg1, eflags_1);
    *(arg3 - 4);
    *(arg3 - 0x41) -= 0x1f;
    arg1 = *arg4;
    *(arg3 - 0x79) = *(arg1 - 1)[1];
    *(arg3 - 0x81) -= 0x29;
    /* undefined */
}

int32_t __convention("regparm") sub_225bf(int32_t arg1, void* arg2, void* arg3, void* arg4 @ ebp, char* arg5 @ esi, int32_t* arg6 @ edi)
{
    *(arg2 - 0x7f967fb7) u>>= 1;
    int32_t ebx;
    void* ebx_1 = ebx - arg3;
    *(arg3 + 0x694049a9) <<= 1;
    *(arg1 + (arg5 << 3) - 0x982fe68);
    int32_t eax = *(arg1 + (arg5 << 3) - 0x982fe68) * 0x1ca0fcea;
    bool c = /* bool c = unimplemented  {imul eax, dword [eax+esi*8-0x982fe68], 0x1ca0fcea} */;
    bool o = /* bool o = unimplemented  {imul eax, dword [eax+esi*8-0x982fe68], 0x1ca0fcea} */;
    
    if (&*__return_addr[1] < 0 == o)
    {
        *(arg4 - 0xa) += arg6;
        /* undefined */
    }
    
    int32_t eflags;
    __out_immb_oeax(0xfc, eax, eflags);
    char temp3 = eax;
    eax = temp3 - 7;
    eax = *arg5;
    void* esi = &arg5[1];
    *(arg3 - 0x5cbef7df) = *(arg3 - 0x5cbef7df) + eax;
    *(arg3 - 0x78) = arg4;
    int32_t eax_2 = *(arg3 - 0x5ffffe16) * 0x4b;
    void* edx;
    edx = (arg2 + 1) - 1;
    *(arg3 + 0x13f67d1c) += &*__return_addr[1];
    int32_t var_3 = eax_2 - 1;
    void* var_7 = arg3;
    void* var_b = edx;
    void* var_f = ebx_1;
    void** var_13 = &var_f;
    void* var_17 = arg4;
    void* var_1b = esi;
    int16_t var_1f = arg6;
    *(arg3 + 0x86b4969);
    int32_t ecx = *(arg3 + 0x86b4969) * 0x43;
    bool c_2 = /* bool c_2 = unimplemented  {imul ecx, dword [ecx+0x86b4969], 0x43} */;
    edx = edx - 0x7f;
    *(ebx_1 - 0x699e77b8) &= ebx_1;
    *(ecx - 0x79) -= 0xb8;
    *(ecx - 1) &= 0x2180e180;
    *(ecx - 1) -= 0x52;
    *(eax_2 - 1 + (esi << 2) - 0x720098d) = RORD(*(eax_2 - 1 + (esi << 2) - 0x720098d), 1);
    *(ecx - 0x1d);
    int16_t eax_4;
    eax_4 = 0x80;
    eax_4 = 0x81;
    *(ecx - 0x129e77ba) &= edx;
    *0xf56de37d -= 0xd0;
    *(ecx - 2) &= 0x8f;
    *(ecx - 0x75) = *(eax_4 - 1)[1];
    *(ecx - 0x4b) -= 0xb0;
    *arg6 &= 0x488c06b0;
    *(ecx + 0x3c) = *(eax_4 - 1)[1];
    /* undefined */
}

int32_t __convention("regparm") sub_24e9d(void* arg1, int32_t arg2, char* arg3, int32_t* arg4 @ ebp, int32_t arg5 @ esi, int32_t arg6 @ edi)
{
    __int1();
    *arg3 -= 0x80;
    *(arg1 - 0x7ffe7fff) += arg1;
    *(arg1 - 0x7ffe7fff) += arg1;
    *(arg1 - 0x7ffe7fff) += arg1;
    *(arg1 - 0x7ffe7fff) += arg1;
    *(arg1 - 0x7ffe7fff) += arg1;
    *(arg1 - 0x7fde7fff) += arg1;
    *(arg1 - 0x7fde7fdf) &= arg1;
    *(arg1 - 0x7fde7fff) &= arg1;
    *(arg1 - 0x7fae7faf) += arg1;
    char* var_4 = arg3;
    *arg3 -= 0x80;
    *(arg1 - 0x7ffe7fff) += arg1;
    *(arg1 - 0x7fae7faf) += arg1;
    char temp1 = arg3[0xffffff80];
    arg3[0xffffff80] = temp1 - 7;
    arg3[0xffffff80] = arg3[0xffffff80] + 0x51;
    *arg3 -= 0x80;
    *(arg1 - 0x7f5e7f87);
    *(arg1 - 0x7f5e7f87) &= arg1;
    *arg3 -= 0x80;
    *(arg1 - 0x7ffe7fff) += arg1;
    *(arg1 - 0x7ffe7fff) += arg1;
    *(arg1 - 0x7ffe7fff) += arg1;
    int32_t temp3_1 = *(arg1 + 0x473e8701);
    *(arg1 + 0x473e8701) += arg1;
    bool c_24 = temp3_1 + arg1 < temp3_1;
    bool z_1 = temp3_1 == -(arg1);
    bool s_2 = temp3_1 + arg1 < 0;
    bool o_8 = temp3_1 + arg1;
    
    while (!z_1 && s_2 == o_8)
    {
        if (!c_24)
            /* undefined */
        
        while (true)
        {
            arg3[0x69809180] -= 0x80;
            *(arg1 - 0x7fce7fcf) += arg1;
            *(arg1 - 0x7ffe7fbf) &= arg1;
            label_24f2d:
            int32_t temp8_1 = *(arg1 - 0x7ffe7fff);
            *(arg1 - 0x7ffe7fff) += arg1;
            *(arg1 - 0x7fbe7fdf) = *(arg1 - 0x7fbe7fdf) + arg1;
            arg3 = &arg3[1];
            char temp9_1 = arg3[0xffffff80];
            arg3[0xffffff80] += 0x21;
            *arg3 = *arg3 - 0x80;
            int32_t temp10_1 = *(arg1 - 0x7fde7fbf);
            *(arg1 - 0x7fde7fbf) += arg1;
            *(arg1 - 0x7fee7fef) = *(arg1 - 0x7fee7fef) + arg1;
            *(arg1 - 0x7ffe7fbf) &= arg1;
            *(arg1 - 0x7f8e7f57) &= arg1;
            label_24f5a:
            arg3[0xffffff80] ^= 0xa9;
            *arg3 &= 0x80;
            *(arg1 - 0x7fde7fff) += arg1;
            *(arg1 - 0x7fde7f07) &= arg1;
            *(arg1 - 0x7ffe7fff) &= arg1;
            *(arg1 - 0x7ffe7fff) += arg1;
            *(arg1 - 0x7fce7fcf) += arg1;
            *(arg1 - 0x7ffe7fff) &= arg1;
            *(arg1 - 0x7f067fff) += arg1;
            *(arg1 - 0x7ffe7fff) += arg1;
            *(arg1 - 0x7ffe7fff) += arg1;
            *(arg1 - 0x7ffe7fff) += arg1;
            *(arg1 - 0x7ffe7fcf) ^= arg1;
            *(arg1 - 0x7fee7ff7) += arg1;
            *(arg1 - 0x7f7e7fbf) &= arg1;
            *(arg1 - 0x7f8e7fff) += arg1;
            *(arg1 - 0x7f567f67) = arg1;
            int32_t* esp_5 = arg4;
            arg4 = *esp_5;
            void* esp_6 = &esp_5[1];
            arg3[0x1807180] |= 0x80;
            *(arg1 - 0x7fde7f9f) &= arg1;
            *(arg1 - 0x7fde7fdf);
            *(arg1 - 0x7fde7fdf) &= arg1;
            int32_t temp12_1 = *(arg1 - 0x7f567fdf);
            *(arg1 - 0x7f567fdf) += arg1;
            
            if (temp12_1 + arg1)
                break;
            
            *(arg1 - 0x7ffe7fff) += arg1;
            *(arg1 - 0x7fae7fff) += arg1;
            *(esp_6 - 4) = arg3;
            *(esp_6 - 8) = arg3;
            *(esp_6 - 0xc) = arg3;
            arg3[0xffffff80] = arg3[0xffffff80] + 1;
            char temp15_1 = *arg3 & 0x80;
            *arg3 = temp15_1;
            
            if (temp15_1 >= 0)
                break;
            
            void* eax = *0x29807180;
            arg3 ^= 0x80;
            *(eax - 0x7f3e7fff);
            *(eax - 0x7f3e7fff) &= eax;
            arg4 = *arg4;
            *arg3 = *arg3 - 0x80;
            *(eax - 0x7f667fbf);
            *(eax - 0x7f667fbf) &= eax;
            *(eax - 0x7fbe7fff) = *(eax - 0x7fbe7fff) - eax;
            arg1 = *0x4180a180;
        }
        
        arg1 += *(arg1 + 0x3e);
        *arg5;
        *(arg1 - 0x7ffe7fff) += arg1;
        *(arg1 - 0x7ffe7fff) += arg1;
        *(arg1 - 0x7ffe7fff) += arg1;
        int32_t temp20_1 = *(arg1 - 0x78fe7fff);
        *(arg1 - 0x78fe7fff) += arg1;
        c_24 = temp20_1 + arg1 < temp20_1;
        int32_t temp21_1 = arg6;
        arg6 += 1;
        z_1 = temp21_1 == 0xffffffff;
        s_2 = temp21_1 + 1 < 0;
        o_8 = temp21_1 + 1;
    }
    
    *arg3 -= 0x80;
    *(arg1 - 0x7fee7f37) = ROLD(*(arg1 - 0x7fee7f37), 0x21);
    char temp7_1 = arg3[0xffffff80];
    arg3[0xffffff80] -= 0x67;
    *arg3 = *arg3 + 0x80;
    int32_t temp6_1 = *(arg1 - 0x7f5e7fbf);
    *(arg1 - 0x7f5e7fbf) += arg1;
    bool c_4 = temp6_1 + arg1 < temp6_1;
    arg1 = *0xa9804180;
    arg3[0x1806980] = arg3[0x1806980] - 0x80;
    *(arg1 - 0x7fde7fcf) ^= arg1;
    arg3 = &arg3[1];
    *arg3 -= 0x80;
    goto label_24f2d;
}

void* __convention("regparm") sub_254bf(int32_t* arg1, int32_t arg2, void* arg3 @ ebp, int32_t arg4)
{
    int32_t* ecx;
    *ecx[1] = 0x9a;
    int32_t temp0 = COMBINE(arg2, arg1) / *arg1;
    int32_t temp1 = COMBINE(arg2, arg1) % *arg1;
    *ecx[1] = 0x9b;
    int32_t temp1_1 = COMBINE(temp1, temp0) % *temp0;
    *ecx[1] = 0xdd;
    *(arg3 - 0x4ac6e35b);
    int32_t eax_2;
    bool c;
    eax_2 = (COMBINE(temp1, temp0) / *temp0 - 0x1de0b539) | 0x1c;
    *(arg3 - 0x4ac6e390);
    *ecx[1] = 0xbb;
    *ecx[1] = 0xbc;
    *ecx[1] = 0xbd;
    *ecx[1] = 0xbe;
    *ecx[1] = 0xbf;
    *ecx[1] = 0xc0;
    *ecx[1] = 0xc1;
    *ecx[1] = 0xc2;
    *ecx[1] = 0xc4;
    *ecx[1] = 0xc5;
    *ecx[1] = 0xc6;
    *ecx[1] = 0xc8;
    *ecx[1] = 0xc9;
    void arg_38;
    void* esp = &arg_38;
    void* result = eax_2 - 0xe;
    *ecx[1] = 0xca;
    int32_t i;
    
    do
    {
        *ecx[1] = 0xcb;
        *ecx[1] = 0xcc;
        *ecx[1] = 0xcd;
        *ecx[1] = 0xce;
        *ecx[1] = 0xcf;
        *ecx[1] = 0xd1;
        *ecx[1] = 0xd2;
        *ecx[1] = 0xd7;
        *ecx[1] = 0xd8;
        *ecx[1] = 0xd9;
        *ecx[1] = 0xda;
        void* edi_1 = *(esp + 0x2c);
        void* esp_12 = esp + 0x30;
        *ecx[1] = 0x8b;
        *(ecx + result - 0xc + 0x192018c) += ecx;
        esp = result - 0xc;
        *(edi_1 - 0x67fe71ff) += temp1_1;
        *(ecx + esp_12) -= 0x454ab7ca;
        result = esp_12 - 1;
        int32_t ebx;
        *(ecx + result + 0x7a) += ebx;
        i = *(arg3 - 0x3f);
        *(arg3 - 0x3f) += temp1_1;
    } while (i == -(temp1_1) || i + temp1_1 < i);
    *0xbab547eb <<= 0x81;
    return result;
}

int32_t __convention("regparm") sub_2560c(int32_t arg1, char* arg2)
{
    bool o;
    *arg2 = !o;
    /* undefined */
}

int32_t __convention("regparm") sub_25611(int16_t arg1)
{
    /* undefined */
}

int32_t __convention("regparm") sub_25613(int32_t arg1, int32_t* arg2 @ ebp, int32_t arg3 @ esi, int32_t* arg4 @ edi)
{
    int16_t var_4 = &__return_addr;
    int32_t eflags;
    char temp0;
    char temp1;
    temp0 = __aad_immb(0x58, arg1, *arg1[1]);
    arg1 = temp0;
    *arg1[1] = temp1;
    void* ebx;
    bool c;
    *(ebx - 0x60e262e5) = *(ebx - 0x60e262e5) - ebx;
    void* ebp = *arg2;
    int32_t eflags_1;
    char temp0_1;
    char temp1_1;
    temp0_1 = __aad_immb(0xa4, (arg1 + 1), *(arg1 + 1)[1]);
    int32_t eax;
    eax = temp0_1;
    *eax[1] = temp1_1;
    int32_t result = eax & 0x29a927a7;
    *arg4 = result;
    *(ebp - 0x4ed050d3);
    *(ebx - 0x48ca4acd) ^= arg3 - 1;
    int32_t eflags_2;
    char temp0_2;
    char temp1_2;
    temp0_2 = __aaa(result, *result[1], eflags_1);
    result = temp0_2;
    *result[1] = temp1_2;
    return result;
}

int32_t __convention("fastcall") sub_25640(int32_t arg1, void* arg2 @ ebp, int32_t arg3 @ edi)
{
    int32_t eax;
    int16_t ds;
    eax = __lds_gprz_memp(*(arg2 - 0x39));
    *arg2;
    /* undefined */
}

void sub_25648() __noreturn
{
    trap(0x4d);
}

void __convention("regparm") sub_259d7(int32_t arg1, int32_t arg2, int16_t* arg3, void* arg4 @ ebp, char* arg5 @ esi, char* arg6 @ edi, long double arg7 @ st0) __noreturn
{
    int16_t ds;
    uint32_t var_4 = ds;
    *arg3;
    *arg5;
    *arg5;
    uint32_t var_8 = ds;
    uint32_t var_c = ds;
    uint32_t var_10 = ds;
    bool p = /* bool p = unimplemented  {dec ebx} */;
    int32_t ebx;
    bool s = ebx - 1 < 0;
    uint32_t var_14 = ds;
    var_14 = ds;
    uint32_t ebx_1 = var_14;
    var_14 = ds;
    uint32_t* esp_1 = &var_14;
    
    if (s)
        goto label_25a0a;
    
    if (!s)
        goto label_25a0f;
    
    int32_t var_18_1 = 0x1e;
    ebx_1 = *arg5 * 0x7a;
    uint32_t var_1c = ds;
    esp_1 = &var_1c;
    void* esp_3;
    
    if (!p)
    {
        int32_t var_20_1 = arg1 - 1;
        uint32_t var_24 = ds;
        esp_3 = &var_24;
    }
    else
    {
        char temp4_1 = *arg5;
        *arg5 += ebx_1;
        *arg6 = (arg1 - 1);
        *arg5 = *arg5 + ebx_1;
        *arg6 = (arg1 - 1);
        *arg5 &= ebx_1;
        *arg6 = (arg1 - 1);
        *arg5 ^= ebx_1;
        *(arg3 - 1);
        *arg5;
        *arg5;
        label_25a0a:
        ebx_1 ^= *arg5;
        label_25a0f:
        *(esp_1 - 5) = ds;
        esp_3 = esp_1 - 5;
        *(arg3 - 1) += 0x1e501e43;
    }
    
    *arg6 += 0x60;
    *(esp_3 - 4) = ds;
    *arg6 += 0x65;
    *(esp_3 - 8) = ds;
    *(arg3 - 1) += 0x1e731e6c;
    *(arg3 - 1) += 0x20ce1e7c;
    *(arg3 - 1) += 0x20f020b2;
    *(arg1 - 1);
    *(arg3 - 1) += 0x25502003;
    int32_t eax_2;
    void* ecx_1;
    void* edx_1;
    eax_2 = 0xaf300a45();
    char temp0 = *(eax_2 - 0x2de70082);
    *(eax_2 - 0x2de70082) = (eax_2 - 0x2de70082);
    char* eax_3;
    eax_3 = temp0;
    int32_t eflags;
    void* eax_4;
    eax_4 = __in_al_immb(0, eflags);
    *arg5 -= 9;
    eax_4 += *(eax_4 - 0x69fe7fff);
    eax_4 += *ebx_1[1];
    void* edi = arg6 + esp_3 - 8;
    void* esp_6 = esp_3 - 8 + eax_4;
    void* ebp = arg4 + esp_6;
    int32_t esi_1 = (arg5 >> 0x9a) * 2;
    void* ecx_4 = ecx_1 + arg4 + esp_3 - 8 + ebp;
    void* ebx_2 = ebx_1 + esp_6;
    *(eax_4 - 0x38fd47ff) += eax_4;
    void* esp_7 = esp_6 + eax_4;
    *(ebx_2 - 0x5ffe4dff) += esi_1;
    *(eax_4 - 0x3bfe3cff) += esp_7;
    void* ebx_4 = ebx_2 + edx_1 + eax_4;
    *(eax_4 - 0x3cfe3eff) += esp_7;
    *(eax_4 - 0x11fe16ff) += esp_7;
    *(eax_4 - 0x2cfe39ff) += esp_7;
    *(eax_4 - 0x10fe32ff) += esp_7;
    void* esp_8 = esp_7 * 2;
    void* ebp_4 = ebp + esp_6 + edx_1 + ecx_4 + esp_8;
    *(eax_4 - 0x38fd4fff) += eax_4;
    void* esp_9 = esp_8 + eax_4;
    *(ebx_4 - 0x39fe4dff) += esi_1;
    *(ebx_4 - 0x27fe4fff) += esi_1;
    *(ebp_4 - 0x51fe4cff) += ebp_4;
    *(eax_4 - 0x4ffe51ff) += esi_1;
    *(ebp_4 - 0x5fe48ff) += ebp_4;
    *(eax_4 - 0x46fe07ff) += edi;
    void* ecx_5 = ecx_4 + edi;
    void* edx_3 = edx_1 + eax_4 + esi_1;
    *(eax_4 - 0x7fff6dff) += eax_4;
    void* eax_5 = eax_4 + *(edx_3 + 0x69418001);
    *edx_3 -= ecx_5;
    *(eax_5 - 0x7cfc7f00) += eax_5;
    char temp3 = *(edx_3 + eax_5 + 0x1800589);
    *(edx_3 + eax_5 + 0x1800589) += eax_5;
    
    if (temp3 + eax_5 < temp3)
    {
        *0x1803e62 -= 0x80;
        *(eax_5 + 0x4fd18601) += eax_5;
        edx_3 += 1;
    }
    else
    {
        *ecx_5 |= 0xffffffdc;
        void* eax_6 = eax_5 - *(ebx_4 - 0x7cd40bf7);
        *esi_1 |= ebp_4 + esp_9;
        eax_5 = eax_6 - *(ebx_4 - 0x7ffe7ff7);
        *(eax_5 - 0x7fc18fff) += eax_5;
        *(eax_5 + 0x78018001) += eax_5;
        *ecx_5 -= 0x80;
        *(eax_5 - 0x7ffe7fff) += eax_5;
        *(eax_5 + 0x62b98341) += eax_5;
        *ecx_5 -= 0x80;
        *(eax_5 - 0x79fe7fff) += eax_5;
        *(edi + 0x42) = RORD(*(edi + 0x42), 1);
    }
    
    char* edi_1 = esp_9 * 0xffffffcc;
    int32_t eflags_1;
    char temp0_2;
    char temp1_1;
    temp0_2 = __aas(eax_5, *eax_5[1], eflags);
    eax_5 = temp0_2;
    *eax_5[1] = temp1_1;
    *edx_3 ^= 0xffffffb3;
    *edx_3[1] ^= *(ebx_4 + 0x7f3e6332);
    *edi_1 = eax_5;
    __out_dx_oeax(edx_3, eax_5, eflags_1);
    *esi_1;
    uint8_t* edi_3;
    uint8_t temp0_3;
    temp0_3 = __insb(&edi_1[1], edx_3, eflags_1);
    *edi_3 = temp0_3;
    *esp_9;
    trap(0x27);
}

int32_t __convention("regparm") sub_25d01(int32_t arg1, int32_t arg2 @ ebp, int32_t arg3 @ edi)
{
    int32_t ebp = arg2 + *(arg3 + 0xa744533);
    int16_t x87status;
    uint224_t temp0;
    temp0 = __fnstenv_memmem28();
    *(arg1 + (ebp << 1)) = temp0;
    /* undefined */
}

void* __convention("regparm") sub_25d0e(void* arg1, void* arg2, int32_t* arg3, int32_t arg4 @ ebp, int32_t* arg5 @ esi, int32_t* arg6 @ edi)
{
    *0x32268807 = arg1;
    *arg3 |= 0xffffff87;
    *(arg6 - 0x77fc8961);
    arg2 |= *(arg2 - 0x7d0075da);
    *(arg1 - 0x749863e5) |= arg2;
    int32_t* ebx;
    ebx += arg5[-0x16ff5a00];
    *ebx;
    *ebx = arg4;
    arg1 = 0x2e;
    arg1 = 0x31;
    arg2 = 0;
    *arg6 = *arg5;
    return arg1;
}

